package modchu.pflm;import java.util.HashMap;import java.util.List;import modchu.lib.Modchu_AS;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_GuiSlotMasterBasis;import modchu.lib.Modchu_Main;import org.lwjgl.input.Mouse;import org.lwjgl.opengl.GL11;public class PFLM_GuiSlot extends Modchu_GuiSlotMasterBasis {	public int top;	public int bottom;	public int slotHeight;	public int mouseX;	public int mouseY;	private float initialClickY = -2.0F;	public float amountScrolled;	private float scrollMultiplier;	private int selectedElement = -1;	private int right;	private int left;	private int field_77242_t;	private long lastClicked = 0L;	private boolean showSelectionBox = true;	private boolean field_77243_s;	public List baseList;	public int guiNumber = 0;	public int slotPosY;	public int slotPosX;	public int scrollBarY = 0;	public boolean oneClickLock;	public int noUseTopBottomSizeY = 0;	public int selectedDisplayCount;	private int selected;	private Object popWorld;	private int showSelectionBoxWidth;	private int scrollUpButtonID;	private int scrollDownButtonID;	private int scrollBarInBoxY;	private int tempMouseY;	private boolean mouseClick;	public PFLM_GuiSlot(HashMap<String, Object> map) {		super(map);		init(map);	}	public void init(HashMap<String, Object> map) {		selected = 0;		if (map != null) {			top = 0;			bottom = (Integer) map.get("Integer");			slotHeight = (Integer) map.get("Integer1");			left = 0;			right = (Integer) map.get("Integer");			showSelectionBoxWidth = (Integer) map.get("Integer");			slotPosX = (Integer) map.get("Integer2");			slotPosY = (Integer) map.get("Integer3");			guiNumber = (Integer) map.get("Integer4");			popWorld = Modchu_AS.get(Modchu_AS.minecraftWorld);		}	}	@Override	public int getSize() {		return base.getGuiSlotSize(guiNumber);	}	@Override	public int getContentHeight() {		return base.getGuiSlotContentHeight(guiNumber);	}	public void elementClicked(int i, boolean flag) {		base.guiSlotElementClicked(guiNumber, i, flag);	}	public void outOfRangeClick(int mouse_x, int mouse_y, boolean flag) {		base.outOfRangeClick(guiNumber, mouse_x, mouse_y, flag);	}	@Override	public boolean isSelected(int i) {		return base.guiSlotIsSelected(guiNumber, i);	}	@Override	public void drawBackground() {	}	public void clickDecision(int mouse_x, int mouse_y, float par3) {		byte mouseMoveY = (byte) (tempMouseY > Mouse.getY() ? 1 : tempMouseY < Mouse.getY() ? -1 : 0);		tempMouseY = Mouse.getY();		mouseX = mouse_x;		mouseY = mouse_y;		int sizeY = bottom - (slotPosY > -1 ? slotPosY : -slotPosY);		int scrollBarX = getScrollBarX();		int showSelectionBoxSizeY = slotHeight - 4;		int showSelectionBoxLeft = slotPosX;		int showSelectionBoxRight = slotPosX + showSelectionBoxWidth;		int slotSize = getSize();		int scrollBarSizeX = getScrollBarSizeX();		int scrollBarInBoxSizeY = 0;		boolean isScrollBar = selectedDisplayCount < getContentHeight() / slotHeight;		int scrollBarDisplaySizeY = bottom + top;		//if (guiNumber == 0) Modchu_Debug.mDebug("top="+top+" bottom="+bottom);		float f;		if (isScrollBar) {			f = ((float) selectedDisplayCount / (float) slotSize) * 0.9F;			//if (guiNumber == 0) Modchu_Debug.mDebug("selectedDisplayCount="+selectedDisplayCount+" slotSize="+slotSize+" f="+f);			scrollBarInBoxSizeY = (int) (scrollBarDisplaySizeY * f);			//if (guiNumber == 0) Modchu_Debug.mDebug("scrollBarDisplaySizeY="+scrollBarDisplaySizeY+" scrollBarInBoxSizeY="+scrollBarInBoxSizeY);		}		if (Mouse.isButtonDown(0)				&& !oneClickLock) {			//if (initialClickY == -1.0F) {				boolean var7 = true;				if (mouse_y >= slotPosY						&& mouse_y <= slotPosY + sizeY + slotHeight) {					int clickY = mouse_y + ((int)amountScrolled * slotHeight);					selected = (clickY - slotPosY + (showSelectionBoxSizeY / 2)) / slotHeight;					//if (guiNumber == 0) Modchu_Debug.mDebug("Mouse.isButtonDown selected="+selected);					//Modchu_Debug.mDebug("showSelectionBoxSizeY="+showSelectionBoxSizeY);					//if (guiNumber == 0) Modchu_Debug.mDebug("Mouse.isButtonDown amountScrolled="+amountScrolled);					//Modchu_Debug.mDebug("clickY="+clickY+" mouse_y="+mouse_y);					long l1 = Modchu_AS.getLong(Modchu_AS.minecraftSystemTime);					if (mouse_x >= showSelectionBoxLeft							&& mouse_x <= showSelectionBoxRight							&& selected >= 0							&& clickY >= 0							&& selected < slotSize) {						boolean var12 = selected == selectedElement && l1 - lastClicked < 250L;						elementClicked(selected, var12);						selectedElement = selected;						lastClicked = l1;					} else if (mouse_x >= showSelectionBoxLeft							&& mouse_x <= showSelectionBoxRight							&& clickY < 0) {						outOfRangeClick(mouse_x, mouse_y, l1 - lastClicked < 250L);						var7 = false;					}				}// else {					//initialClickY = -2.0F;				//}				//Modchu_Debug.mDebug("mouse_x="+mouse_x+" scrollBarX="+scrollBarX);				if (isScrollBar						&& mouse_x >= scrollBarX						&& mouse_x <= scrollBarX + scrollBarSizeX						&& (mouse_y >= top && mouse_y <= bottom)) {					if (mouse_y < scrollBarInBoxY) {						scrollMultiplier = -scrollBarSizeX;					} else {						if (!mouseClick								| (mouseClick								&& mouse_y > scrollBarInBoxY + scrollBarInBoxSizeY)) scrollMultiplier = scrollBarSizeX;					}					//initialClickY = (float)mouse_y;					if (mouse_y < scrollBarInBoxY							| mouse_y > scrollBarInBoxY + scrollBarInBoxSizeY) {						amountScrolled += mouseClick ? scrollMultiplier > 0 ? 1.0F : -1.0F : scrollMultiplier;					} else {						f = mouseMoveY == 1 ? -1.0F : mouseMoveY == -1 ? 1.0F : 0.0F;						amountScrolled -= f;						//if (guiNumber == 0) Modchu_Debug.mDebug("scrollBar click amountScrolled="+amountScrolled);					}					//Modchu_Debug.mDebug("scrollBar click scrollMultiplier="+scrollMultiplier+" amountScrolled="+amountScrolled);				}// else {					//scrollMultiplier = 1.0F;				//}				//if (var7) {				//} else {					//initialClickY = -2.0F;				//}			//}// else if (initialClickY >= 0.0F) {				//Modchu_Debug.mDebug("amountScrolled="+amountScrolled);			//}			mouseClick = true;		} else {			if (oneClickLock					&& !Mouse.isButtonDown(0)) {				oneClickLock = false;			}			if (isScrollBar					&& ((mouse_x >= scrollBarX && mouse_x <= scrollBarX + scrollBarSizeX)					| (mouse_x >= showSelectionBoxLeft && mouse_x <= showSelectionBoxRight))					&& (mouse_y >= slotPosY && mouse_y <= slotPosY + sizeY)) {				Object gameSettings = Modchu_AS.get(Modchu_AS.minecraftGameSettings);				int width = Modchu_AS.getInt(Modchu_AS.guiScreenWidth, base);				int height = Modchu_AS.getInt(Modchu_AS.guiScreenHeight, base);				while (!Modchu_AS.getBoolean(Modchu_AS.minecraftGameSettingsTouchscreen)						&& Mouse.next()) {					int var16 = Mouse.getEventDWheel();					if (var16 != 0) {						if (var16 > 0) {							var16 = -1;						} else if (var16 < 0) {							var16 = 1;						}						int i1 = height / 50 < 2 ? 1 : height / 50;						if (i1 > selectedDisplayCount) i1 = selectedDisplayCount;						amountScrolled += var16 * i1;						//Modchu_Debug.mDebug("touchscreen && Mouse.next() amountScrolled="+amountScrolled);					}				}			}			//initialClickY = -1.0F;			scrollMultiplier = 0.0F;			mouseClick = false;		}	}	@Override	public void drawScreen(int mouse_x, int mouse_y, float par3) {		Modchu_Debug.mDebug("PFLM_GuiSlot drawScreen");		mouseX = mouse_x;		mouseY = mouse_y;		top = getTop();		bottom = getBottom();		int slotSize = getSize();		int scrollBarX = getScrollBarX();		int scrollBarSizeX = getScrollBarSizeX();		int showSelectionBoxLeft = slotPosX;		int showSelectionBoxRight = slotPosX + showSelectionBoxWidth;		int sizeY = bottom - (slotPosY > -1 ? slotPosY : -slotPosY);		int selected;		int showSelectionBoxSizeY = slotHeight - 4;		int showSelectionBoxPosTop;		int scrollBarDisplaySizeY = bottom + top;		//Modchu_Debug.mDebug("scrollBarDisplaySizeY="+scrollBarDisplaySizeY);		if (scrollBarDisplaySizeY < 1) scrollBarDisplaySizeY = 1;		//int scrollBarSizeY = getContentHeight();		//Modchu_Debug.mDebug("scrollBarSizeY="+scrollBarSizeY);		selectedDisplayCount = getLimitSelectedDisplayCount() > 0 ? getLimitSelectedDisplayCount() : sizeY / slotHeight;		int scrollBarInBoxSizeY = 0;		boolean isScrollBar = selectedDisplayCount < getContentHeight() / slotHeight;		//if (guiNumber == 0) Modchu_Debug.mDebug("scrollBarDisplaySizeY="+scrollBarDisplaySizeY+" slotHeight="+slotHeight);		//if (guiNumber == 0) Modchu_Debug.mDebug("selectedDisplayCount="+selectedDisplayCount+" getContentHeight() / slotHeight="+(getContentHeight() / slotHeight));		//if (guiNumber == 0) Modchu_Debug.mDebug("top="+top+" bottom="+bottom);		if (isScrollBar) {			float f = ((float) selectedDisplayCount / (float) slotSize) * 0.9F;			//if (guiNumber == 0) Modchu_Debug.mDebug("selectedDisplayCount="+selectedDisplayCount+" slotSize="+slotSize+" f="+f);			scrollBarInBoxSizeY = (int) (scrollBarDisplaySizeY * f);			//if (guiNumber == 0) Modchu_Debug.mDebug("scrollBarDisplaySizeY="+scrollBarDisplaySizeY+" scrollBarInBoxSizeY="+scrollBarInBoxSizeY);		}		bindAmountScrolled();		if (amountScrolled < 0.0F) {			amountScrolled = 0.0F;		}		//GL11.glDisable(GL11.GL_LIGHTING);		//GL11.glDisable(GL11.GL_FOG);		Object tessellator = Modchu_AS.get(Modchu_AS.tessellatorInstance);		//GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);/*		if (field_77243_s)		{			func_77222_a(showSelectionBoxRight, slotPosY, tessellator);		}*/		int startSelected = (int) amountScrolled > 0 ? (int) amountScrolled : 0;		if (slotSize - startSelected < selectedDisplayCount) {			//Modchu_Debug.mDebug("スクロール位置調整");			startSelected = slotSize - selectedDisplayCount;			if (startSelected < -1) startSelected = 0;			amountScrolled = startSelected;		}		if (startSelected < 0) startSelected = 0;		//Modchu_Debug.mDebug("スクロール位置="+(slotSize - startSelected));		//Modchu_Debug.mDebug("guiNumber"+guiNumber+" 表示数="+selectedDisplayCount);		//Modchu_Debug.mDebug("guiNumber"+guiNumber+" amountScrolled="+amountScrolled);		//Modchu_Debug.mDebug("startSelected="+startSelected);		//Modchu_Debug.mDebug("guiNumber"+guiNumber+" startSelected="+startSelected);		for (selected = startSelected; selected < slotSize				&& selected <= startSelected + selectedDisplayCount; selected++) {			//if (guiNumber == 0) Modchu_Debug.mDebug("selected="+selected+" startSelected="+startSelected+" selectedDisplayCount="+selectedDisplayCount);			showSelectionBoxPosTop = slotPosY + (selected * slotHeight) - ((int) amountScrolled * slotHeight);// - ((int) amountScrolled > 0 ? slotHeight : 0);			showSelectionBoxSizeY = slotHeight - 4;			//Modchu_Debug.mDebug("guiNumber"+guiNumber+" showSelectionBoxPosTop="+showSelectionBoxPosTop);			//Modchu_Debug.mDebug("guiNumber"+guiNumber+" slotPosY="+slotPosY);			//Modchu_Debug.mDebug("guiNumber"+guiNumber+" slotHeight="+slotHeight);			//Modchu_Debug.mDebug("guiNumber"+guiNumber+" amountScrolled="+amountScrolled);			//if (showSelectionBoxPosTop <= slotPosY + sizeY && showSelectionBoxPosTop + showSelectionBoxSizeY >= slotPosY)			//{				if (showSelectionBox && isSelected(selected))				{					//GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);					GL11.glDisable(GL11.GL_TEXTURE_2D);					int version = Modchu_Main.getMinecraftVersion();					if (version > 180) {						Modchu_AS.set(Modchu_AS.tessellatorStartDrawingQuads, tessellator, 7, Modchu_AS.get("DefaultVertexFormats", version > 188 ? "POSITION_TEX_COLOR" : "field_181709_i"));					} else {						Modchu_AS.set(Modchu_AS.tessellatorStartDrawingQuads, tessellator);					}					Modchu_AS.set(Modchu_AS.tessellatorSetColorOpaque_I, tessellator, 8421504);					int j = 8421504 >> 16 & 255;					int k = 8421504 >> 8 & 255;					int l = 8421504 & 255;					Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)showSelectionBoxLeft, (double)(showSelectionBoxPosTop + showSelectionBoxSizeY + 2), 0.0D, 0.0D, 1.0D, j, k, l, 255);					Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)showSelectionBoxRight, (double)(showSelectionBoxPosTop + showSelectionBoxSizeY + 2), 0.0D, 1.0D, 1.0D, j, k, l, 255);					Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)showSelectionBoxRight, (double)(showSelectionBoxPosTop - 2), 0.0D, 1.0D, 0.0D, j, k, l, 255);					Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)showSelectionBoxLeft, (double)(showSelectionBoxPosTop - 2), 0.0D, 0.0D, 0.0D, j, k, l, 255);					Modchu_AS.set(Modchu_AS.tessellatorSetColorOpaque_I, tessellator, 0);					Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)(showSelectionBoxLeft + 1), (double)(showSelectionBoxPosTop + showSelectionBoxSizeY + 1), 0.0D, 0.0D, 1.0D, 0, 0, 0, 255);					Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)(showSelectionBoxRight - 1), (double)(showSelectionBoxPosTop + showSelectionBoxSizeY + 1), 0.0D, 1.0D, 1.0D, 0, 0, 0, 255);					Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)(showSelectionBoxRight - 1), (double)(showSelectionBoxPosTop - 1), 0.0D, 1.0D, 0.0D, 0, 0, 0, 255);					Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)(showSelectionBoxLeft + 1), (double)(showSelectionBoxPosTop - 1), 0.0D, 0.0D, 0.0D, 0, 0, 0, 255);					Modchu_AS.set(Modchu_AS.tessellatorDraw, tessellator);					GL11.glEnable(GL11.GL_TEXTURE_2D);				}				//if (guiNumber == 0) Modchu_Debug.mDebug("drawSlot height="+height+" showSelectionBoxPosTop="+showSelectionBoxPosTop+" showSelectionBoxSizeY="+showSelectionBoxSizeY);				drawSlot(selected, showSelectionBoxLeft, showSelectionBoxRight, showSelectionBoxPosTop, showSelectionBoxSizeY, tessellator);			//}		}		showSelectionBoxPosTop = slotPosY - ((int) amountScrolled * slotHeight);		drawSlot(-1, showSelectionBoxLeft, showSelectionBoxRight, showSelectionBoxPosTop, showSelectionBoxSizeY, tessellator);		//GL11.glDisable(GL11.GL_DEPTH_TEST);		//GL11.glEnable(GL11.GL_BLEND);		//GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);		//GL11.glDisable(GL11.GL_ALPHA_TEST);		//GL11.glShadeModel(GL11.GL_SMOOTH);		GL11.glDisable(GL11.GL_TEXTURE_2D);		int var19 = func_77209_d();		//Modchu_Debug.mDebug("var19="+var19);		if (isScrollBar) {			if (scrollBarInBoxSizeY < 32) scrollBarInBoxSizeY = 32;			if (scrollBarInBoxSizeY > scrollBarDisplaySizeY) scrollBarInBoxSizeY = scrollBarDisplaySizeY;			//Modchu_Debug.mDebug("scrollBarDisplaySizeY="+scrollBarDisplaySizeY+" scrollBarInBoxSizeY="+scrollBarInBoxSizeY+" f="+f);			//float f1 = amountScrolled / (float)(getSize() - selectedDisplayCount);			//if (f1 < 0.0F) f1 = 0.0F;			int var13 = (bottom - top) * (bottom - top) / getContentHeight();			if (var13 < 32) var13 = 32;			if (var13 > bottom - top - 32) var13 = bottom - top - 32;			scrollBarInBoxY = (int)amountScrolled * (bottom - top - var13) / var19 + top;			//scrollBarInBoxY = (int) (top + ((height - top) * f1));			//if (guiNumber == 0) Modchu_Debug.mDebug("f1="+f1+" scrollBarInBoxY="+scrollBarInBoxY);			//if (scrollBarInBoxY < top) scrollBarInBoxY = top;			//if (scrollBarInBoxY + scrollBarInBoxSizeY > bottom) scrollBarInBoxY = bottom - scrollBarInBoxSizeY;			//if (guiNumber == 0) Modchu_Debug.mDebug("scrollBarInBoxY="+scrollBarInBoxY);			//if (guiNumber == 0) Modchu_Debug.mDebug("amountScrolled="+amountScrolled);			Modchu_AS.set(Modchu_AS.tessellatorStartDrawingQuads, tessellator);			Modchu_AS.set(Modchu_AS.tessellatorSetColorRGBA_I, tessellator, 0, 255);			double dBottom = (double)bottom + scrollBarY;			double dTop = (double)top + scrollBarY;			Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)scrollBarX, dBottom, 0.0D, 0.0D, 1.0D);			Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)scrollBarX + scrollBarSizeX, dBottom, 0.0D, 1.0D, 1.0D);			Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)scrollBarX + scrollBarSizeX, dTop, 0.0D, 1.0D, 0.0D);			Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)scrollBarX, dTop, 0.0D, 0.0D, 0.0D);			Modchu_AS.set(Modchu_AS.tessellatorDraw, tessellator);			Modchu_AS.set(Modchu_AS.tessellatorStartDrawingQuads, tessellator);			Modchu_AS.set(Modchu_AS.tessellatorSetColorRGBA_I, tessellator, 8421504, 255);			dTop = (double)scrollBarInBoxY + scrollBarY;			Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)scrollBarX, dTop + scrollBarInBoxSizeY, 0.0D, 0.0D, 1.0D);			Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)scrollBarX + scrollBarSizeX, dTop + scrollBarInBoxSizeY, 0.0D, 1.0D, 1.0D);			Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)scrollBarX + scrollBarSizeX, dTop, 0.0D, 1.0D, 0.0D);			Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)scrollBarX, dTop, 0.0D, 0.0D, 0.0D);			Modchu_AS.set(Modchu_AS.tessellatorDraw, tessellator);			Modchu_AS.set(Modchu_AS.tessellatorStartDrawingQuads, tessellator);			Modchu_AS.set(Modchu_AS.tessellatorSetColorRGBA_I, tessellator, 12632256, 255);			Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)scrollBarX, dTop + (scrollBarInBoxSizeY - 1), 0.0D, 0.0D, 1.0D);			Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)(scrollBarSizeX - 1), dTop + (scrollBarInBoxSizeY - 1), 0.0D, 1.0D, 1.0D);			Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)(scrollBarSizeX - 1), dTop, 0.0D, 1.0D, 0.0D);			Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)scrollBarX, dTop, 0.0D, 0.0D, 0.0D);			Modchu_AS.set(Modchu_AS.tessellatorDraw, tessellator);		}		GL11.glEnable(GL11.GL_TEXTURE_2D);		//GL11.glShadeModel(GL11.GL_FLAT);		//GL11.glEnable(GL11.GL_ALPHA_TEST);		//GL11.glDisable(GL11.GL_BLEND);		//GL11.glDisable(32826 /*GL_RESCALE_NORMAL_EXT*/);	}	public void drawSlot(int i, int j, int k, int l, Object tessellator) {		drawSlot(i, j, k, l, 0, tessellator);	}	public void drawSlot(int i, int posX, int slotPosY, int k, int l, Object tessellator) {		base.guiSlotDrawSlot(guiNumber, i, posX, slotPosY, k, l, tessellator);	}	@Override	public int getScrollBarX() {		return base.getSlotScrollBarX(guiNumber);	}	public int getScrollBarSizeX() {		return base.getSlotScrollBarSizeX(guiNumber);	}	public int getTop() {		return base.getTop(guiNumber);	}	public int getBottom() {		return base.getBottom(guiNumber);	}	public int getLimitSelectedDisplayCount() {		return base.getLimitSelectedDisplayCount(guiNumber);	}	@Override	public void bindAmountScrolled() {		int var1 = func_77209_d();		//if (amountScrolled < 0.0F) amountScrolled = 0.0F;		if (var1 > 0				&& amountScrolled > var1) {			//Modchu_Debug.mDebug("bindAmountScrolled() amountScrolled > (float)var1 var1="+var1);			amountScrolled = var1;		}	}	public int func_77209_d() {		//最大スクロール位置		int i = getSize() - selectedDisplayCount;		//if (guiNumber == 0) {			//Modchu_Debug.mDebug("func_77209_d() i="+i);			//Modchu_Debug.mDebug("func_77209_d() selectedDisplayCount="+selectedDisplayCount+" getSize()="+getSize());		//}		if (i < 1) return getSize();		return i;	}	@Override	public void registerScrollButtons(int par2, int par3) {		scrollUpButtonID = par2;		scrollDownButtonID = par3;	}	public void actionPerformed(int i) {	}	@Override	public void overlayBackground(int par1, int par2, int par3, int par4) {		Object tessellator = Modchu_AS.get(Modchu_AS.tessellatorInstance);		Modchu_AS.set(Modchu_AS.textureManagerBindTexture, Modchu_AS.get(Modchu_AS.guiOptionsBackground));		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);		int width = Modchu_AS.getInt(Modchu_AS.guiScreenWidth, base);		float var6 = 32.0F;		int version = Modchu_Main.getMinecraftVersion();		if (version > 180) {			Modchu_AS.set(Modchu_AS.tessellatorStartDrawingQuads, tessellator, 7, Modchu_AS.get("DefaultVertexFormats", version > 188 ? "POSITION_TEX_COLOR" : "field_181709_i"));		} else {			Modchu_AS.set(Modchu_AS.tessellatorStartDrawingQuads, tessellator);		}		Modchu_AS.set(Modchu_AS.tessellatorSetColorRGBA_I, tessellator, 4210752, par4);		Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, 0.0D, (double)par2, 0.0D, 0.0D, (double)(par2 / var6));		Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)width, (double)par2, 0.0D, (double)(width / var6), (double)(par2 / var6));		Modchu_AS.set(Modchu_AS.tessellatorSetColorRGBA_I, tessellator, 4210752, par3);		Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)width, (double)par1, 0.0D, (double)(width / var6), (double)(par1 / var6));		Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, 0.0D, (double)par1, 0.0D, 0.0D, (double)(par1 / var6));		Modchu_AS.set(Modchu_AS.tessellatorDraw, tessellator);	}}