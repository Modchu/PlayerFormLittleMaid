package modchu.pflm;import java.util.HashMap;import modchu.lib.Modchu_AS;import modchu.lib.Modchu_CastHelper;import modchu.lib.Modchu_GuiSlotMasterBasis;import modchu.lib.Modchu_IGuiModelView;import modchu.lib.Modchu_Main;public class PFLM_GuiOthersPlayerSlotMaster extends Modchu_GuiSlotMasterBasis {	private Modchu_IGuiModelView modchu_IGuiModelView;	private PFLM_GuiModelViewMaster pflm_GuiModelViewMaster;	private int selected;	private int mouseX;	private int mouseY;	public PFLM_GuiOthersPlayerSlotMaster(HashMap<String, Object> map) {		super(map);		init(map);	}	public void init(HashMap<String, Object> map) {		selected = 0;		modchu_IGuiModelView = (Modchu_IGuiModelView) Modchu_Main.newModchuCharacteristicObject("Modchu_GuiModelView", PFLM_GuiModelViewMaster.class, map.get("Object"), map.get("Object1"));		pflm_GuiModelViewMaster = (PFLM_GuiModelViewMaster) Modchu_Main.getModchuCharacteristicObjectMaster(modchu_IGuiModelView);		pflm_GuiModelViewMaster.showArmor = false;	}/*	public void selected(String textureName, String textureArmorName, int color, boolean armorMode) {		super.selected(textureName, textureArmorName, color, armorMode);		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		modelData.setCapsValue(modelData.caps_freeVariable, "showMainModel", true);	}*/	@Override	public int getSize() {		return PFLM_GuiOthersPlayerIndividualCustomizeSelectMaster.playerList.size();	}	@Override	public int getContentHeight() {		return getSize() * 36;	}	@Override	public void elementClicked(int i, boolean flag, int mouseX, int mouseY) {		//flag = true 左ダブルクリック		selected = i;		String s = PFLM_GuiOthersPlayerIndividualCustomizeSelectMaster.playerList.get(i);		if (flag) openGuiCustomize();	}	@Override	public void elementClicked(int i, boolean flag) {		elementClicked(i, flag, mouseX, mouseY);	}	public void openGuiCustomize() {		if (PFLM_GuiOthersPlayerIndividualCustomizeSelectMaster.playerList.size() < 1) return;		String s = PFLM_GuiOthersPlayerIndividualCustomizeSelectMaster.playerList.get(selected);		Modchu_IGuiModelView gui = (Modchu_IGuiModelView) Modchu_Main.newModchuCharacteristicObject("Modchu_GuiModelView", PFLM_GuiOthersPlayerIndividualCustomizeMaster.class, pflm_GuiModelViewMaster.popWorld, pflm_GuiModelViewMaster.parentScreen, s);		Modchu_AS.set(Modchu_AS.minecraftDisplayGuiScreen, gui);		gui.setChangeMode(PFLM_GuiConstant.modeOffline);		String t[] = (String[]) PFLM_Main.playerLocalData.get(s);		if (t != null) {			gui.setTextureName(t[0]);			gui.setTextureArmorName(t[1]);			gui.setColor(Modchu_CastHelper.Int(t[2]));			gui.setScale(Modchu_CastHelper.Float(t[3]));			gui.setChangeMode(Modchu_CastHelper.Int(t[4]));		} else {			gui.setTextureName(null);			gui.setTextureArmorName(null);		}		gui.initGui();		pflm_GuiModelViewMaster.reLoadModel(pflm_GuiModelViewMaster.drawEntity, false);	}	@Override	public boolean isSelected(int i) {		if (PFLM_GuiOthersPlayerIndividualCustomizeSelectMaster.playerList.size() > i && i == selected) {			return true;		}		return false;	}	@Override	public void drawBackground() {	}	@Override	public void drawScreen(int i, int j, float f) {		super.drawScreen(i, j, f);		mouseX = i;		mouseY = j;	}	@Override	public void drawSlot(int i, int j, int k, int l, int m, int n) {		Object tessellator = Modchu_AS.get(Modchu_AS.tessellatorInstance);		if (PFLM_GuiOthersPlayerIndividualCustomizeSelectMaster.playerList.size() <= i) {			//Modchu_Debug.mDebug("drawSlot playerList.size() <= i return.");			return;		}		String s = PFLM_GuiOthersPlayerIndividualCustomizeSelectMaster.playerList.get(i);		pflm_GuiModelViewMaster.drawString(pflm_GuiModelViewMaster.parentScreen, s, j + 70, k + 8, 0xffffff);		boolean setting = PFLM_Main.playerLocalData.get(s) != null;		String s0 = setting ? "Setting" : "Non Settings";		pflm_GuiModelViewMaster.drawString(pflm_GuiModelViewMaster.parentScreen, s0, j + 70, k + 17, 0xffffff);		int width = Modchu_AS.getInt(Modchu_AS.guiScreenWidth, pflm_GuiModelViewMaster.parentScreen);		int height = Modchu_AS.getInt(Modchu_AS.guiScreenHeight, pflm_GuiModelViewMaster.parentScreen);		if (setting) {			String t[] = (String[]) PFLM_Main.playerLocalData.get(s);			boolean flag = false;			if (t[4] != null) {				if (Modchu_CastHelper.Int(t[4]) == PFLM_GuiConstant.modeOffline) {					setTextureName(t[0]);					setTextureArmorName(t[1]);					setColor(Modchu_CastHelper.Int(t[2]));					pflm_GuiModelViewMaster.setTextureValue();					setScale(Modchu_CastHelper.Float(t[3]));					pflm_GuiModelViewMaster.drawEntitySetFlag = true;					pflm_GuiModelViewMaster.textureResetFlag = true;					pflm_GuiModelViewMaster.resetFlagCheck(false);					float f5 = -((float) (width / 2) - i) + ((float) (j + 30) - i);					float f6 = -((float) (height / 2) - j) + ((float) ((k + 30) - 10) - j);					pflm_GuiModelViewMaster.drawMobModel(pflm_GuiModelViewMaster.parentScreen, mouseX, mouseY, j + 30, k + 30, (int) f5, (int) f6, 15F, 15F, true);					flag = true;				}			}			if (!flag) {				String s1 = PFLM_GuiOthersPlayerIndividualCustomizeMaster.getChangeModeString(Modchu_CastHelper.Int(t[4]));				pflm_GuiModelViewMaster.drawString(pflm_GuiModelViewMaster.parentScreen, s1.toString(), j + 10, k + 17, 0xffffff);			}		}	}	@Override	public void drawSlot(int p_148126_1_, int p_148126_2_, int p_148126_3_, int p_148126_4_, Object tessellator, int p_148126_6_, int p_148126_7_) {		drawSlot(p_148126_1_, p_148126_2_, p_148126_3_, p_148126_4_, p_148126_7_, 0);	}	@Override	public void drawSlot(int i, int j, int k, int l, Object tessellator) {		drawSlot(i, j, k, l, tessellator, 0, 0);	}	public void setTextureArmorPackege() {		//modelData.setCapsValue(modelData.caps_textureArmorName, modelData.getCapsValue(modelData.caps_textureName));		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(pflm_GuiModelViewMaster.drawEntity);		String s = PFLM_Main.getArmorName((String) modelData.getCapsValue(modelData.caps_textureArmorName), 2);		modelData.setCapsValue(modelData.caps_textureArmorName, s);	}	public void deletePlayerLocalData() {		if (PFLM_GuiOthersPlayerIndividualCustomizeSelectMaster.playerList.size() < 1) return;		PFLM_Main.playerLocalData.remove(PFLM_GuiOthersPlayerIndividualCustomizeSelectMaster.playerList.get(selected));	}	public String getTextureName() {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(pflm_GuiModelViewMaster.drawEntity);		return (String) modelData.getCapsValue(modelData.caps_textureName);	}	public void setTextureName(String s) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(pflm_GuiModelViewMaster.drawEntity);		modelData.setCapsValue(modelData.caps_textureName, s);	}	public String getTextureArmorName() {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(pflm_GuiModelViewMaster.drawEntity);		return (String) modelData.getCapsValue(modelData.caps_textureArmorName);	}	public void setTextureArmorName(String s) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(pflm_GuiModelViewMaster.drawEntity);		modelData.setCapsValue(modelData.caps_textureArmorName, s);	}	public int getColor() {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(pflm_GuiModelViewMaster.drawEntity);		return modelData.getCapsValueInt(modelData.caps_maidColor);	}	public void setColor(int i) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(pflm_GuiModelViewMaster.drawEntity);		modelData.setCapsValue(modelData.caps_maidColor, i);	}	public float getScale() {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(pflm_GuiModelViewMaster.drawEntity);		return modelData.getCapsValueFloat(modelData.caps_modelScale);	}	public void setScale(float f) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(pflm_GuiModelViewMaster.drawEntity);		modelData.setCapsValue(modelData.caps_modelScale, f);	}	public void modelChange() {		pflm_GuiModelViewMaster.drawEntitySetFlag = true;	}/*	@Override	public void actionPerformed(Object guiButton) {		super.actionPerformed(guiButton);	}*/}