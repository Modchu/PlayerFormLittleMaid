package modchu.pflm;import java.lang.reflect.Method;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_IRendererLivingEntity;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.Modchu_RenderEngine;import modchu.lib.Modchu_RendererLivingEntityMasterBasis;import modchu.lib.characteristic.Modchu_AS;import modchu.lib.characteristic.Modchu_CastHelper;import modchu.lib.characteristic.Modchu_EntityPlayerDummy;import modchu.lib.characteristic.Modchu_ModelBaseDuoBase;import modchu.lib.characteristic.Modchu_ModelBaseNihilBase;import modchu.model.ModchuModel_Client;import modchu.model.ModchuModel_ConfigData;import modchu.model.ModchuModel_Main;import modchu.model.multimodel.base.MultiModelBaseBiped;import org.lwjgl.opengl.GL11;import org.lwjgl.opengl.GL12;public class PFLM_RenderMasterBase extends Modchu_RendererLivingEntityMasterBasis {	public boolean checkGlEnableWrapper = true;	public boolean checkGlDisableWrapper = true;	public boolean shadersHurtFlashFlag = false;	public final boolean slimFlag;	public PFLM_RenderMasterBase(Modchu_IRendererLivingEntity modchu_IRenderLivingBase, Object[] o) {		super(modchu_IRenderLivingBase, o);		Modchu_Debug.lDebug("PFLM_RenderMasterBase init base="+base);		slimFlag = o != null				&& o.length > 0 ? Modchu_CastHelper.Boolean(o[0]) : false;		Modchu_Debug.lDebug("PFLM_RenderMasterBase init slimFlag="+slimFlag);		if (Modchu_Main.getMinecraftVersion() > 179) {			Object layerArmorBase = Modchu_Reflect.newInstance("modchu.lib.characteristic.Modchu_LayerArmorBase", new Class[]{ Class.class, Object.class }, new Object[]{ PFLM_LayerArmorBaseMaster.class, base });			Modchu_Debug.lDebug("PFLM_RenderMasterBase init layerBipedArmor="+layerArmorBase);			if (layerArmorBase != null) base.setLayerArmorBase(layerArmorBase);			Object layerHeldItem = Modchu_Reflect.newInstance("modchu.lib.characteristic.Modchu_LayerHeldItem", new Class[]{ Class.class, Object.class }, new Object[]{ PFLM_LayerHeldItemMaster.class, base });			Modchu_Debug.lDebug("PFLM_RenderMasterBase init layerHeldItem="+layerHeldItem);			if (layerHeldItem != null) base.setLayerHeldItem(layerHeldItem);			Object layerCustomHead = Modchu_Reflect.newInstance("modchu.lib.characteristic.Modchu_LayerCustomHead", new Class[]{ Class.class, Object.class }, new Object[]{ PFLM_LayerCustomHeadMaster.class, null });			Modchu_Debug.lDebug("PFLM_RenderMasterBase init layerCustomHead="+layerCustomHead);			if (layerHeldItem != null) base.setLayerCustomHead(layerCustomHead);/*			List list = base.getLayerList();			if (list != null					&& !list.isEmpty()) {				Class LayerCustomHead = Modchu_Reflect.loadClass("net.minecraft.client.renderer.entity.layers.LayerCustomHead");				for (Object o : list) {					if (LayerCustomHead.isInstance(o)) {						list.remove(o);					}				}			}*/		}	}	@Override	public int setArmorModel(Object entity, int i, float f) {		return setArmorModel(null, entity, i, f, 0);	}	@Override	public int setArmorModel(Object model, Object entity, int i, float f, int i2) {		//Modchu_Debug.mDebug("setArmorModel 0 i="+i);		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);		byte byte0 = -1;		//Modchu_Debug.mDebug("setArmorModel showArmor="+modelData.getCapsValueBoolean(modelData.caps_freeVariable, "showArmor"));		if (modelData != null				&& modelData.getCapsValueBoolean(modelData.caps_freeVariable, "showArmor")); else return byte0;		// アーマーの表示設定		if (model != null); else modelData.modelFATT.renderParts = i;		//Modchu_Debug.mDebug("setArmorModel i="+i);		if (i == 3) {			int version = Modchu_Main.getMinecraftVersion();			if ((version > 129					&& !ModchuModel_ConfigData.useInvisibilityArmor)					| (version > 129							&& ModchuModel_ConfigData.useInvisibilityArmor							&& !Modchu_AS.getBoolean(Modchu_AS.entityIsInvisible))							| version < 130) {				modelData.modelFATT.setArmorRendering(true);			} else modelData.modelFATT.setArmorRendering(false);		}		//Modchu_Debug.mDebug("setArmorModel 0 modelInner="+(modelData.modelFATT.modelInner));		//Modchu_Debug.mDebug("setArmorModel 0 modelOuter="+(modelData.modelFATT.modelOuter));		if (modelData.modelFATT.modelInner != null) modelData.modelFATT.modelInner.showAllParts(modelData);		if (modelData.modelFATT.modelOuter != null) modelData.modelFATT.modelOuter.showAllParts(modelData);		//Modchu_Debug.mDebug("setArmorModel 1 i="+i);		Object itemstack = getArmorItemStack(entity, i);		//Modchu_Debug.mDebug("setArmorModel itemstack="+itemstack);		//if (itemstack != null) Modchu_Debug.mDebug("setArmorModel itemStackStackSize="+(Modchu_AS.getInt(Modchu_AS.itemStackStackSize, itemstack)));		if (itemstack != null				&& Modchu_AS.getInt(Modchu_AS.itemStackStackSize, itemstack) > 0); else {			//Modchu_Debug.mDebug("setArmorModel return byte0="+byte0);			return byte0;		}		//Modchu_Debug.mDebug("setArmorModel 2 i="+i);		Object item = Modchu_AS.get(Modchu_AS.itemStackGetItem, itemstack);		if (item != null				&& Modchu_Reflect.loadClass("ItemArmor").isInstance(item)); else return byte0;		if (model != null) {			((MultiModelBaseBiped) model).showArmorParts(modelData, i, i2);		} else {			if (modelData.modelFATT.modelInner != null) modelData.modelFATT.modelInner.showArmorParts(modelData, i, 0);			if (modelData.modelFATT.modelOuter != null) modelData.modelFATT.modelOuter.showArmorParts(modelData, i, 1);		}/*		int ti = 0;		Modchu_Debug.mDebug1(""+ti+" setArmorModel modelInner.bipedBody.showModel="+modelData.modelFATT.modelInner.bipedBody.showModel);		Modchu_Debug.mDebug1(""+ti+" setArmorModel modelInner.bipedHead.showModel="+modelData.modelFATT.modelInner.bipedHead.showModel);		Modchu_Debug.mDebug1(""+ti+" setArmorModel modelInner.bipedLeftLeg.showModel="+modelData.modelFATT.modelInner.bipedLeftLeg.showModel);		Modchu_Debug.mDebug1(""+ti+" setArmorModel modelInner.bipedRightLeg.showModel="+modelData.modelFATT.modelInner.bipedRightLeg.showModel);		Modchu_Debug.mDebug1(""+ti+" setArmorModel modelOuter.bipedBody.showModel="+modelData.modelFATT.modelOuter.bipedBody.showModel);		Modchu_Debug.mDebug1(""+ti+" setArmorModel modelOuter.bipedHead.showModel="+modelData.modelFATT.modelOuter.bipedHead.showModel);		Modchu_Debug.mDebug1(""+ti+" setArmorModel modelOuter.bipedLeftLeg.showModel="+modelData.modelFATT.modelOuter.bipedLeftLeg.showModel);		Modchu_Debug.mDebug1(""+ti+" setArmorModel modelOuter.bipedRightLeg.showModel="+modelData.modelFATT.modelOuter.bipedRightLeg.showModel);		modelData.modelFATT.modelInner.bipedBody.showModel = true;		modelData.modelFATT.modelInner.bipedHead.showModel = true;		modelData.modelFATT.modelInner.bipedLeftLeg.showModel = true;		modelData.modelFATT.modelInner.bipedRightLeg.showModel = true;		modelData.modelFATT.modelInner.bipedLeftArm.showModel = true;		modelData.modelFATT.modelInner.bipedRightArm.showModel = true;		modelData.modelFATT.modelOuter.bipedBody.showModel = true;		modelData.modelFATT.modelOuter.bipedHead.showModel = true;		modelData.modelFATT.modelOuter.bipedLeftArm.showModel = true;		modelData.modelFATT.modelOuter.bipedRightArm.showModel = true;*/		armorTextureSetting(entity, modelData, itemstack, i);		boolean isItemEnchanted = Modchu_AS.getBoolean(Modchu_AS.itemStackIsItemEnchanted, itemstack);		int j = Modchu_AS.getInt(Modchu_AS.itemArmorGetColor, Modchu_AS.get(Modchu_AS.itemStackGetItem, itemstack), itemstack);		if (j != -1) {			//Modchu_Debug.mDebug("setArmorModel j != -1");			Object o = modelData.getCapsValue(modelData.caps_freeVariable, "itemArmorColor"+i);			boolean flag = true;			if (o != null) {				int i3 = Modchu_CastHelper.Int(o);				if (j != i3) flag = false;			} else {				modelData.setCapsValue(modelData.caps_freeVariable, "itemArmorColor"+i, j);				flag = false;			}			if (flag) {				o = modelData.getCapsValue(modelData.caps_freeVariable, "itemArmorColorFloat"+i);				float[] f0 = Modchu_AS.getFloatArray(Modchu_AS.convertGlColor, j);				//Modchu_Debug.mDebug("f0="+f0[0]+" 1="+f0[1]+" 2="+f0[2]);				modelData.setCapsValue(modelData.caps_freeVariable, "itemArmorColorFloat"+i, f0);			}			if (isItemEnchanted) return 31;			return 16;		} else {			modelData.setCapsValue(modelData.caps_freeVariable, "itemArmorColor"+i, null);			modelData.setCapsValue(modelData.caps_freeVariable, "itemArmorColorFloat"+i, null);		}//-@-b181		byte0 = (byte) (isItemEnchanted ? 15 : 1);//@-@b181		return byte0;	}	public Object getArmorItemStack(Object entity, int i) {		return Modchu_AS.get(Modchu_AS.entityLivingGetCurrentArmor, entity, i);	}	protected void armorTextureSetting(Object entity, PFLM_ModelData modelData, Object itemStack, int i) {		int i2 = i;		String t = Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureArmorName));		//Modchu_Debug.mDebug("PFLM_RenderMasterBase armorTextureSetting t="+t);		boolean isBiped = PFLM_Main.bipedCheck(modelData.modelMain.model);		if (t != null); else t = isBiped ? "Biped" : "default";		if (t.equals("NULL")) {			if (modelData.modelFATT != null) {				if (modelData.modelFATT.textureInner != null) modelData.modelFATT.textureInner[i] = null;				if (modelData.modelFATT.textureOuter != null) modelData.modelFATT.textureOuter[i] = null;			}			return;		}		if (isBiped) {			Object t1 = Modchu_AS.get(Modchu_AS.getBipedArmor, entity, itemStack, 1, i, null);			Object t2 = Modchu_AS.get(Modchu_AS.getBipedArmor, entity, itemStack, 2, i, null);			//Modchu_Debug.mDebug("setArmorModel isBiped t1="+t1);			//Modchu_Debug.mDebug("setArmorModel isBiped t2="+t2);			int version = Modchu_Main.getMinecraftVersion();			if (Modchu_Main.isForge					&& version > 129) {				if (i == 1) {					if (modelData.modelFATT.textureInner != null) modelData.modelFATT.textureInner[i] = t2;				}				if (modelData.modelFATT.textureOuter != null) modelData.modelFATT.textureOuter[i] = t1;			} else {				if (version > 159) {					if (modelData.modelFATT.textureInner != null) modelData.modelFATT.textureInner[i] = t2;					if (modelData.modelFATT.textureOuter != null) modelData.modelFATT.textureOuter[i] = t1;				} else {					Object t5 = ModchuModel_Main.textureManagerGetArmorTexture(t, 64, itemStack);					Object t6 = ModchuModel_Main.textureManagerGetArmorTexture(t, 80, itemStack);					if (modelData.modelFATT.textureInner != null) modelData.modelFATT.textureInner[i] = t5 != null ? t5 : t2;					if (modelData.modelFATT.textureOuter != null) modelData.modelFATT.textureOuter[i] = t6 != null ? t6 : t1;				}			}		} else {			if (modelData.modelFATT.textureInner != null) {				Object o = ModchuModel_Main.textureManagerGetArmorTexture(t, 64, itemStack);				if (modelData.modelFATT.textureInner[i] != o) {					modelData.modelFATT.textureInner[i] = o;				}			}			if (modelData.modelFATT.textureOuter != null) {				Object o = ModchuModel_Main.textureManagerGetArmorTexture(t, 80, itemStack);				if (modelData.modelFATT.textureOuter[i] != o) {					modelData.modelFATT.textureOuter[i] = o;				}			}		}		//Modchu_Debug.mDebug1("setArmorModel modelData.modelFATT.modelInner="+modelData.modelFATT.modelInner);		//Modchu_Debug.mDebug1("setArmorModel modelData.modelFATT.modelOuter="+modelData.modelFATT.modelOuter);		//Modchu_Debug.mDebug1("setArmorModel modelData.modelFATT.textureInner["+i+"]="+modelData.modelFATT.textureInner[i]);		//Modchu_Debug.mDebug1("setArmorModel modelData.modelFATT.textureOuter["+i+"]="+modelData.modelFATT.textureOuter[i]);	}	@Override	public int shouldRenderPass(Object entityliving, int i, float f) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entityliving);		Modchu_EntityPlayerDummy entity = ((Modchu_EntityPlayerDummy) entityliving);		Modchu_Reflect.setFieldObject(Modchu_ModelBaseNihilBase.class, "isRendering", modelData.modelFATT, true);		if (Modchu_Main.getMinecraftVersion() > 179) {			//setRenderPassModel(modelData.modelFATT.modelInner, modelData.modelFATT.modelOuter);		} else {			setRenderPassModel(modelData.modelFATT);		}		//Modchu_Debug.mDebug("PFLM_RenderPlayerDummyMaster shouldRenderPass entity.showArmor="+modelData.getCapsValue(modelData.caps_freeVariable, "showArmor"));		return modelData.getCapsValueBoolean(modelData.caps_freeVariable, "showArmor") ? 1 : -1;	}	@Override	public void preRenderCallback(Object entity, float par2) {		renderScale(entity, par2);	}	@Override	public void renderScale(Object entity, float f) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);		float f1 = modelData.getCapsValueFloat(modelData.caps_modelScale);		//Modchu_Debug.mDebug("preRenderCallback f1="+f1);		if (f1 == 0.0F) {			f1 = modelData.modelMain.model instanceof MultiModelBaseBiped ? modelData.modelMain.model.getModelScale(modelData) : 0.9375F;		}		GL11.glScalef(f1, f1, f1);		return;	}	public void oldDoRenderLivingPFLM(PFLM_ModelData modelData, Object entity, double d, double d1, double d2, float f, float f1) {		GL11.glEnable(GL11.GL_COLOR_MATERIAL);		GL11.glPushMatrix();		Modchu_AS.set(Modchu_AS.renderHelperEnableStandardItemLighting);		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);		if (PFLM_Main.isShaders				&& !shadersHurtFlashFlag) {			//Shaders.glDisableWrapper(k1);			shadersGlDisableWrapper(GL11.GL_CULL_FACE);		} else {			GL11.glDisable(GL11.GL_CULL_FACE);		}		int version = Modchu_Main.getMinecraftVersion();		try {			float f2;			float f3;			float f4;			float prevRenderYawOffset = Modchu_AS.getFloat(Modchu_AS.entityLivingBasePrevRenderYawOffset, entity);			float renderYawOffset = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseRenderYawOffset, entity);			float prevRotationYawHead = Modchu_AS.getFloat(Modchu_AS.entityLivingBasePrevRotationYawHead, entity);			float rotationYawHead = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseRotationYawHead, entity);			float prevLimbSwingAmount = Modchu_AS.getFloat(Modchu_AS.entityLivingBasePrevLimbSwingAmount, entity);			float limbSwingAmount = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseLimbSwingAmount, entity);			float limbSwing = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseLimbSwing, entity);			float prevRotationYaw = Modchu_AS.getFloat(Modchu_AS.entityPrevRotationYaw, entity);			float rotationYaw = Modchu_AS.getFloat(Modchu_AS.entityRotationYaw, entity);			float prevRotationPitch = Modchu_AS.getFloat(Modchu_AS.entityPrevRotationPitch, entity);			float rotationPitch = Modchu_AS.getFloat(Modchu_AS.entityRotationPitch, entity);			if (version < 140) {				f2 = prevRenderYawOffset + (renderYawOffset - prevRenderYawOffset) * f1;				f3 = prevRotationYaw + (rotationYaw - prevRotationYaw) * f1;				f4 = prevRotationPitch + (rotationPitch - prevRotationPitch) * f1;			} else {				f2 = interpolateRotation(prevRenderYawOffset, renderYawOffset, f1);				f3 = interpolateRotation(prevRotationYawHead, rotationYawHead, f1);				f4 = prevRotationPitch + (rotationPitch - prevRotationPitch) * f1;			}			renderLivingAt(entity, d, d1, d2);			float f5 = handleRotationFloat(entity, f1);			rotateCorpse(entity, f5, f2, f1);			float f6 = 0.0625F;			if (PFLM_Main.isShaders					&& !shadersHurtFlashFlag) {				//Shaders.glEnableWrapper(GL12.GL_RESCALE_NORMAL);				shadersGlEnableWrapper(GL12.GL_RESCALE_NORMAL);			} else {				GL11.glEnable(GL12.GL_RESCALE_NORMAL);			}			GL11.glScalef(-1F, -1F, 1.0F);			preRenderCallback(entity, f1);			GL11.glTranslatef(0.0F, -24F * f6 - 0.0078125F, 0.0F);			float f7 = prevLimbSwingAmount + (limbSwingAmount - prevLimbSwingAmount) * f1;			float f8 = limbSwing - limbSwingAmount * (1.0F - f1);			if (version > 89					&& Modchu_AS.getBoolean(Modchu_AS.entityLivingBaseIsChild, entity)) {				f8 *= 3F;			}			if (f7 > 1.0F) {				f7 = 1.0F;			}			if (PFLM_Main.isShaders					&& !shadersHurtFlashFlag) {				//Shaders.glEnableWrapper(GL11.GL_ALPHA_TEST);				shadersGlEnableWrapper(GL11.GL_ALPHA_TEST);			} else {				GL11.glEnable(GL11.GL_ALPHA_TEST);			}			if (ModchuModel_ConfigData.AlphaBlend) {				if (PFLM_Main.isShaders						&& !shadersHurtFlashFlag) {					//Shaders.glEnableWrapper(GL11.GL_BLEND);					shadersGlEnableWrapper(GL11.GL_BLEND);				} else {					GL11.glEnable(GL11.GL_BLEND);				}				GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);			} else {				if (PFLM_Main.isShaders						&& !shadersHurtFlashFlag) {					//Shaders.glDisableWrapper(k1);					shadersGlDisableWrapper(GL11.GL_BLEND);				} else {					GL11.glDisable(GL11.GL_BLEND);				}			}			//modelData.modelMain.setEntityCaps(modelData);			modelData.setCapsValue(modelData.caps_Entity, entity);			Modchu_AS.set(Modchu_AS.modelBaseSetLivingAnimations, modelData.modelMain, entity, f8, f7, f1);			renderModel(entity, f8, f7, f5, f3 - f2, f4, f6);			float f9 = 1.0F;			if (version < 80) {				//if (currentScreen == null | currentScreen instanceof GuiIngameMenu)				f9 = (Float) Modchu_Reflect.invokeMethod("Entity", "func_382_a", "getEntityBrightness", new Class[]{ float.class }, entity, new Object[]{ f1 });			}			Object renderPassModel = getRenderPassModel();			for (int i = 0; i < 4; i++) {				int j = setArmorModel(entity, i, f);				if (j <= 0) {					continue;				}				for (int l = 0; l < 5; l += 4) {					if (shouldRenderPass(entity, i + l, f1) < 0) {						continue;					}					float f10 = 1.0F;					if (ModchuModel_ConfigData.AlphaBlend) {						if (PFLM_Main.isShaders								&& !shadersHurtFlashFlag) {							//Shaders.glEnableWrapper(GL11.GL_BLEND);							shadersGlEnableWrapper(GL11.GL_BLEND);						} else {							GL11.glEnable(GL11.GL_BLEND);						}						GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);					}					f10 = ModchuModel_ConfigData.transparency;					GL11.glColor4f(f9, f9, f9, f10);					//modelData.modelMain.setEntityCaps(modelData);					Modchu_AS.set(Modchu_AS.modelBaseSetLivingAnimations, renderPassModel, entity, f8, f7, f1);					//renderPassModel.setLivingAnimations(entity, f8, f7, f1);					Modchu_AS.set(Modchu_AS.setArmorRendering, renderPassModel, true);					if ((version > 129							&& !ModchuModel_ConfigData.useInvisibilityArmor)							| (ModchuModel_ConfigData.useInvisibilityArmor									&& !Modchu_AS.getBoolean(Modchu_AS.entityIsInvisible, entity))									| version < 130) {						Modchu_AS.set(Modchu_AS.modelBaseRender, renderPassModel, entity, f8, f7, f5, f3 - f2, f4, f6);					}					if (ModchuModel_ConfigData.transparency != 1.0F) GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);					if (version < 90							| j != 15) {						continue;					}					float f11 = Modchu_AS.getFloat(Modchu_AS.entityTicksExisted, entity) + f1;					Modchu_AS.set(Modchu_AS.renderBindTexture, base, version > 159 ? Modchu_AS.get(Modchu_AS.rendererLivingEntityRES_ITEM_GLINT, base) :						"%blur%/misc/glint.png");					if (PFLM_Main.isShaders							&& !shadersHurtFlashFlag) {						//Shaders.glEnableWrapper(GL11.GL_BLEND);						shadersGlEnableWrapper(GL11.GL_BLEND);					} else {						GL11.glEnable(GL11.GL_BLEND);					}					float f13 = 0.5F;					GL11.glColor4f(f13, f13, f13, 1.0F);					GL11.glDepthFunc(GL11.GL_EQUAL);					GL11.glDepthMask(false);					for (int j1 = 0; j1 < 2; j1++) {						if (PFLM_Main.isShaders								&& !shadersHurtFlashFlag) {							//Shaders.glDisableWrapper(GL11.GL_LIGHTING);							shadersGlDisableWrapper(GL11.GL_LIGHTING);						} else {							GL11.glDisable(GL11.GL_LIGHTING);						}						float f16 = 0.76F;						GL11.glColor4f(0.5F * f16, 0.25F * f16, 0.8F * f16, 1.0F);						GL11.glBlendFunc(GL11.GL_SRC_COLOR, GL11.GL_ONE);						GL11.glMatrixMode(GL11.GL_TEXTURE);						GL11.glLoadIdentity();						float f17 = f11 * (0.001F + j1 * 0.003F) * 20F;						float f18 = 0.3333333F;						GL11.glScalef(f18, f18, f18);						GL11.glRotatef(30F - j1 * 60F, 0.0F, 0.0F, 1.0F);						GL11.glTranslatef(0.0F, f17, 0.0F);						GL11.glMatrixMode(GL11.GL_MODELVIEW);						if ((version > 129								&& !ModchuModel_ConfigData.useInvisibilityArmor)								| (version > 129										&& ModchuModel_ConfigData.useInvisibilityArmor										&& !Modchu_AS.getBoolean(Modchu_AS.entityIsInvisible, entity))										| version < 130) {							Modchu_AS.set(Modchu_AS.modelBaseRender, renderPassModel, entity, f8, f7, f5, f3 - f2, f4, f6);						}					}					GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);					GL11.glMatrixMode(GL11.GL_TEXTURE);					GL11.glDepthMask(true);					GL11.glLoadIdentity();					GL11.glMatrixMode(GL11.GL_MODELVIEW);					if (PFLM_Main.isShaders							&& !shadersHurtFlashFlag) {						//Shaders.glEnableWrapper(GL11.GL_LIGHTING);						shadersGlEnableWrapper(GL11.GL_LIGHTING);					} else {						GL11.glEnable(GL11.GL_LIGHTING);					}					if (ModchuModel_ConfigData.AlphaBlend) {						if (PFLM_Main.isShaders								&& !shadersHurtFlashFlag) {							//Shaders.glEnableWrapper(GL11.GL_BLEND);							shadersGlEnableWrapper(GL11.GL_BLEND);						} else {							GL11.glEnable(GL11.GL_BLEND);						}						GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);					} else {						if (PFLM_Main.isShaders								&& !shadersHurtFlashFlag) {							//Shaders.glDisableWrapper(GL11.GL_BLEND);							shadersGlDisableWrapper(GL11.GL_BLEND);						} else {							GL11.glDisable(GL11.GL_BLEND);						}					}					GL11.glDepthFunc(GL11.GL_LEQUAL);				}				GL11.glEnable(GL11.GL_ALPHA_TEST);			}			if (PFLM_Main.isShaders					&& !shadersHurtFlashFlag) {				//Shaders.glDisableWrapper(GL11.GL_BLEND);				shadersGlDisableWrapper(GL11.GL_BLEND);				//Shaders.glEnableWrapper(GL11.GL_ALPHA_TEST);				shadersGlEnableWrapper(GL11.GL_ALPHA_TEST);			} else {				GL11.glDisable(GL11.GL_BLEND);				GL11.glEnable(GL11.GL_ALPHA_TEST);			}			if (version < 80) GL11.glColor4f(f9, f9, f9, 1.0F);			//modelData.modelMain.setEntityCaps(modelData);/*			if (version > 129					&& entity.isInvisible()					| version < 130) {*/			Modchu_AS.set(Modchu_AS.modelBaseSetRotationAngles, modelData.modelMain, f8, f7, f5, f3 - f2, f4, f6, entity);			Modchu_AS.set(Modchu_AS.modelBaseSetRotationAngles, modelData.modelFATT, f8, f7, f5, f3 - f2, f4, f6, entity);/*			}*/			if (PFLM_Main.isShaders					&& shadersHurtFlashFlag					&& (Boolean) Modchu_Reflect.getFieldObject("Shaders", "useEntityHurtFlash")) {				Modchu_Reflect.invokeMethod("Shaders", "setEntityHurtFlash", new Class[]{ int.class, int.class }, new Object[]{ 0, 0 });			}			renderEquippedItems(entity, f1);			boolean hurtFlag = PFLM_Main.isShaders && shadersHurtFlashFlag && !(Boolean) Modchu_Reflect.getFieldObject("Shaders", "useEntityHurtFlash") ? true : false;			if (!hurtFlag) {				f9 = Modchu_AS.getFloat(Modchu_AS.entityGetBrightness, f1);				int k = getColorMultiplier(entity, f9, f1);				Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.getInt(Modchu_AS.openGlHelperLightmapTexUnit));				if (PFLM_Main.isShaders && !shadersHurtFlashFlag) {					//Shaders.glDisableWrapper(GL11.GL_TEXTURE_2D);					shadersGlDisableWrapper(GL11.GL_TEXTURE_2D);				} else {					GL11.glDisable(GL11.GL_TEXTURE_2D);				}				if (PFLM_Main.isShaders						&& shadersHurtFlashFlag) Modchu_Reflect.invokeMethod("Shaders", "disableLightmap");				Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.getInt(Modchu_AS.openGlHelperDefaultTexUnit));				int hurtTime = Modchu_AS.getInt(Modchu_AS.entityLivingBaseHurtTime, entity);				int deathTime = Modchu_AS.getInt(Modchu_AS.entityLivingBaseDeathTime, entity);				if ((k >> 24 & 0xff) > 0						|| hurtTime > 0						|| deathTime > 0) {					if (PFLM_Main.isShaders && shadersHurtFlashFlag) Modchu_Reflect.invokeMethod("Shaders", "beginLivingDamage");					if (PFLM_Main.isShaders && !shadersHurtFlashFlag) {						//Shaders.glDisableWrapper(GL11.GL_TEXTURE_2D);						shadersGlDisableWrapper(GL11.GL_TEXTURE_2D);						//Shaders.glDisableWrapper(GL11.GL_ALPHA_TEST);						shadersGlDisableWrapper(GL11.GL_ALPHA_TEST);						//Shaders.glEnableWrapper(GL11.GL_BLEND);						shadersGlEnableWrapper(GL11.GL_BLEND);					} else {						GL11.glDisable(GL11.GL_TEXTURE_2D);						GL11.glDisable(GL11.GL_ALPHA_TEST);						GL11.glEnable(GL11.GL_BLEND);					}					GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);					GL11.glDepthFunc(GL11.GL_EQUAL);					if (hurtTime > 0							|| deathTime > 0) {						GL11.glColor4f(f9, 0.0F, 0.0F, 0.4F);						modelData.modelMain.model.render(modelData, f8, f7, f5, f3 - f2, f4, f6, true);						for (int i1 = 0; i1 < 4; i1++) {							if (inheritRenderPass(entity, i1, f1) >= 0) {								GL11.glColor4f(f9, 0.0F, 0.0F, 0.4F);								Modchu_AS.set(Modchu_AS.modelBaseRender, renderPassModel, entity, f8, f7, f5, f3 - f2, f4, f6);							}						}					}					if ((k >> 24 & 0xff) > 0) {						float f10 = (k >> 16 & 0xff) / 255F;						float f12 = (k >> 8 & 0xff) / 255F;						float f14 = (k & 0xff) / 255F;						float f15 = (k >> 24 & 0xff) / 255F;						GL11.glColor4f(f10, f12, f14, f15);						modelData.modelMain.model.render(modelData, f8, f7, f5, f3 - f2, f4, f6, true);						for (int k1 = 0; k1 < 4; k1++) {							if (inheritRenderPass(entity, k1, f1) >= 0) {								GL11.glColor4f(f10, f12, f14, f15);								Modchu_AS.set(Modchu_AS.modelBaseRender, renderPassModel, entity, f8, f7, f5, f3 - f2, f4, f6);							}						}					}					GL11.glDepthFunc(GL11.GL_LEQUAL);					if (PFLM_Main.isShaders							&& !shadersHurtFlashFlag) {						//Shaders.glDisableWrapper(GL11.GL_BLEND);						shadersGlDisableWrapper(GL11.GL_BLEND);						//Shaders.glEnableWrapper(GL11.GL_ALPHA_TEST);						shadersGlEnableWrapper(GL11.GL_ALPHA_TEST);						//Shaders.glEnableWrapper(GL11.GL_TEXTURE_2D);						shadersGlEnableWrapper(GL11.GL_TEXTURE_2D);					} else {						GL11.glDisable(GL11.GL_BLEND);						GL11.glEnable(GL11.GL_ALPHA_TEST);						GL11.glEnable(GL11.GL_TEXTURE_2D);					}					if (PFLM_Main.isShaders							&& shadersHurtFlashFlag) Modchu_Reflect.invokeMethod("Shaders", "endLivingDamage");				}				if (PFLM_Main.isShaders						&& !shadersHurtFlashFlag) {					//Shaders.glDisableWrapper(GL12.GL_RESCALE_NORMAL);					shadersGlDisableWrapper(GL12.GL_RESCALE_NORMAL);				} else {					GL11.glDisable(GL12.GL_RESCALE_NORMAL);				}			}		} catch (Exception exception) {			exception.printStackTrace();		}		Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.getInt(Modchu_AS.openGlHelperLightmapTexUnit));		if (PFLM_Main.isShaders				&& !shadersHurtFlashFlag) {			//Shaders.glEnableWrapper(GL11.GL_TEXTURE_2D);			shadersGlEnableWrapper(GL11.GL_TEXTURE_2D);		} else {			GL11.glEnable(GL11.GL_TEXTURE_2D);		}		Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.getInt(Modchu_AS.openGlHelperDefaultTexUnit));		if (PFLM_Main.isShaders				&& !shadersHurtFlashFlag) {			//Shaders.glEnableWrapper(GL11.GL_CULL_FACE);			shadersGlEnableWrapper(GL11.GL_CULL_FACE);		} else {			GL11.glEnable(GL11.GL_CULL_FACE);		}		GL11.glPopMatrix();		passSpecialRender(entity, d, d1, d2);	}	@Override	public void passSpecialRender(Object entityLiving, double d, double d1, double d2) {		if (PFLM_ConfigData.isRenderName) base.superPassSpecialRender(entityLiving, d, d1, d2);	}	@Override	public float interpolateRotation(float par1, float par2, float par3) {		float var4;		for (var4 = par2 - par1; var4 < -180.0F; var4 += 360.0F) {		}		while (var4 >= 180.0F) {			var4 -= 360.0F;		}		return par1 + par3 * var4;	}	@Override	public float handleRotationFloat(Object entity, float par2) {		return Modchu_AS.getFloat(Modchu_AS.entityTicksExisted, entity) + par2;	}	@Override	public int getColorMultiplier(Object entity, float par2, float par3) {		return 0;	}	@Override	public int inheritRenderPass(Object entity, int par2, float par3) {		return shouldRenderPass(entity, par2, par3);	}	public void shadersGlDisableWrapper(int i) {		Package pac = this.getClass().getPackage();		String s;		if (pac == null) s = "Shaders";		else s = pac.getName().concat(".Shaders");		Method mes = null;		if (checkGlDisableWrapper) {			try {				mes = Class.forName(s).getMethod("glDisableWrapper", new Class[]{ int.class });				try {					mes.invoke(null, i);				} catch (Exception e) {					checkGlDisableWrapper = false;				}			} catch (Exception e) {				checkGlDisableWrapper = false;			}		}		if (!checkGlDisableWrapper) {			glDisableWrapper(s, i);		}	}	public void shadersGlEnableWrapper(int i) {		Package pac = this.getClass().getPackage();		String s;		if (pac == null) s = "Shaders";		else s = pac.getName().concat(".Shaders");		Method mes = null;		if (checkGlEnableWrapper) {			try {				mes = Class.forName(s).getMethod("glEnableWrapper", new Class[]{ int.class });				try {					mes.invoke(null, i);				} catch (Exception e) {					checkGlEnableWrapper = false;				}			} catch (Exception e) {				checkGlEnableWrapper = false;			}		}		if (!checkGlEnableWrapper) {			glEnableWrapper(s, i);		}	}	public void glEnableWrapper(String s, int i) {		GL11.glEnable(i);		if (i == GL11.GL_TEXTURE_2D) {			Method mes = null;			try {				mes = Class.forName(s).getMethod("glEnableWrapperTexture2D", (Class[]) null);				try {					mes.invoke(null, (Object[]) null);				} catch (Exception e) {					e.printStackTrace();				}			} catch (Exception e) {				e.printStackTrace();			}		} else if (i == GL11.GL_FOG) {			Method mes = null;			try {				mes = Class.forName(s).getMethod("glEnableWrapperFog", (Class[]) null);				try {					mes.invoke(null, (Object[]) null);				} catch (Exception e) {					e.printStackTrace();				}			} catch (Exception e) {				e.printStackTrace();			}		}	}	public void glDisableWrapper(String s, int i) {		GL11.glDisable(i);		if (i == GL11.GL_TEXTURE_2D) {			Method mes = null;			try {				mes = Class.forName(s).getMethod("glDisableWrapperTexture2D", (Class[]) null);				try {					mes.invoke(null, (Object[]) null);				} catch (Exception e) {					e.printStackTrace();				}			} catch (Exception e) {				e.printStackTrace();			}		} else if (i == GL11.GL_FOG) {			Method mes = null;			try {				mes = Class.forName(s).getMethod("glDisableWrapperFog", (Class[]) null);				try {					mes.invoke(null, (Object[]) null);				} catch (Exception e) {					e.printStackTrace();				}			} catch (Exception e) {				e.printStackTrace();			}		}	}	public void renderLivingAt(Object entity, double par2, double par4, double par6) {		superRenderLivingAt(entity, par2, par4, par6);	}	public void rotateCorpse(Object entity, float f, float f1, float f2) {		superRotateCorpse(entity, f, f1, f2);	}	@Override	public void renderEquippedItems(Object entity, float f) {/*		Modchu_AS.set(Modchu_AS.renderHelperEnableStandardItemLighting);		Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.get(Modchu_AS.openGlHelperLightmapTexUnit));		GL11.glDisable(GL11.GL_TEXTURE_2D);		Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.get(Modchu_AS.openGlHelperDefaultTexUnit));		GL11.glDisable(GL12.GL_RESCALE_NORMAL);*/	}	@Override	public void doRender(Object entity, double d, double d1, double d2, float f, float f1) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);		//Modchu_Debug.mDebug("doRender modelData.modelFATT.modelOuter="+modelData.modelFATT.modelOuter);		if (modelData.modelFATT != null				&& modelData.modelMain != null				&& modelData.modelFATT.modelOuter != null				&& modelData.modelFATT.modelInner != null); else return;		modelData.modelFATT.modelOuter.isWait = modelData.modelFATT.modelInner.isWait = modelData.modelMain.model.isWait;		//Modchu_Debug.mDebug("doRender isRiding="+modelData.getCapsValue(modelData.caps_isRiding));		if (Modchu_Main.getMinecraftVersion() > 159) {			setRenderCount(modelData.modelFATT, 0);		}		boolean isRiding = modelData.getCapsValueBoolean(modelData.caps_isSitting);		modelData.setCapsValue(modelData.caps_isRiding, isRiding);		modelData.modelMain.model.isRiding = modelData.modelFATT.modelInner.isRiding = modelData.modelFATT.modelOuter.isRiding = isRiding;		modelData.modelMain.model.onGrounds[0] = modelData.modelFATT.modelInner.onGrounds[0] = modelData.modelFATT.modelOuter.onGrounds[0] = getSwingProgress(entity, f1);		modelData.modelMain.model.isSneak = modelData.modelFATT.modelOuter.isSneak = modelData.modelFATT.modelInner.isSneak = modelData.modelMain.model.isSneak = modelData.getCapsValueBoolean(modelData.caps_isSneak);		GL11.glPushMatrix();		GL11.glPushAttrib(GL11.GL_ALL_ATTRIB_BITS);		if (!PFLM_Main.oldRender) {			Modchu_AS.set(Modchu_AS.renderMainModel, base, modelData.modelMain);			superDoRenderLiving(entity, d, d1, d2, f, f1);		} else oldDoRenderLivingPFLM(modelData, entity, d, d1, d2, f, f1);		GL11.glPopAttrib();		GL11.glPopMatrix();		//Modchu_Debug.mDebug("doRender modelData.modelFATT.modelInner="+modelData.modelFATT.modelInner);	}	@Override	public void allModelInit(Object entity, boolean debug) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);		((PFLM_ModelDataMaster) PFLM_ModelDataMaster.instance).modelInit(entity, modelData, (String) modelData.getCapsValue(modelData.caps_textureName), debug);		((PFLM_ModelDataMaster) PFLM_ModelDataMaster.instance).modelArmorInit(entity, modelData, (String) modelData.getCapsValue(modelData.caps_textureArmorName), debug);	}	@Override	public void modelArmorInit(Object entity, boolean debug) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);		((PFLM_ModelDataMaster) PFLM_ModelDataMaster.instance).modelArmorInit(entity, modelData, (String) modelData.getCapsValue(modelData.caps_textureArmorName), debug);	}	@Override	public void renderModel(Object entity, float par2, float par3, float par4, float par5, float par6, float par7) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (modelData.getCapsValueBoolean(modelData.caps_freeVariable, "showMainModel")); else return;		if (modelData.getCapsValue(modelData.caps_ResourceLocation) != null); else {			//Modchu_Debug.mDebug("renderModel ResourceLocation null.allModelTextureReset");			((PFLM_ModelDataMaster) PFLM_ModelDataMaster.instance).allModelTextureReset(entity, modelData);		}		int version = Modchu_Main.getMinecraftVersion();		if ((version > 129				&& (!ModchuModel_ConfigData.useInvisibilityBody				| ModchuModel_ConfigData.useInvisibilityBody				&& !Modchu_AS.getBoolean(Modchu_AS.entityIsInvisible, entity)))				| version < 130) {			if (version < 159) {				String skinUrl = null;				String texture = (String) (modelData.getCapsValue(modelData.caps_ResourceLocation));				Modchu_Reflect.invokeMethod("Render", "func_76984_a", "loadDownloadableImageTexture", new Class[]{ String.class, String.class }, base, new Object[]{ skinUrl, texture });				//Modchu_Debug.mDebug("renderModel skinUrl="+skinUrl+" texture="+texture);			} else {				bindTexture(modelData, modelData.getCapsValue(modelData.caps_ResourceLocation));			}			modelData.modelMain.setArmorRendering(true);		} else {			modelData.modelMain.setArmorRendering(false);		}		//GL11.glPushMatrix();		//int i2 = entityliving.getBrightnessForRender(1.0F);		//Modchu_Debug.dDebug("tes r 8 "+(modelData.getCapsValue(modelData.caps_ResourceLocation)));		Modchu_AS.set(Modchu_AS.renderHelperEnableStandardItemLighting);		//Modchu_AS.set(Modchu_AS.renderHelperDisableStandardItemLighting);		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);		GL11.glDepthMask(true);		//Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.get(Modchu_AS.openGlHelperLightmapTexUnit));		//Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.get(Modchu_AS.openGlHelperDefaultTexUnit));		//GL11.glDisable(GL12.GL_RESCALE_NORMAL);		//GL11.glEnable(GL12.GL_RESCALE_NORMAL);		//GL11.glDisable(GL11.GL_CULL_FACE);		GL11.glEnable(GL11.GL_CULL_FACE);		//GL11.glDisable(GL11.GL_LIGHTING);		//GL11.glEnable(GL11.GL_LIGHTING);		//GL11.glDisable(GL11.GL_BLEND);		GL11.glEnable(GL11.GL_BLEND);		//GL11.glDisable(GL11.GL_TEXTURE_2D);		GL11.glEnable(GL11.GL_TEXTURE_2D);		//GL11.glDisable(GL11.GL_ALPHA_TEST);		//GL11.glEnable(GL11.GL_ALPHA_TEST);		//GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);		//GL11.glBlendFunc(GL11.GL_ONE, GL11.GL_ONE);		//GL11.glDepthFunc(GL11.GL_EQUAL);		//GL11.glDepthFunc(GL11.GL_LEQUAL);		GL11.glMatrixMode(GL11.GL_TEXTURE);		GL11.glLoadIdentity();		GL11.glMatrixMode(GL11.GL_MODELVIEW);		ModchuModel_Client.setLightmapTextureCoords(0x00f000f0);//61680		if (Modchu_Main.getMinecraftVersion() > 159 && Modchu_Main.mmmLibVersion > 499) {			//setLightmapTextureCoords(0x00f000f0);//61680			//GL11.glMatrixMode(GL11.GL_TEXTURE);			//GL11.glLoadIdentity();			//GL11.glMatrixMode(GL11.GL_MODELVIEW);			//GL11.glEnable(GL11.GL_LIGHTING);			//GL11.glEnable(GL11.GL_BLEND);			//GL11.glDisable(GL11.GL_BLEND);			//GL11.glDepthFunc(GL11.GL_LEQUAL);			//GL11.glDisable(GL11.GL_ALPHA_TEST);			//GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);			//GL11.glDepthMask(true);			//Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.get(Modchu_AS.openGlHelperLightmapTexUnit));			//GL11.glDisable(GL11.GL_TEXTURE_2D);			//Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.get(Modchu_AS.openGlHelperDefaultTexUnit));			//setLightmapTextureCoords(i2);		}		modelData.modelMain.model.render(modelData, par2, par3, par4, par5, par6, par7, (Boolean) Modchu_Reflect.getFieldObject(Modchu_ModelBaseNihilBase.class, "isRendering", modelData.modelMain));		//if (Modchu_Main.getMinecraftVersion() > 159 && Modchu_Main.mmmLibVersion > 499) {			//setLightmapTextureCoords(i2);			//GL11.glDisable(GL11.GL_BLEND);			//GL11.glDisable(GL11.GL_ALPHA_TEST);			//GL11.glDepthMask(true);			//GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);			//GL11.glDisable(GL11.GL_LIGHTING);			//GL11.glEnable(GL11.GL_LIGHTING);			//OpenGlHelper.setActiveTexture(OpenGlHelper.lightmapTexUnit);			//GL11.glDisable(GL11.GL_TEXTURE_2D);			//OpenGlHelper.setActiveTexture(OpenGlHelper.defaultTexUnit);			//GL11.glDisable(GL11.GL_CULL_FACE);		//}		//GL11.glPopMatrix();		//Modchu_Debug.mDebug("renderModel modelData.modelMain.isRendering="+modelData.modelMain.isRendering);	}	public void bindTexture(PFLM_ModelData modelData, Object o) {		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		if ((skinMode == PFLM_ModelDataMaster.skinMode_online				&& !modelData.getCapsValueBoolean(modelData.caps_localFlag))				| ((skinMode == PFLM_ModelDataMaster.skinMode_Player				| skinMode == ((PFLM_ModelDataMaster) PFLM_ModelDataMaster.instance).skinMode_PlayerOnline)						&& !PFLM_ModelDataMaster.instance.getPlayerData(Modchu_AS.get(Modchu_AS.minecraftThePlayer)).getCapsValueBoolean(modelData.caps_localFlag))) {			String username = ((PFLM_ModelDataMaster) PFLM_ModelDataMaster.instance).getUserName(modelData, modelData.getCapsValue(modelData.caps_Entity));			//Modchu_Debug.dDebug("bindTexture local");			//Modchu_Debug.mDebug("bindTexture local Modchu_Debug.debugPlayerName="+Modchu_Debug.debugPlayerName);			//Modchu_Debug.mDebug("bindTexture local username="+username);			Modchu_RenderEngine.instance.bindTexture(username);		} else if (o != null				&& base != null				&& Modchu_AS.get(Modchu_AS.renderRenderManagerRenderEngine, base) != null				) {			//Modchu_Debug.mDebug("parentRender="+parentRender.getClass());			//Modchu_Debug.mDebug("o.getClass()="+o.getClass(), 1);			//Modchu_Debug.mDebug("o="+o, 2);			Modchu_Reflect.invokeMethod("Render", "func_110776_a", "bindTexture", new Class[]{ o.getClass() }, base, new Object[]{ o });		} else {			//Modchu_Debug.dDebug("PFLM_RenderMasterBase bindTexture null !!");		}		//Modchu_Debug.dDebug(null);		//Modchu_Debug.dDebug(null, 1);		//Modchu_Debug.dDebug(null, 2);	}	public void setRenderCount(Object o, int i) {		boolean b2 = false;		b2 = Modchu_Reflect.setFieldObject(o.getClass(), "renderCount", o, i, 1);	}	public Object getRenderPassModel() {		Object o = Modchu_Reflect.getFieldObject(base.getClass(), "field_77046_h", "renderPassModel", base);		return o != null ? o : null;	}	public void setRenderPassModel(Object model) {		base.superSetRenderPassModel(model);	}	public void setRenderPassModel(Object model, Object model2) {		Modchu_Reflect.invokeMethod(base.getClass(), "setRenderPassModel", new Class[]{ Object.class, Object.class }, base, new Object[]{ model, model2 });	}	public void superDoRenderLiving(Object entity, double d, double d1, double d2, float f, float f1) {		base.superDoRenderLiving(entity, d, d1, d2, f, f1);	}	@Override	public float getSwingProgress(Object entity, float f1) {		return (Float) Modchu_Reflect.invokeMethod("EntityLivingBase", "func_70678_g", "getSwingProgress", new Class[]{ float.class }, entity, new Object[]{ f1 });	}	public Object getRenderManager() {		return Modchu_Reflect.getFieldObject(base.getClass(), "field_76990_c", "renderManager", base);	}	public void superPreRenderCallback(Object entity, float f) {		base.superPreRenderCallback(entity, f);	}	public void superRenderLivingAt(Object entity, double par2, double par4, double par6) {	}	public void superRotateCorpse(Object entity, float f, float f1, float f2) {	}	@Override	public void renderSpecials(Object entityPlayer, float f) {	}	@Override	public double renderLivingLabel(Object entityplayer, String par2Str, double d, double d1, double d2, int i) {		return 0;	}	@Override	public Object getEntityTexture(Object entity) {		return ((PFLM_ModelDataMaster) PFLM_ModelDataMaster.instance).getResourceLocation(entity);	}	@Override	public Object getEntityTexture(Object entity, int i) {		return ((PFLM_ModelDataMaster) PFLM_ModelDataMaster.instance).getResourceLocation(entity, i);	}	@Override	public Object getMainModel() {		return Modchu_AS.get(Modchu_AS.renderMainModel, base);	}}