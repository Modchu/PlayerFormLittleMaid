package modchu.pflm;import java.io.File;import java.lang.reflect.Field;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Random;import java.util.concurrent.ConcurrentHashMap;import org.lwjgl.input.Keyboard;import org.lwjgl.input.Mouse;import modchu.lib.Modchu_AS;import modchu.lib.Modchu_CastHelper;import modchu.lib.Modchu_Config;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_EntityCapsHelper;import modchu.lib.Modchu_FileManager;import modchu.lib.Modchu_IRenderPlayer;import modchu.lib.Modchu_LMMManager;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.Modchu_Version;import modchu.model.ModchuModel_Config;import modchu.model.ModchuModel_ConfigData;import modchu.model.ModchuModel_IEntityCaps;import modchu.model.ModchuModel_Main;import modchu.model.ModchuModel_ModelDataBase;import modchu.model.ModchuModel_TextureBoxBase;import modchu.model.ModchuModel_TextureManagerBase;import modchu.model.ModchuModel_ThreadVersionCheck;import modchu.model.multimodel.base.MultiModelBaseBiped;import modchu.model.multimodel.base.MultiModelCustom;public class PFLM_Main {	public static final String version = "34c";	private static final int requestModchuLibVersion = 1701;	public static Object baseModInstance;	public static Modchu_IRenderPlayer renderPlayerInstance;	public static final String modName = "PlayerFormLittleMaid";	public static final String versionString = ""+ Modchu_Version.getMinecraftVersion() + "-" + version;	private static PFLM_ThreadVersionCheck threadVersionCheck;	public static boolean isThirdPersonCamera = false;	public static boolean isnoBiomesX = false;	public static boolean isDynamicLights = false;	public static boolean is2D = false;	public static boolean isCCTV = false;	public static boolean isWait = false;	public static boolean isMulti = false;	public static boolean isSSP = false;	public static boolean isPlayerAPI = false;	public static boolean guiEnable = true;	public static boolean entityReplaceFlag = false;	public static boolean initItemRenderer = false;	public static boolean initItemRendererHD = false;	public static boolean newRelease = false;	public static boolean initModsLoaded = false;	private static boolean isReleasekey = false;	private static boolean itemRendererReplaceFlag = false;	private static boolean texturesNamberInitFlag = false;	private static boolean setMultiAutochangeMode = true;	private static boolean isRemote = false;	private static File mainCfgfile;	public static File cfgfile;	public static File othersCfgfile;	private static File modelListfile;	private static File textureListfile;	private static File shortcutKeysCfgfile;	private static File shortcutKeysKeyNumberCfgfile;	public static List<String> textureList = new ArrayList<String>();	public static ConcurrentHashMap playerLocalData = new ConcurrentHashMap();	public static String newVersion = "";	public static int PFLMModelsKeyCode;	private static int keySitLockCount = 0;	private static int keyLieDownLockCount = 0;	private static int erpflmCheck = 0;	private static int initModsLoadedCount;	private static final int maxInitModsLoadedCount = 14;	private static Random rnd = new Random();	//不具合有り機能封印	public static boolean guiShowArmorSupport = false;	//対応minecraftバージョンによって使っていたりいなかったり	public static boolean isSwapGuiSelectWorld = false;	public static boolean addRendererFlag = false;	private static boolean aetherAddRenderer;	private static int keyCode = 0;	private static int keybindingTime = 0;	public static String optiVersionName;	public static int getIconWidthTerrain = 16;	public static boolean smartMovingAddRenderer = false;	public static boolean smartMovingAddRenderer2 = false;	public static boolean smartMovingVersion = false;	public static boolean aetherInit = false;	private static boolean saveShortcutKeysKeyNumberParamaterFlag = false;	public static Object netclienthandler;	private static boolean initOnTickFlag;	public static String getName() {		return modName;	}	public static String getVersion() {		return versionString;	}	static{		String s = System.getenv("debugPlayerName");		if (s != null) {			Modchu_Debug.debugPlayerName = s;		}	}	public static void load() {		Modchu_Debug.systemDebug("PFLM_Main load", 3);		mainCfgfile = new File(Modchu_Main.cfgdir, ("PlayerFormLittleMaid.cfg"));		cfgfile = new File(Modchu_Main.cfgdir, ("PlayerFormLittleMaidGuiSave.cfg"));		othersCfgfile = new File(Modchu_Main.cfgdir, ("PlayerFormLittleMaidGuiOthersPlayer.cfg"));		modelListfile = new File(Modchu_Main.cfgdir, ("PlayerFormLittleMaidModelList.cfg"));		textureListfile = new File(Modchu_Main.cfgdir, ("PlayerFormLittleMaidtextureList.cfg"));		shortcutKeysCfgfile = new File(Modchu_Main.cfgdir, ("PlayerFormLittleMaidShortcutKeys.cfg"));		shortcutKeysKeyNumberCfgfile = new File(Modchu_Main.cfgdir, ("PlayerFormLittleMaidShortcutKeysKeyNumber.cfg"));		loadcfg();		loadShortcutKeysParamater();		if (Modchu_Main.isForge) {			ConcurrentHashMap<String, Integer> map = loadShortcutKeysKeyNumberParamater();			shortcutKeysinit(map);		}		new PFLM_ModelDataMaster();		Modchu_FileManager.getModFile("playerformlittlemaid", "playerformlittlemaid");	}	public static void modsLoaded() {		if (initModsLoaded) return;		initModsLoadedCount = 0;		if (!Modchu_Main.isForge) {			ConcurrentHashMap<String, Integer> map = loadShortcutKeysKeyNumberParamater();			shortcutKeysinit(map);		}		// initModsLoadedCount 1		modsLoadedCountSetting();		if (Modchu_Main.isAether) Modchu_Main.modchuLibEventRegister(new PFLM_Aether());		Modchu_Debug.systemDebug("PFLM_Main modsLoadedInit", 4);		// initModsLoadedCount 2		modsLoadedCountSetting();		if (Modchu_Main.isForge) addRenderer(null);		// initModsLoadedCount 3		modsLoadedCountSetting();		String modc_ModchuModel = "modchu.model.modc_ModchuModel";		if (Modchu_Main.isModUse(modc_ModchuModel)); else {			Modchu_Main.setRuntimeException(!Modchu_Main.isMod(modc_ModchuModel) ? "modc_ModchuModel not found !!" :					!Modchu_Main.isModEnabled(modc_ModchuModel) ? "modc_ModchuModel not enabled !!" :							!Modchu_Main.isModUserEnabled(modc_ModchuModel) ? "modc_ModchuModel not user enabled !!" : "modc_ModchuModel error !!");		}		int i1 = Modchu_Main.getVersionStringConversionInt(Modchu_Main.lastIndexProcessing(Modchu_Main.getVersion(), "-"));		if (i1 < requestModchuLibVersion) {			Modchu_Debug.systemLogDebug("PFLM_Main ModchuLib Version is old !! VersionInt="+i1);			Modchu_Main.setRuntimeException("PFLM_Main ModchuLib Version is old !!");		} else {			Modchu_Debug.lDebug("PFLM_Main ModchuLib VersionInt="+i1);		}		// initModsLoadedCount 4		modsLoadedCountSetting();		loadParamater();		// initModsLoadedCount 5		modsLoadedCountSetting();		loadTextureList();		// initModsLoadedCount 6		modsLoadedCountSetting();		loadOthersPlayerParamater();		// initModsLoadedCount 7		modsLoadedCountSetting();		startVersionCheckThread();		// initModsLoadedCount 8		modsLoadedCountSetting();		//対応MOD導入チェック		List list = Modchu_CastHelper.List(Modchu_Main.isForge ? Modchu_Reflect.invokeMethod("Loader", "getActiveModList", Modchu_Reflect.invokeMethod("Loader", "instance")) : Modchu_Reflect.invokeMethod("ModLoader", "getLoadedMods"));		String name = null;		if (list != null				&& !list.isEmpty()) {			for (Object o1 : list) {				name = Modchu_Main.isForge ? Modchu_CastHelper.String(Modchu_Reflect.invokeMethod("ModContainer", "getName", o1)) : o1.getClass().getSimpleName();				if (name.startsWith("ThirdPersonCamera")						| name.equals("mod_ThirdPersonCamera")) {					isThirdPersonCamera = true;					Modchu_Debug.lDebug("ThirdPersonCamera Check ok.");				}				else if (name.startsWith("noBiomesX")						| name.equals("mod_noBiomesX")) {					isnoBiomesX = true;					Modchu_Debug.lDebug("noBiomesX Check ok.");				}				else if (name.startsWith("2DCraft")						| name.equals("mod_2DCraft")) {					is2D = true;					Modchu_Debug.lDebug("2DCraft Check ok.");				}				else if (name.startsWith("CCTV")						| name.equals("mod_CCTV")) {					isCCTV = true;					Modchu_Debug.lDebug("CCTV Check ok.");				}			}		}		// initModsLoadedCount 9		modsLoadedCountSetting();		//対応クラス存在チェック		String className1[] = {				"DynamicLights", "EntityPlayerSP2"		};		String test2 = null;		String s = null;		for (int n = 0; n < className1.length; n++) {			try {				test2 = className1[n];				//Modchu_Debug.mDebug("test2 = "+test2);				test2 = ""+Class.forName(test2);				Modchu_Debug.lDebug(test2 + " Check ok.");				if (n == 0) isDynamicLights = true;				if (n == 1) {					try {						s = "EntityPlayerSP2";						if (s != null) {							Object o = Modchu_Reflect.getFieldObject(s, "armor", -1);							if (o != null) isSSP = true;						}					} catch(Exception e) {					}				}			} catch (ClassNotFoundException e) {			}		}		// initModsLoadedCount 10		modsLoadedCountSetting();		if (!isThirdPersonCamera) {			Modchu_Debug.lDebug("isThirdPersonCamera false.");		}		if (!isnoBiomesX) {			Modchu_Debug.lDebug("isnoBiomesX false.");		}		if (!isDynamicLights) {			Modchu_Debug.lDebug("isDynamicLights false.");		}		if (!is2D) {			Modchu_Debug.lDebug("is2D false.");		}		if (!isCCTV) {			Modchu_Debug.lDebug("isCCTV false.");		}		if (ModchuModel_Main.isShader) {			erpflmCheck = 7;		}		if (ModchuModel_Main.isSmartMoving) PFLM_ConfigData.isModelSize = false;		// initModsLoadedCount 11		modsLoadedCountSetting();		if (PFLM_ConfigData.isPlayerForm) {			int ID = Modchu_AS.getInt(Modchu_AS.vacancyGlobalEntityID);			if (ID > -1) Modchu_Main.registerGlobalEntityID(Modchu_Main.getModchuCharacteristicClass("Modchu_EntityPlayerDummy"), "PFLM_EntityPlayerDummy", ID);		}		if (PFLM_ConfigData.isModelSize) {/*//110delete//-@-100				// OptiFine判定L				try {					s = (String) getPrivateValue(RenderGlobal.class, this, "version");					String s1 = "OptiFine";					if (s.indexOf(s1) != -1) {						Modchu_Debug.Debug(s + " Check ok.");						erpflmCheck = 2;					}				} catch (Exception exception) {					//Modchu_Debug.Debug("No OptiFineL.");				}//@-@100*///110delete			// OptiFine判定			boolean t = false;			String className2 = "Config";			test2 = null;			int n1 = 0;			try {				test2 = ""+Class.forName(className2);				Modchu_Debug.lDebug(test2 + " Check ok.");				t = true;				// b166deleteerpflmCheck = 4;			} catch (ClassNotFoundException e) {			}			if (t) {//-@-b166				s = null;				Field f11;/*//110delete				try {					f11 = Class.forName(className2).getDeclaredField("version");					f11.setAccessible(true);					String s1 = (String) f11.get(null);					erpflmCheck = optiNameCheck(s1, erpflmCheck);				} catch (Exception e1) {					Modchu_Debug.lDebug("No OptiFine.");				}//@-@b166*///110delete//-@-110				try {					f11 = Class.forName(className2).getField("OF_NAME");					try {						s = (String) f11.get(null);					} catch (Exception e) {						e.printStackTrace();						Modchu_Debug.lDebug("No OptiFine.");					}				} catch (Exception e1) {					Modchu_Debug.lDebug("No OptiFine.");				}				erpflmCheck = optiNameCheck(s, erpflmCheck);				if (erpflmCheck <= 1) {					boolean err = false;					String s2 = "";					try {						f11 = Class.forName(className2).getField("OF_EDITION");						try {							s = (String) f11.get(null);							erpflmCheck = optiNameCheck(s, erpflmCheck);							try {								f11 = Class.forName(className2).getField("VERSION");								try {									s2 = (String) f11.get(null);								} catch (Exception exception) {									err = true;								}							} catch (Exception exception) {								err = true;							}//@-@110//-@-123							String s1 = "B2";							if (s2.indexOf(s1) != -1) {								Modchu_Debug.lDebug("OptiFine "+ s2 + " Check ok.");								// 125deleteerpflmCheck = erpflmCheck == 3 ? 6 : 5 ;								/*125//*/erpflmCheck = 6;							}//@-@123//-@-110//-@-125							s1 = "B3";							if (s2.indexOf(s1) != -1) {								Modchu_Debug.lDebug("OptiFine "+ s2 + " Check ok.");								erpflmCheck = 5;							}//@-@125						} catch (Exception e) {							err = true;						}					} catch (Exception exception) {						err = true;					}					if(err) {						Modchu_Debug.lDebug("No OptiFine.");					}				}//@-@110			} else {/*//b166delete				try {					s = "FontRenderer";					Package pac = getClass().getPackage();					if (pac != null) s = pac.getName().concat(".").concat(s);					Method method = Class.forName(s).getDeclaredMethod("lineIsCommand", new Class[] {int.class});					erpflmCheck = 2;				} catch (Exception e1) {					Modchu_Debug.lDebug("No Optimine.");*///b166delete//-@-b166				Modchu_Debug.lDebug("No OptiFine Config.");//-@-125				try {					s = "VersionThread";					s = ""+Class.forName(s);					erpflmCheck = 2;				} catch (Exception e1) {					Modchu_Debug.lDebug("No OptiFineL.");				}//@-@125//@-@b166				// b166delete}			}		}/*//125delete		if (isModelSize) {			try {				if (isCCTV) {					String s3;					entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererCCTV"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });					entityRenderer.itemRenderer = newInstanceItemRenderer();					s3 = "PFLM_EntityRendererCCTV";					Modchu_Debug.lDebug(s3 + " to set.");					Class CCTV = Modchu_Reflect.loadClass(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("mod_CCTV"));					Modchu_Reflect.setFieldObject(CCTV, "c", entityRenderer);					Modchu_Reflect.setFieldObject(CCTV, "rendererReplaced", true);				} else				if (is2D) {					String s3;					entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRenderer2D"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });					s3 = "PFLM_EntityRenderer2D";					Modchu_Debug.lDebug(s3 + " to set.");				} else				if (erpflmCheck == 0) {					entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRenderer"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });					Modchu_Debug.lDebug("PFLM_EntityRenderer to set.");				} else				if (erpflmCheck == 1) {					entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererForge"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });					Modchu_Debug.lDebug("PFLM_EntityRendererForge to set.");				} else				if (erpflmCheck == 2) {					entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiL"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });					Modchu_Debug.lDebug("PFLM_EntityRendererOptiL to set.");				} else				if (erpflmCheck == 3) {					String s3;					if(isShaders) {//-@-125						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShaders"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererShaders";//@-@125*///125delete/*//125delete						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShadersHDM"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererShadersHDM";*///125delete/*//125delete					} else {//-@-125						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHD"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererOptiHD";//@-@125*///125delete/*//125delete						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHDM"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererOptiHDM";*///125delete/*//125delete					}					Modchu_Debug.lDebug(s3 + " to set.");				} else				if (erpflmCheck == 4) {					String s3;					if(isShaders) {						//-@-125						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShadersHDU"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererShadersHDU";//@-@125*///125delete/*//125delete						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShaders"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererShaders";*///125delete/*//125delete					} else {//-@-125						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHDU"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererOptiHDU";//@-@125*///125delete/*//125delete						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHD"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererOptiHD";*///125delete/*//125delete					}					Modchu_Debug.lDebug(s3 + " to set.");				} else					if (erpflmCheck == 5) {						String s3;						if(isShaders) {//-@-125							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShadersHDU3"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererShadersHDU3";//@-@125*///125delete/*//125delete							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShadersC"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererShadersC";*///125delete/*//125delete						} else {//-@-125							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHDU3"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererOptiHDU3";//@-@125*///125delete/*//125delete							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHDC"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererOptiHDC";*///125delete/*//125delete						}						Modchu_Debug.lDebug(s3 + " to set.");					} else						if (erpflmCheck == 6) {						String s3;						if(isShaders) {//-@-125							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShadersHDU3"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererShadersHDU3";//@-@125*///125delete/*//125delete							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShadersHDMTC"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererShadersHDMTC";*///125delete/*//125delete						} else {//-@-125							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHDU2"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererOptiHDU2";//@-@125*///125delete/*//125delete							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHDMTC"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererOptiHDMTC";*///125delete/*//125delete						}						Modchu_Debug.lDebug(s3 + " to set.");					} else					if (erpflmCheck == 7) {					String s3;					if(isShader) {//-@-110						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShader"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererShader";//@-@110*///125delete/*//110delete						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRenderer"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRenderer";*///110delete/*//125delete						Modchu_Debug.lDebug(s3 + " to set.");					}				}			} catch(Exception exception) {				Modchu_Debug.lDebug("PFLM_EntityRenderer Fail to set!");				exception.printStackTrace();			}		} else {			if (itemRendererClass != null) {				if (!instanceCheck(itemRendererClass, entityRenderer.itemRenderer)) {					ItemRenderer itemRenderer2 = newInstanceItemRenderer();					if (itemRenderer2 != null) {						Modchu_Debug.mDebug("modsLoaded itemRenderer2 != null");						entityRenderer.itemRenderer = itemRenderer2;						if (isHD) {							initItemRendererHD = true;						} else {							initItemRenderer = true;						}						if (isCCTV) {							Class CCTV = Modchu_Reflect.loadClass(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("mod_CCTV"));							Class EntityExtensibleRenderer = Modchu_Reflect.loadClass(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("EntityExtensibleRenderer"));							Modchu_Reflect.setFieldObject(EntityExtensibleRenderer, "c", "itemRenderer", Modchu_Reflect.getFieldObject(CCTV, "c"), itemRenderer2);						}					} else {						Modchu_Debug.mDebug("modsLoaded itemRenderer2 == null !!");					}				}			}		}/*		if(isSmartMoving) {			isModelSize = false;			try {				s = Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PlayerAPI");				Method mes = null;				mes = Class.forName(s).getMethod("unregister", new Class[] {String.class});				if(isSmartMoving) mes.invoke(null, "Smart Moving");				//PlayerAPI.unregister("Smart Moving");			} catch (Exception e) {			}			PFLM_PlayerBaseSmartServer.registerPlayerBase();			PFLM_SmartOtherPlayerData.initialize(gameSettings, false, ModLoader.getLogger());		}*/		// initModsLoadedCount 12		modsLoadedCountSetting();		// PlayerAPI判定		isPlayerAPI = false;		if (Modchu_Main.getMinecraftVersion() > 69				&& !PFLM_ConfigData.isPlayerAPIDebug				&& entityReplaceFlag) {			//PlayerAPI.register("PlayerFormLittleMaid", PFLM_PlayerBase.class);			s = "PlayerAPI";			if (Modchu_Reflect.loadClass(s, -1) != null) {				Class base;				if (ModchuModel_Main.isSmartMoving) {					base = Modchu_Reflect.loadClass("PFLM_PlayerBaseSmart");				} else {					base = Modchu_Reflect.loadClass("PFLM_PlayerBase");				}				Modchu_Reflect.invokeMethod(s, "register", new Class[] {String.class, Class.class}, null, new Object[]{ "PlayerFormLittleMaid", base });				isPlayerAPI = true;				Modchu_Debug.Debug("PlayerAPI register.");			}		}		if (!isPlayerAPI) {			Modchu_Debug.lDebug("PlayerAPI false.");		}		// initModsLoadedCount 13		modsLoadedCountSetting();		if (!PFLM_ConfigData.isClearWater) {			PFLM_ConfigData.setWatherFog = PFLM_ConfigData.watherFog;			PFLM_ConfigData.setWatherFog2 = PFLM_ConfigData.watherFog2;			PFLM_ConfigData.setwaterStillLightOpacity = PFLM_ConfigData.waterStillLightOpacity;			PFLM_ConfigData.setwaterMovingLightOpacity = PFLM_ConfigData.waterMovingLightOpacity;		} else {			int version = Modchu_Main.getMinecraftVersion();			if (version > 169) {				Modchu_AS.set(Modchu_AS.blockSetLightOpacity, Modchu_AS.get(Modchu_AS.getItem, "water") ,PFLM_ConfigData.setwaterStillLightOpacity);			} else {				Modchu_AS.set(Modchu_AS.blockSetLightOpacity, Modchu_AS.get(Modchu_AS.getItem, "water") ,PFLM_ConfigData.setwaterStillLightOpacity);				Modchu_AS.set(Modchu_AS.blockSetLightOpacity, Modchu_AS.get(Modchu_AS.getItem, "flowing_water") ,PFLM_ConfigData.setwaterMovingLightOpacity);			}		}		if (entityReplaceFlag) Modchu_Debug.lDebug("PFLM-EntityPlayerReplace setting on.");		else Modchu_Debug.lDebug("PFLM-EntityPlayerReplace setting off.");		initModsLoaded = true;		// initModsLoadedCount 14		modsLoadedCountSetting();		PFLM_GuiConstant.init();		Modchu_Debug.lDebug("PFLM_Main modsLoaded() end.");	}	private static void modsLoadedCountSetting() {		initModsLoadedCount++;		Modchu_Debug.systemLogDebug(new StringBuilder().append("[PFLM_Main] 1 - (").append(initModsLoadedCount).append(" / ").append(maxInitModsLoadedCount).append(") modsLoaded()").toString());	}	private static void shortcutKeysinit(ConcurrentHashMap<String, Integer> map) {		LinkedList keyBindingsList = new LinkedList();		LinkedList<String[]> stringLocalizationList = new LinkedList();		systemShortcutKeysInit(keyBindingsList, stringLocalizationList, map);		shortcutKeysinit(keyBindingsList, stringLocalizationList, map);		Object[] keyBindings = Modchu_Reflect.newInstanceArray("KeyBinding", keyBindingsList.size());		//boolean[] repeatings = new boolean[keyBindingsList.size()];		int i = 0;		//Modchu_Debug.mDebug("shortcutKeysinit keyBindingsList.size()="+keyBindingsList.size());		for (Object keyBinding : keyBindingsList) {			keyBindings[i] = keyBinding;			//repeatings[i] = true;			Modchu_Main.registerKey(baseModInstance, keyBindings[i], false);			i++;		}		for (String[] s1 : stringLocalizationList) {			Modchu_Main.languageRegistryAddName(s1[0], s1[1]);		}	}	private static void systemShortcutKeysInit(LinkedList keyBindingsList, LinkedList<String[]> stringLocalizationList, ConcurrentHashMap<String, Integer> map) {		if (PFLM_ConfigData.isPlayerForm); else return;		//キーの登録と名称変換テーブルの登録		String s;		String s2;		shortcutKeysInitSetting(PFLM_ConfigData.systemShortcutKeysGuiName, null, PFLM_ConfigData.defaultSystemShortcutKeysGui, keyBindingsList, stringLocalizationList, map);		shortcutKeysInitSetting(PFLM_ConfigData.systemShortcutKeysModelsName, null, PFLM_ConfigData.defaultSystemShortcutKeysModels, keyBindingsList, stringLocalizationList, map);		if (PFLM_ConfigData.waitTime == 0) shortcutKeysInitSetting(PFLM_ConfigData.systemShortcutKeysWaitName, null, PFLM_ConfigData.defaultSystemShortcutKeysWait, keyBindingsList, stringLocalizationList, map);		shortcutKeysInitSetting(PFLM_ConfigData.systemShortcutKeysSitName, null, PFLM_ConfigData.defaultSystemShortcutKeysSit, keyBindingsList, stringLocalizationList, map);		shortcutKeysInitSetting(PFLM_ConfigData.systemShortcutKeysLieDownName, null, PFLM_ConfigData.defaultSystemShortcutKeysLieDown, keyBindingsList, stringLocalizationList, map);		Modchu_Debug.mDebug("systemShortcutKeysinit keyBindingsList.size()="+keyBindingsList.size());	}	public static void shortcutKeysinit(LinkedList keyBindingsList, LinkedList<String[]> stringLocalizationList, ConcurrentHashMap<String, Integer> map) {		if (Modchu_Main.isServer) return;		//Modchu_Debug.lDebug("shortcutKeysinit PFLM_ConfigData.maxShortcutKeys="+PFLM_ConfigData.maxShortcutKeys);		for (int i = 0; i < PFLM_ConfigData.maxShortcutKeys; i++) {			if (PFLM_ConfigData.shortcutKeysUse[i]) shortcutKeysInitSetting(PFLM_ConfigData.shortcutKeysName + i, Modchu_Main.lastIndexProcessing(PFLM_ConfigData.shortcutKeysName, ".") + i, 34 + i, keyBindingsList, stringLocalizationList, map);		}		List keybindArray = Modchu_AS.getList(Modchu_AS.keybindArray);		Object keyBinding;		for (int i = 0; i < keybindArray.size(); i++) {			keyBinding = keybindArray.get(i);			String keyDescription = Modchu_AS.getString(Modchu_AS.keyBindingKeyDescription, keyBinding);			if (keyDescription.equalsIgnoreCase("key.PFLM Models Key")) {				PFLM_Main.PFLMModelsKeyCode = Modchu_AS.getInt(Modchu_AS.keyBindingKeyCode, keyBinding);				break;			}		}		Modchu_Debug.lDebug("shortcutKeysinit end.");	}	private static void shortcutKeysInitSetting(String s, String s1, int defaultKeyCode, LinkedList keyBindingsList, LinkedList<String[]> stringLocalizationList, ConcurrentHashMap<String, Integer> map) {		String name = new StringBuilder().append("key_").append(s).toString();		int key = map != null && map.containsKey(name) ? map.get(name) : defaultKeyCode;		keyBindingsList.add(Modchu_AS.get(Modchu_AS.newInstanceKeyBinding, s, key, "PFLM"));		stringLocalizationList.add(new String[]{ s, s1 != null ? s1 : Modchu_Main.lastIndexProcessing(s, ".") });	}	public static void addRenderer(Object map) {		Modchu_Debug.lDebug("PFLM_Main addRenderer");		if (addRendererFlag) return;		addRendererFlag = true;		if (!PFLM_ConfigData.isPlayerForm) {			Modchu_Debug.systemLogDebug("PFLM_Main addRenderer !PFLM_ConfigData.isPlayerForm return.", 2, null);			return;		}		//if (isSmartMoving) {		//renderPlayerInstance = new Modchu_RenderPlayer(PFLM_RenderPlayerSmartMaster.class);		//Modchu_AS.set(Modchu_AS.renderRenderManager, renderPlayerInstance);		//Modchu_Main.renderPlayerRendererReplace(renderPlayerInstance, "default");		//} else {		try {			renderPlayerInstance = (Modchu_IRenderPlayer) Modchu_Main.newModchuCharacteristicObject("Modchu_RenderPlayer", PFLM_RenderPlayerMaster.class);			Modchu_AS.set(Modchu_AS.renderRenderManager, renderPlayerInstance);			Modchu_Main.renderPlayerRendererReplace(renderPlayerInstance, "default");			if (Modchu_Main.getMinecraftVersion() > 179) {				Modchu_IRenderPlayer modchu_RenderPlayer = (Modchu_IRenderPlayer) Modchu_Main.newModchuCharacteristicObject("Modchu_RenderPlayer", PFLM_RenderPlayerMaster.class, true);				Modchu_AS.set(Modchu_AS.renderRenderManager, modchu_RenderPlayer);				Modchu_Main.renderPlayerRendererReplace(modchu_RenderPlayer, "slim");			}			//Class c = Modchu_Reflect.loadClass("PFLM_EntityPlayerSP");			//if (c != null) Modchu_Main.addRenderer(c, modchu_RenderPlayer);		} catch(Error e1) {			Modchu_Debug.systemLogDebug("PFLM_Main addRenderer Error !!");			Modchu_Debug.systemLogDebug("", e1);			e1.printStackTrace();		} catch(Exception e) {			Modchu_Debug.systemLogDebug("PFLM_Main addRenderer Exception !!");			Modchu_Debug.systemLogDebug("", e);			e.printStackTrace();		}		//}		Modchu_Main.eventRegister(renderPlayerInstance);		Modchu_Debug.lDebug("PFLM_Main addRenderer end.");	}	public static void keyboardEvent(Object keyBinding) {		boolean debug = false;		//if (debug) Modchu_Debug.mDebug("PFLM_Main keyboardEvent");		Object entity = null;		Object currentScreen = Modchu_AS.get(Modchu_AS.minecraftCurrentScreen);		if (currentScreen != null) {			//if (debug) Modchu_Debug.mDebug("PFLM_Main keyboardEvent currentScreen="+currentScreen);			if (currentScreen.getClass().getName().indexOf("Modchu_") > -1) {				Object master = Modchu_Main.getModchuCharacteristicObjectMaster(currentScreen);				if (master != null						&& master instanceof PFLM_GuiModelViewMaster) {					PFLM_GuiModelViewMaster guiModelViewMaster = (PFLM_GuiModelViewMaster) master;					guiModelViewMaster.drawEntitySetFlag = true;					entity = guiModelViewMaster.drawEntity;				} else {					entity = Modchu_AS.get(Modchu_AS.minecraftPlayer);				}			} else {				return;			}		} else {			entity = Modchu_AS.get(Modchu_AS.minecraftPlayer);		}		//if (debug) Modchu_Debug.mDebug("PFLM_Main keyboardEvent 1");		Object theWorld = Modchu_AS.get(Modchu_AS.minecraftWorld);		if (entity != null				&& theWorld != null); else {			if (entity != null); else Modchu_Debug.Debug1("keyboardEvent return thePlayer == null");			//if (theWorld != null); else Modchu_Debug.Debug1("keyboardEvent return theWorld == null");			return;		}		//if (debug) Modchu_Debug.mDebug("PFLM_Main keyboardEvent 2");		if (Modchu_Main.getMinecraftVersion() == 164) {			isRemote = !isRemote;			if (!isRemote) return;		}		Object keyBinding1 = keyBinding instanceof Object[] ? ((Object[]) keyBinding)[0] : keyBinding;		//if (debug) Modchu_Debug.mDebug("PFLM_Main keyboardEvent 3 keyBinding1="+keyBinding1);		String keyDescription = Modchu_AS.getString(Modchu_AS.keyBindingKeyDescription, keyBinding1);		if (keyDescription != null); else {			Modchu_Debug.Debug1("keyboardEvent return keyDescription == null");			return;		}		if (debug) Modchu_Debug.Debug1("keyboardEvent keyDescription="+keyDescription);		boolean isCtrlKeyDown = Modchu_AS.getBoolean(Modchu_AS.isCtrlKeyDown);		boolean isShiftKeyDown = Modchu_AS.getBoolean(Modchu_AS.isShiftKeyDown);		if (keyDescription.equals(PFLM_ConfigData.systemShortcutKeysGuiName)) {			if (!isPFLMModelsKeyDown()					&& !isCtrlKeyDown					&& !isShiftKeyDown) {				try {					Object gui = Modchu_Main.newModchuCharacteristicObject("Modchu_GuiModelView", PFLM_GuiMaster.class, theWorld);					if (debug) {						Modchu_Debug.lDebug1("keyboardEvent key.PFLMGui openGUI thePlayer="+entity);						Modchu_Debug.lDebug1("keyboardEvent key.PFLMGui openGUI Modchu_GuiModelView="+gui);					}					if (Modchu_Main.isForge) {						Modchu_Reflect.invokeMethod("FMLClientHandler", "displayGuiScreen", new Class[]{ Modchu_Reflect.loadClass("EntityPlayer"), Modchu_Reflect.loadClass("GuiScreen") }, Modchu_Reflect.invokeMethod("FMLClientHandler", "instance"), new Object[]{ entity, gui });					} else {						if (debug) {							Modchu_Debug.lDebug1("keyboardEvent key.PFLMGui ModLoader openGUI getMethod="+(Modchu_Reflect.getMethod("ModLoader", "openGUI", new Class[]{ Modchu_Reflect.loadClass("EntityPlayer"), Modchu_Reflect.loadClass("GuiScreen") })));							Modchu_Debug.lDebug1("keyboardEvent key.PFLMGui ModLoader openGUI GuiScreen="+Modchu_Reflect.loadClass("GuiScreen"));						}						Modchu_Reflect.invokeMethod("ModLoader", "openGUI", new Class[]{ Modchu_Reflect.loadClass("EntityPlayer"), Modchu_Reflect.loadClass("GuiScreen") }, new Object[]{ entity, gui });					}				} catch (Error e1) {					Modchu_Debug.lDebug("PFLM_Main keyboardEvent error !!", 2, e1);					e1.printStackTrace();				} catch (Exception e) {					Modchu_Debug.lDebug("PFLM_Main keyboardEvent Exception !!", 2, e);					e.printStackTrace();				}			}			return;		}		if (keyDescription.equals(PFLM_ConfigData.systemShortcutKeysSitName)) {			Modchu_Debug.mDebug("keyboardEvent "+PFLM_ConfigData.systemShortcutKeysSitName);			if (!isPFLMModelsKeyDown()					&& !isCtrlKeyDown					&& !isShiftKeyDown					&& keySitLockCount < 1					) {				float moveForward = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseMoveForward, entity);				float moveStrafing = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseMoveStrafing, entity);				float f = moveForward * moveForward + moveStrafing * moveStrafing;				//if (debug) Modchu_Debug.mdDebug("-----key.Sit f="+f);				if (debug) Modchu_Debug.mDebug("-----"+PFLM_ConfigData.systemShortcutKeysSitName+" s");				//if (debug) Modchu_Debug.mDebug("key.Sit entityplayersp.isRiding()="+entityplayersp.isRiding());				if (Modchu_AS.getBoolean(Modchu_AS.minecraftInGameHasFocus)						&& f < 0.20000000000000001D						&& !Modchu_AS.getBoolean(Modchu_AS.entityLivingBaseIsJumping, entity)) {					boolean b = getIsSitting(entity);					if (debug) Modchu_Debug.mDebug("key.Sit 1 getIsSitting()="+getIsSitting(entity));					setIsSitting(entity, !b);					setIsSleeping(entity, false);					int i = b ? 60 : 0;					setTempResetCheckCount(entity, i);					// TODO					keySitLockCount = 4;				} else {					if (debug) {						if (!Modchu_AS.getBoolean(Modchu_AS.minecraftInGameHasFocus)) Modchu_Debug.mDebug("key.Sit else !minecraftInGameHasFocus");						if (!(f < 0.20000000000000001D)) Modchu_Debug.mDebug("key.Sit else !f < 0.20000000000000001D");						if (!Modchu_AS.getBoolean(Modchu_AS.entityLivingBaseIsJumping, entity)) Modchu_Debug.mDebug("key.Sit else !entityLivingBaseIsJumping");						Modchu_Debug.mDebug("key.Sit end getIsSitting()="+getIsSitting(entity));						Modchu_Debug.mDebug("-----"+PFLM_ConfigData.systemShortcutKeysSitName+" e");					}				}			} else {				if (debug) Modchu_Debug.mDebug("else "+PFLM_ConfigData.systemShortcutKeysSitName+" keySitLockCount="+keySitLockCount);			}			return;		} else if (keyDescription.equals(PFLM_ConfigData.systemShortcutKeysLieDownName)) {			if (!isPFLMModelsKeyDown()					&& !isCtrlKeyDown					&& !isShiftKeyDown					&& keyLieDownLockCount < 1) {				if (debug) Modchu_Debug.mDebug(PFLM_ConfigData.systemShortcutKeysLieDownName+" 1");				boolean b = getIsSleeping(entity);				setIsSleeping(entity, !b);				setIsSitting(entity, false);				int i = b ? 60 : 0;				setTempResetCheckCount(entity, i);				keyLieDownLockCount = 4;				if (debug) Modchu_Debug.mDebug(PFLM_ConfigData.systemShortcutKeysLieDownName+" 2");			}			if (debug) Modchu_Debug.mDebug(PFLM_ConfigData.systemShortcutKeysLieDownName+" return");			return;		} else if (keyDescription.equals(PFLM_ConfigData.systemShortcutKeysModelsName)) {			if (isCtrlKeyDown) {				clearDataMap();				if (PFLM_ConfigData.changeMode == ModchuModel_IEntityCaps.skinMode_Random						&& Modchu_AS.getInt(Modchu_AS.minecraftGameSettingsThirdPersonView) == 0) Modchu_AS.set(Modchu_AS.minecraftGameSettingsSetThirdPersonView, 1);			}			return;		}		else if (keyDescription.startsWith(PFLM_ConfigData.systemShortcutKeysWaitName)) {			if (PFLM_ConfigData.waitTime == 0) {				if (debug) Modchu_Debug.mDebug("PFLMWait isJumping="+(Modchu_AS.getBoolean(Modchu_AS.entityLivingBaseIsJumping, entity)));				if (!Modchu_AS.getBoolean(Modchu_AS.entityLivingBaseIsJumping, entity)) {					isWait = !isWait;					//setIsWait(isWait);					if (debug) Modchu_Debug.mDebug("PFLMWait isWait="+isWait);				}			}		}		else if (keyDescription.startsWith(PFLM_ConfigData.shortcutKeysName)				&& PFLM_ConfigData.isPlayerForm) {			int i = Modchu_CastHelper.Int(keyDescription.substring(PFLM_ConfigData.shortcutKeysName.length(), keyDescription.length()));			boolean flag = true;			if (PFLM_ConfigData.shortcutKeysPFLMModelsUse[i]					&& !isPFLMModelsKeyDown()) flag = false;			if (PFLM_ConfigData.shortcutKeysCtrlUse[i]					&& !isCtrlKeyDown) flag = false;			if (PFLM_ConfigData.shortcutKeysShiftUse[i]					&& !isShiftKeyDown) flag = false;			if (PFLM_ConfigData.shortcutKeysUse[i]					&& flag) {				boolean clear = false;				//boolean textureReset = false;				switch (PFLM_ConfigData.shortcutKeysChangeMode[i]) {				case PFLM_GuiKeyControlsMaster.modeOthersSettingOffline:					PFLM_ConfigData.textureName = PFLM_ConfigData.shortcutKeysTextureName[i];					PFLM_ConfigData.textureArmorName = PFLM_ConfigData.shortcutKeysTextureArmorName[i];					PFLM_ConfigData.maidColor = PFLM_ConfigData.shortcutKeysMaidColor[i];					PFLM_ConfigData.modelScale = PFLM_ConfigData.shortcutKeysModelScale[i];					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeModelScale:					PFLM_ConfigData.modelScale = PFLM_ConfigData.shortcutKeysModelScale[i];					break;				case PFLM_GuiKeyControlsMaster.modePlayerOffline:					PFLM_ConfigData.changeMode = ModchuModel_IEntityCaps.skinMode_offline;					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modePlayerOnline:					PFLM_ConfigData.changeMode = ModchuModel_IEntityCaps.skinMode_online;					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeRandom:					PFLM_ConfigData.changeMode = ModchuModel_IEntityCaps.skinMode_Random;					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeSetModel:					PFLM_ConfigData.textureName = PFLM_ConfigData.shortcutKeysTextureName[i];					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeSetColor:					PFLM_ConfigData.maidColor = PFLM_ConfigData.shortcutKeysMaidColor[i];					clear = true;					//textureReset = true;					break;				case PFLM_GuiKeyControlsMaster.modeSetArmor:					PFLM_ConfigData.textureArmorName = PFLM_ConfigData.shortcutKeysTextureArmorName[i];					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeSetModelAndArmor:					PFLM_ConfigData.textureName = PFLM_ConfigData.shortcutKeysTextureName[i];					PFLM_ConfigData.textureArmorName = PFLM_ConfigData.shortcutKeysTextureArmorName[i];					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeSetModelAndColor:					PFLM_ConfigData.textureName = PFLM_ConfigData.shortcutKeysTextureName[i];					PFLM_ConfigData.maidColor = PFLM_ConfigData.shortcutKeysMaidColor[i];					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeSetColorAndArmor:					PFLM_ConfigData.textureArmorName = PFLM_ConfigData.shortcutKeysTextureArmorName[i];					PFLM_ConfigData.maidColor = PFLM_ConfigData.shortcutKeysMaidColor[i];					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeActionRelease:					ModchuModel_Main.setActionRequest(new boolean[]{ true, false });					break;				case PFLM_GuiKeyControlsMaster.modeCustomModelCfgReLoad:					customModelCfgReLoad(entity);					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeAllMultiModelActionModeChangePlus:					ModchuModel_ModelDataBase.setAllMultiModelActionModePlus();					setAllMultiModelActionRunInitFlag(entity, true);					if (PFLM_ConfigData.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "PFLM AllMultiModelActionMode = "+ModchuModel_ModelDataBase.getAllMultiModelActionModeName(ModchuModel_ModelDataBase.getAllMultiModelActionMode()));					break;				case PFLM_GuiKeyControlsMaster.modeAllMultiModelActionModeChangeMinus:					ModchuModel_ModelDataBase.setAllMultiModelActionModeMinus();					setAllMultiModelActionRunInitFlag(entity, true);					if (PFLM_ConfigData.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "PFLM AllMultiModelActionMode = "+ModchuModel_ModelDataBase.getAllMultiModelActionModeName(ModchuModel_ModelDataBase.getAllMultiModelActionMode()));					break;				case PFLM_GuiKeyControlsMaster.modeAllMultiModelActionPlus:					ModchuModel_ModelDataBase.setAllMultiModelActionPlus();					setAllMultiModelActionRunInitFlag(entity, true);					if (PFLM_ConfigData.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "PFLM AllMultiModelAction = "+ModchuModel_ModelDataBase.getAllMultiModelActionRequestNumber());					break;				case PFLM_GuiKeyControlsMaster.modeAllMultiModelActionMinus:					ModchuModel_ModelDataBase.setAllMultiModelActionMinus();					setAllMultiModelActionRunInitFlag(entity, true);					if (PFLM_ConfigData.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "PFLM AllMultiModelAction = "+ModchuModel_ModelDataBase.getAllMultiModelActionRequestNumber());					break;				case PFLM_GuiKeyControlsMaster.modeAllMultiModelActionRun:					ModchuModel_ModelDataBase.setAllMultiModelActionFlag(!ModchuModel_ModelDataBase.getAllMultiModelActionFlag());					break;				}				if (debug) Modchu_Debug.mDebug("keyboardEvent --------- action PFLM_ConfigData.shortcutKeysChangeMode["+i+"]="+PFLM_ConfigData.shortcutKeysChangeMode[i]);				if (PFLM_ConfigData.shortcutKeysChangeMode[i] >= PFLM_GuiKeyControlsMaster.modeAction						&& PFLM_ConfigData.shortcutKeysChangeMode[i] <= PFLM_GuiKeyControlsMaster.modeActionLast) {					int i1 = PFLM_ConfigData.shortcutKeysChangeMode[i] - PFLM_GuiKeyControlsMaster.modeAction + 1;					if (debug) Modchu_Debug.mDebug("keyboardEvent --------- action i1="+i1);					ModchuModel_Main.reverseActionRequest(i1);					if (debug) Modchu_Debug.mDebug("keyboardEvent --------- action end.");				}/*				if (PFLM_GuiMaster.partsSaveFlag) {					saveParamater();					PFLM_GuiMaster.partsSaveFlag = false;					PFLM_Config.clearCfgData();				}*/				if (clear) {					clearDataMap();					if (PFLM_ConfigData.changeMode == ModchuModel_IEntityCaps.skinMode_Random							&& Modchu_AS.getInt(Modchu_AS.minecraftGameSettingsThirdPersonView) == 0) Modchu_AS.set(Modchu_AS.minecraftGameSettingsSetThirdPersonView, 1);				}				//if (textureReset) PFLM_ModelDataMaster.instance.allModelTextureReset(thePlayer);				PFLM_ConfigData.shortcutKeysNumber = i;			}			return;		}	}	private static void setKeyCode(int i) {		keyCode = i;	}	public static boolean onTickInGUI(Object[] o) {		//Modchu_Debug.Debug("PFLM_Main onTickInGUI o="+o);		if (Modchu_Main.getMinecraftVersion() > 162) return false;		if (!saveShortcutKeysKeyNumberParamaterFlag) {			Object currentScreen = o != null && o.length > 2 ? o[2] : null;			//Modchu_Debug.Debug("PFLM_Main onTickInGUI currentScreen="+currentScreen);			if (currentScreen != null					&& Modchu_Reflect.loadClass("GuiControls").isInstance(currentScreen)) {				//Modchu_Debug.lDebug("PFLM_Main onTickInGUI GuiIngameMenu");				saveShortcutKeysKeyNumberParamaterFlag = true;			}		}//-@-125		//if(isSmartMoving && mc != null) PFLM_SmartMovingOther.TranslateIfNecessary((GameSettings)null);//@-@125/*//125delete//-@-110		if (!smartMovingAddRenderer				&& isPlayerForm				&& isSmartMoving				&& !Modchu_Main.isForge) {			PFLM_PlayerController.addRenderer();			smartMovingAddRenderer = true;			Modchu_Debug.lDebug("SmartMovingAddRenderer");		}//@-@110//-@-123		// GUI置き換え		if (currentScreen instanceof GuiSelectWorld				&& isAether				&& guiSelectWorldSwapCount < 10) {			// ワールドセレクトを置き換え			if (!(currentScreen instanceof PFLM_GuiSelectWorldAether)) {				guiSelectWorldSwapCount++;				try {					int ID = (Integer) Modchu_Reflect.getFieldObject(GuiMainMenu.class, "musicId", currentScreen);					minecraft.displayGuiScreen(new PFLM_GuiSelectWorldAether((GuiSelectWorld)currentScreen, ID));					Modchu_Debug.Debug("Swap GuiSelectWorldAether.");				} catch (Exception e) {					e.printStackTrace();				}				return true;			}		}//@-@123		// GUI置き換え		if (currentScreen instanceof GuiSelectWorld				&& !isAether				&& isSwapGuiSelectWorld				&& guiSelectWorldSwapCount < 10) {			// ワールドセレクトを置き換え			if (!(currentScreen instanceof PFLM_GuiSelectWorld)) {				guiSelectWorldSwapCount++;				minecraft.displayGuiScreen(new PFLM_GuiSelectWorld((GuiSelectWorld)currentScreen));				Modchu_Debug.Debug("Swap GuiSelectWorld.");//-@-b166				return true;//@-@b166				// b166deletereturn;			}		}*///125delete		return true;	}	public static boolean onTickInGame(byte type, Object... tickData) {		//Modchu_Debug.Debug("PFLM_Main onTickInGame type="+type);		if (Modchu_Main.getMinecraftVersion() < 164				&& saveShortcutKeysKeyNumberParamaterFlag) {			//Modchu_Debug.lDebug("PFLM_Main onTickInGame saveShortcutKeysKeyNumberParamater");			saveShortcutKeysKeyNumberParamater();			saveShortcutKeysKeyNumberParamaterFlag = false;		}		if (Modchu_Main.getMinecraftVersion() > 162				&& type != 2) return true;		sitSleepResetCheck(null);		if (Modchu_AS.getBoolean(Modchu_AS.isLANWorld)) {			if (!isMulti) isMulti = true;		} else if (Modchu_AS.getBoolean(Modchu_AS.isMuiti)) {			if (PFLM_ConfigData.multiAutochangeMode) {				if (PFLM_ConfigData.changeMode == ModchuModel_IEntityCaps.skinMode_offline						&& setMultiAutochangeMode) {					setMultiAutochangeMode = false;					PFLM_ConfigData.changeMode = ModchuModel_IEntityCaps.skinMode_online;					clearDataMap();				} else {					setMultiAutochangeMode = false;				}			}			if (!isMulti) isMulti = true;		} else {			if (isMulti) isMulti = false;		}		//Modchu_Debug.mDebug("isMulti="+isMulti);		Object theWorld = Modchu_AS.get(Modchu_AS.minecraftWorld);		if (theWorld == null				&& !setMultiAutochangeMode) {			//Modchu_Debug.mDebug("onTickInGame minecraft.theWorld == null");			setMultiAutochangeMode = true;		}		if (theWorld != null				&& !initOnTickFlag) {			Object debugRender = Modchu_AS.get(Modchu_AS.renderManagerGetEntityRenderObject, Modchu_AS.get(Modchu_AS.minecraftPlayer));			Modchu_Debug.lDebug1("PFLM_Main onTickInGame debugRender="+debugRender);			if (!renderPlayerInstance.getClass().isInstance(debugRender)) {				Modchu_Debug.lDebug("PFLM_Main onTickInGame debugRender check error !! debugRender="+debugRender);				addRendererFlag = false;				addRenderer(null);				debugRender = Modchu_AS.get(Modchu_AS.renderManagerGetEntityRenderObject, Modchu_AS.get(Modchu_AS.minecraftPlayer));				Modchu_Debug.lDebug("PFLM_Main onTickInGame debugRender recheck debugRender="+debugRender);			} else {				Modchu_Debug.lDebug("PFLM_Main onTickInGame debugRender check ok.");			}			if (!itemRendererReplaceFlag					&& Modchu_Main.itemRendererClass != null) itemRendererReplace();			initOnTickFlag = true;		}		//Modchu_Debug.mDebug("PFLM_Main onTickInGame minecraftEntityRendererItemRenderer="+Modchu_AS.get(Modchu_AS.minecraftEntityRendererItemRenderer)+" renderManagerItemRenderer="+Modchu_AS.get(Modchu_AS.renderManagerItemRenderer));		//Modchu_Debug.mdDebug("PFLM_Main onTickInGame Keyboard.getEventKeyState()="+Keyboard.getEventKeyState());		//Modchu_Debug.mdDebug("PFLM_Main onTickInGame Mouse.getEventButtonState()="+Mouse.getEventButtonState(), 1);		if (!Keyboard.getEventKeyState()				&& !Mouse.getEventButtonState()) {			//Modchu_Debug.mDebug("PFLM_Main onTickInGame t");			//if (!isReleasekey) isReleasekey = true;			if (keySitLockCount > 0) {				Modchu_Debug.mDebug("PFLM_Main onTickInGame keySitLockCount--");				keySitLockCount--;			}			if (keyLieDownLockCount > 0) {				Modchu_Debug.mDebug("PFLM_Main onTickInGame keyLieDownLockCount--");				keyLieDownLockCount--;			}		}		//else if (isReleasekey) isReleasekey = false;		return true;	}	public static boolean instanceCheck(Class c, Object o) {		boolean b = true;		if (o != null) {			if(!c.isInstance(o)) {				b = false;			}		} else {			b = false;		}		return b;	}	public static void serverConnect(Object netClientHandler) {		clientConnect(netClientHandler);		return;	}	public static void clientConnect(Object netClientHandler) {		// TODO 不具合封印		entityReplaceFlag = false;		if (Modchu_Main.getMinecraftVersion() < 130				| !entityReplaceFlag) return;		//Modchu_Debug.mDebug("clientConnect");		Object mc = Modchu_AS.get(Modchu_AS.minecraftGetMinecraft);		try {			netClientHandler = Modchu_Reflect.newInstance("NetClientHandler", new Class[]{ Modchu_Reflect.loadClass("Minecraft"), Modchu_Reflect.loadClass("IntegratedServer") }, new Object[]{ mc, Modchu_AS.get(Modchu_AS.minecraftGetIntegratedServer) });		} catch (Exception e) {		}		netclienthandler = netClientHandler;		double x = 0.0D;		double y = 0.0D;		double z = 0.0D;		boolean setPositionFlag = false;		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftPlayer);		Modchu_Debug.Debug("PFLM_Main clientConnect thePlayer="+thePlayer);/*		if (thePlayer != null) {			setPositionFlag = true;			x = Modchu_AS.getDouble(Modchu_AS.entityPosX, thePlayer);			y = Modchu_AS.getDouble(Modchu_AS.entityPosY, thePlayer);			z = Modchu_AS.getDouble(Modchu_AS.entityPosZ, thePlayer);		}*/		Object tempThePlayer = Modchu_AS.get(Modchu_AS.minecraftPlayer);		//Modchu_Debug.Debug("get x="+x+" y="+y+" z="+z);		Object playerController = null;		Object theWorld = Modchu_AS.get(Modchu_AS.minecraftWorld);		try {			Object enumGameType = Modchu_AS.get(Modchu_AS.worldGetWorldInfoGetGameType);			//int var2 = 0;			//if (thePlayer != null) var2 = thePlayer.hashCode();			Class[] types = { Class.class, Object.class, Object.class };			if(isSSP) {				if (enumGameType != null) {					//Modchu_Debug.Debug("enumGameType="+enumGameType);					if (enumGameType == Modchu_Reflect.getEnum("EnumGameType", "CREATIVE")) {						playerController = Modchu_Reflect.newInstance(Modchu_Main.getModchuCharacteristicClass("Modchu_PlayerController"), types, new Object[]{ Modchu_Reflect.loadClass("modchu.pflm.PFLM_PlayerControllerCreativeMaster2"), mc, netclienthandler });						Modchu_Debug.lDebug("Replace PFLM_PlayerControllerCreative2.");					} else {						playerController = Modchu_Reflect.newInstance(Modchu_Main.getModchuCharacteristicClass("Modchu_PlayerController"), types, new Object[]{ Modchu_Reflect.loadClass("modchu.pflm.PFLM_PlayerControllerMaster2"), mc, netclienthandler });						Modchu_Debug.lDebug("Replace PFLM_PlayerController2.");					}				} else {					playerController = Modchu_Reflect.newInstance(Modchu_Main.getModchuCharacteristicClass("Modchu_PlayerController"), types, new Object[]{ Modchu_Reflect.loadClass("modchu.pflm.PFLM_PlayerControllerMaster2"), mc, netclienthandler });					Modchu_Debug.lDebug("Replace PFLM_PlayerController2.");				}			} else {				playerController = Modchu_Reflect.newInstance(Modchu_Main.getModchuCharacteristicClass("Modchu_PlayerController"), types, new Object[]{ PFLM_PlayerControllerMaster.class, mc, netclienthandler });				Modchu_Debug.lDebug("Replace PFLM_PlayerController.");			}			if (playerController != null) Modchu_AS.set(Modchu_AS.minecraftPlayerController, playerController);			else {				Modchu_Debug.lDebug("Replace playerController == null error !!");				return;			}			if (enumGameType != null) {				Modchu_Debug.mDebug("enumGameType="+enumGameType);				Modchu_AS.set(Modchu_AS.playerControllerSetGameType, enumGameType);			}			Modchu_AS.set(Modchu_AS.minecraftSetDimensionAndSpawnPlayer);			if(isSSP					&& enumGameType != null					&& enumGameType == Modchu_Reflect.getEnum("EnumGameType", "CREATIVE")) {				Modchu_AS.set(Modchu_AS.playerControllerMPSetPlayerCapabilities);				Modchu_Reflect.invokeMethod("modchu.pflm.PFLM_PlayerControllerCreativeMaster2", "setInCreativeMode", new Class[]{boolean.class}, playerController, new Object[]{ true });				Modchu_Reflect.invokeMethod(Modchu_AS.get(Modchu_AS.minecraftPlayer).getClass(), "copyPlayer", new Class[]{Modchu_Reflect.loadClass("EntityPlayer")}, Modchu_AS.get(Modchu_AS.minecraftPlayer), new Object[]{ tempThePlayer });				//Modchu_Debug.Debug("isSSP CREATIVE set");			}/*//@/			if(!isSmartMoving					&& isModelSize					&& !PFLM_ConfigData.isPlayerAPIDebug) {				PFLM_PlayerBaseServer.registerPlayerBase();				Modchu_Debug.Debug("PlayerAPI Server register.");			}*///@/			int dimension = Modchu_AS.getInt(Modchu_AS.entityDimension, thePlayer);			//theWorld.setSpawnLocation();			//theWorld.removeAllEntities();			int entityId = -1;			String var3 = null;			if (thePlayer != null) {				entityId = Modchu_AS.getInt(Modchu_AS.entityEntityID, thePlayer);				Modchu_AS.set(Modchu_AS.worldRemoveEntity, theWorld, thePlayer);				var3 = Modchu_AS.getString(Modchu_AS.entityClientPlayerMPFunc_142021_k, thePlayer);				//Modchu_AS.set(Modchu_AS.worldSetEntityDead, thePlayer);			}			Modchu_AS.set(Modchu_AS.minecraftRenderViewEntity, (Object) null);			thePlayer = Modchu_AS.get(Modchu_AS.playerControllerMPCreatePlayer, Modchu_AS.get(Modchu_AS.minecraftPlayerController));			Modchu_AS.set(Modchu_AS.entityDimension, thePlayer, dimension);			Modchu_AS.set(Modchu_AS.minecraftRenderViewEntity, thePlayer);			Modchu_AS.set(Modchu_AS.entityPlayerPreparePlayerToSpawn, thePlayer);			Modchu_AS.set(Modchu_AS.entityClientPlayerMPFunc_142020_c, thePlayer, var3);			if (Modchu_AS.getBoolean(Modchu_AS.worldSpawnEntity, thePlayer)) {				Modchu_AS.set(Modchu_AS.playerControllerMPFlipPlayer, playerController, thePlayer);				Object gameSettings = Modchu_AS.get(Modchu_AS.minecraftGameSettings);				Modchu_AS.set(Modchu_AS.entityPlayerSPMovementInput, thePlayer, Modchu_Reflect.newInstance("MovementInputFromOptions", new Class[]{ gameSettings.getClass() }, new Object[]{ gameSettings }));				if (entityId > 0) Modchu_AS.set(Modchu_AS.entityEntityID, thePlayer, entityId);				Modchu_AS.set(Modchu_AS.playerControllerMPSetPlayerCapabilities, playerController, thePlayer);				Modchu_AS.set(Modchu_AS.netClientHandlerHandleClientCommand, Modchu_AS.get(Modchu_AS.entityClientPlayerMPSendQueue, thePlayer), Modchu_Reflect.newInstance("Packet205ClientCommand", new Class[]{ int.class }, new Object[]{ 1 }));			}			Modchu_Debug.Debug("PFLM_Main clientConnect 1");			//MinecraftServer.getServer().worldServers[0].playerEntities.get(0)			Object server = Modchu_AS.get(Modchu_AS.minecraftServerGetServer);			Object[] worldServers = Modchu_AS.getObjectArray(Modchu_AS.minecraftServerGetServerWorldServers, server);			List playerEntities = Modchu_AS.getList(Modchu_AS.worldPlayerEntities, worldServers[dimension]);			String name = Modchu_AS.getString(Modchu_AS.userName, thePlayer);			Modchu_Debug.Debug("PFLM_Main clientConnect 2 thePlayer="+thePlayer);			Modchu_Debug.Debug("PFLM_Main clientConnect 3 name="+name);			Object entityPlayerMP = null;			int i = 0;			for (i = 0; i < playerEntities.size(); i++) {				entityPlayerMP = playerEntities.get(i);				String name2 = Modchu_AS.getString(Modchu_AS.userName, entityPlayerMP);				Modchu_Debug.Debug("PFLM_Main clientConnect 4 name2="+name2);				if (name.equals(name2)) {					break;				}			}			if (entityPlayerMP != null) {				Modchu_AS.getList(Modchu_AS.worldPlayerEntities, worldServers[dimension]).remove(i);				Object configurationManager = Modchu_AS.get(Modchu_AS.minecraftServerGetConfigurationManager, server);				Object entityPlayerMP2 = Modchu_AS.get(Modchu_AS.serverConfigurationManagerRespawnPlayer, configurationManager, entityPlayerMP, dimension, true);				Modchu_Debug.Debug("PFLM_Main clientConnect 5 entityPlayerMP2="+entityPlayerMP2);				//Modchu_AS.set(Modchu_AS.entitySetPosition, entityPlayerMP2, x, y, z);				setPositionFlag = true;				x = Modchu_AS.getDouble(Modchu_AS.entityPosX, entityPlayerMP2);				y = Modchu_AS.getDouble(Modchu_AS.entityPosY, entityPlayerMP2);				z = Modchu_AS.getDouble(Modchu_AS.entityPosZ, entityPlayerMP2);			}			if (setPositionFlag) {				//double d = (double)(1.8F - getHeight());				//if (d < 0) d = -d + 1.0D;				//d = d + 0.5D;				//Modchu_Debug.mDebug("setPositionFlag getHeight()="+getHeight());				//if (PFLM_ConfigData.isModelSize) {					//setPosition(x, y, z);					setPositionCorrection(thePlayer, 0.0D, 0.5D, 0.0D);				//}				//thePlayer.setPositionAndRotation2(x, y, z, thePlayer.rotationYaw, thePlayer.rotationPitch, 3);				//Modchu_Debug.mDebug("setPositionAndRotation2 x="+x+" y="+y+" z="+z);			}			try {				Modchu_AS.set(Modchu_AS.minecraftMyNetworkManager, Modchu_AS.get(Modchu_AS.netClientHandlerGetNetManager, netClientHandler));			} catch (Exception e) {			}/*        try        {            NetClientHandler var10 = new NetClientHandler(this, this.theIntegratedServer);            this.myNetworkManager = var10.getNetManager();        }        catch (IOException var8)        {            this.displayCrashReport(this.addGraphicsAndWorldToCrashReport(new CrashReport("Connecting to integrated server", var8)));        } */			clearDataMap();			Modchu_Debug.Debug("PFLM_Main clientConnect end.");		} catch (Exception e) {			e.printStackTrace();		}	}	public static void playerControllerReplace() {		Object mc = Modchu_AS.get(Modchu_AS.minecraftGetMinecraft);		Object theWorld = Modchu_AS.get(Modchu_AS.minecraftWorld);		if (theWorld == null				| Modchu_Reflect.getFieldObject("World", "field_4209_q", "worldProvider", theWorld) == null) return;		double x = 0.0D;		double y = 0.0D;		double z = 0.0D;		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftPlayer);		boolean setPositionFlag = false;		if (thePlayer != null) {			setPositionFlag = true;			x = Modchu_AS.getDouble(Modchu_AS.entityPosX, thePlayer);			y = Modchu_AS.getDouble(Modchu_AS.entityPosY, thePlayer);			z = Modchu_AS.getDouble(Modchu_AS.entityPosZ, thePlayer);		}		Object tempThePlayer = Modchu_AS.get(Modchu_AS.minecraftPlayer);		//Modchu_Debug.Debug("playerControllerReplace get x="+x+" y+"+y+" z="+z);		int var10 = 0;		if (thePlayer != null) {			var10 = thePlayer.hashCode();			Modchu_AS.set(Modchu_AS.worldSetEntityDead);		}		//Modchu_Debug.Debug("x="+minecraft.thePlayer.posX+" y="+minecraft.thePlayer.posY+" z="+minecraft.thePlayer.posZ);		Object playerController = Modchu_Reflect.getFieldObject("Minecraft", "field_71442_b", "playerController", mc); 		if (Modchu_Main.getMinecraftVersion() > 79 				&& !(Boolean) Modchu_Reflect.getFieldObject("PlayerController", "field_1064_b", "isInTestMode", playerController) 				| Modchu_Main.getMinecraftVersion() < 80) {			Modchu_Debug.lDebug("Replace PFLM_PlayerController.");			Modchu_Reflect.setFieldObject("Minecraft", "field_71442_b", "playerController", mc, Modchu_Reflect.newInstance("PFLM_PlayerController", new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc }));		} else {			Modchu_Debug.lDebug("Replace PFLM_PlayerControllerCreative.");			Modchu_Reflect.setFieldObject("Minecraft", "field_71442_b", "playerController", mc, Modchu_Reflect.newInstance("PFLM_PlayerControllerCreative", new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc }));		} 		Modchu_AS.set(Modchu_AS.entitySetDead); 		Modchu_AS.set(Modchu_AS.minecraftPlayer, Modchu_AS.get(Modchu_AS.playerControllerMPCreatePlayer)); 		Modchu_AS.set(Modchu_AS.minecraftRenderViewEntity, (Object)null);		if (thePlayer != null				&& tempThePlayer != null) {			//if (isPlayerAPI					//&& !PFLM_ConfigData.isPlayerAPIDebug) {				//Modchu_Reflect.invokeMethod(thePlayer.getClass(), "copyPlayer", new Class[]{Modchu_Reflect.loadClass("EntityPlayer")}, Modchu_AS.get(Modchu_AS.minecraftThePlayer), new Object[]{ tempThePlayer });			//} else {				Modchu_Reflect.invokeMethod(thePlayer.getClass(), "copyPlayer", new Class[]{Modchu_Reflect.loadClass("EntityPlayer")}, Modchu_AS.get(Modchu_AS.minecraftPlayer), new Object[]{ tempThePlayer });			//}		}		//minecraft.thePlayer.dimension = par2;		Modchu_AS.set(Modchu_AS.minecraftRenderViewEntity, thePlayer);		//minecraft.thePlayer.preparePlayerToSpawn();		//minecraft.thePlayer.setLocationAndAngles((double)((float)minecraft.thePlayer.posX + 0.5F), (double)((float)minecraft.thePlayer.posY + 0.1F), (double)((float)minecraft.thePlayer.posZ + 0.5F), 0.0F, 0.0F);		Modchu_AS.set(Modchu_AS.playerControllerMPFlipPlayer);		Modchu_AS.set(Modchu_AS.worldSpawnPlayerWithLoadedChunks);		Modchu_AS.set(Modchu_AS.entityPlayerSPMovementInput);		Modchu_AS.set(Modchu_AS.entityEntityID, thePlayer, var10);		if(Modchu_Main.getMinecraftVersion() > 79 				&& Modchu_Main.getMinecraftVersion() < 130) {			Modchu_AS.set(Modchu_AS.entityPlayerSPFunc_6420_o);			if((Boolean) Modchu_Reflect.invokeMethod("PlayerController", "func_78758_h", "isInCreativeMode", playerController)) {				//&& (Boolean) Modchu_Reflect.invokeMethod(Modchu_Main.getMinecraftVersion() > 129 ? "PlayerControllerMP" : "PlayerController", "func_78758_h", "isInCreativeMode", playerController)) {				Modchu_AS.set(Modchu_AS.playerControllerFunc_6473_b);			}		}		//if (isPlayerAPI				//&& !PFLM_ConfigData.isPlayerAPIDebug) {			//if (!(Boolean) Modchu_Reflect.getFieldObject("PFLM_PlayerBase", "initFlag", thePlayer)) Modchu_Reflect.invokeMethod("PFLM_PlayerBase", "init", thePlayer);		//} else {			if (!(Boolean) Modchu_Reflect.getFieldObject(thePlayer.getClass(), "initFlag", thePlayer)) Modchu_Reflect.invokeMethod(thePlayer.getClass(), "init", thePlayer);		//}		setPosition(thePlayer, x, y, z);	}	public static void mushroomConfusion(Object entityplayer, PFLM_ModelData modelData) {		Object itemstack = Modchu_AS.get(Modchu_AS.entityPlayerInventoryGetStackInSlot, entityplayer, 9);		boolean mushroomConfusionFlag = false;		if (itemstack != null) {			Object block = Modchu_AS.get(Modchu_AS.getBlock, itemstack);			if (Modchu_Reflect.loadClass("BlockMushroom").isInstance(block)) {				Object itemstack2 = Modchu_AS.get(Modchu_AS.entityPlayerInventoryGetStackInSlot, entityplayer, 10);				if (itemstack2 != null) {					Object item2 = Modchu_AS.get(Modchu_AS.itemStackGetItem, itemstack2);					Object dyePowder = Modchu_AS.get(Modchu_AS.getItem, "dye");					if (item2 == dyePowder) {						mushroomConfusionFlag = true;						if (Modchu_Main.getMinecraftVersion() < 80) modelData.setCapsValue(modelData.caps_freeVariable, "mushroomConfusionResetFlag", true);						modelData.setCapsValue(modelData.caps_mushroomConfusionCount, modelData.getCapsValueInt(modelData.caps_mushroomConfusionCount) - 1);						if(modelData.getCapsValueInt(modelData.caps_mushroomConfusionCount) < 0) {							modelData.setCapsValue(modelData.caps_mushroomConfusionCount, 500 + (100 * rnd.nextInt(10)));							modelData.setCapsValue(modelData.caps_mushroomConfusionType, rnd.nextInt(modelData.getCapsValueInt(modelData.caps_mushroomConfusionTypeMax)));						}						mushroomConfusion(entityplayer, modelData, modelData.getCapsValueInt(modelData.caps_mushroomConfusionType));						//Modchu_Debug.dDebug("modelData.mushroomConfusionCount="+modelData.getCapsValueInt(modelData.caps_mushroomConfusionCount));						//Modchu_Debug.dDebug("modelData.mushroomConfusionType="+modelData.mushroomConfusionType);					}				}			}		}		if (Modchu_Main.getMinecraftVersion() < 80) {			if (mushroomConfusionFlag					&& modelData.getCapsValueBoolean(modelData.caps_freeVariable, "mushroomConfusionResetFlag")) {				modelData.setCapsValue(modelData.caps_freeVariable, "mushroomConfusionResetFlag", true);				mushroomConfusionFlag = false;				Modchu_AS.set(Modchu_AS.gameSettingsKeyBindForward, modelData.getCapsValue(modelData.caps_freeVariable, "defaultKeyBindForward"));				Modchu_AS.set(Modchu_AS.gameSettingsKeyBindForward, modelData.getCapsValue(modelData.caps_freeVariable, "defaultKeyBindBack"));				Modchu_AS.set(Modchu_AS.gameSettingsKeyBindForward, modelData.getCapsValue(modelData.caps_freeVariable, "defaultKeyBindLeft"));				Modchu_AS.set(Modchu_AS.gameSettingsKeyBindForward, modelData.getCapsValue(modelData.caps_freeVariable, "defaultKeyBindRight"));			}		}	}	private static void mushroomConfusion(Object entityplayer, PFLM_ModelData modelData, int i) {		switch (i) {		case 0:			mushroomConfusion0(entityplayer, modelData);			break;		case 1:		case 2:		case 3:		case 4:			mushroomConfusion1(entityplayer, modelData);			break;		}	}	private static void mushroomConfusion0(Object entityplayer, PFLM_ModelData modelData) {		double motionX = Modchu_AS.getDouble(Modchu_AS.entityMotionX, entityplayer);		double motionY = Modchu_AS.getDouble(Modchu_AS.entityMotionY, entityplayer);		double motionZ = Modchu_AS.getDouble(Modchu_AS.entityMotionZ, entityplayer);		if (modelData.getCapsValueBoolean(modelData.caps_motionResetFlag)) {			Object keyBindForward = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindForward);			Object keyBindBack = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindBack);			Object keyBindLeft = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindLeft);			Object keyBindRight = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindRight);			if (motionX > 0.0D					| motionZ > 0.0D) {				if (Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, keyBindForward)						| Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, keyBindBack)						| Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, keyBindLeft)						| Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, keyBindRight)) {					//Modchu_Debug.mDebug("pressed");					modelData.setCapsValue(modelData.caps_motionResetFlag, false);					modelData.setCapsValue(modelData.caps_mushroomConfusionLeft, false);					if(motionX > 0.001D) {						modelData.setCapsValue(modelData.caps_mushroomConfusionLeft, true);						//Modchu_Debug.mDebug("mushroomConfusionLeft");					}					modelData.setCapsValue(modelData.caps_mushroomConfusionRight, false);					if(motionX < -0.001D) {						modelData.setCapsValue(modelData.caps_mushroomConfusionRight, true);						//Modchu_Debug.mDebug("mushroomConfusionRight");					}					modelData.setCapsValue(modelData.caps_mushroomConfusionFront, false);					if(motionZ > 0.0001D) {						modelData.setCapsValue(modelData.caps_mushroomConfusionFront, true);						//Modchu_Debug.mDebug("mushroomConfusionFront");					}					modelData.setCapsValue(modelData.caps_mushroomConfusionBack, false);					if(motionZ < -0.001D) {						modelData.setCapsValue(modelData.caps_mushroomConfusionBack, true);						//Modchu_Debug.mDebug("mushroomConfusionBack");					}					modelData.setCapsValue(modelData.caps_motionSetFlag, true);				}			}		} else {			float moveForward = (Float) Modchu_Reflect.getFieldObject(entityplayer.getClass(), "field_70701_bs", "moveForward", entityplayer);			float moveStrafing = (Float) Modchu_Reflect.getFieldObject(entityplayer.getClass(), "field_70702_br", "moveStrafing", entityplayer);			float f = moveForward * moveForward + moveStrafing * moveStrafing;			//Modchu_Debug.mDebug("f="+f);			if (!Modchu_AS.getBoolean(Modchu_AS.entityIsRiding, entityplayer)					&& Modchu_AS.getBoolean(Modchu_AS.minecraftInGameHasFocus)					&& f < 0.10000000000000001D					&& !(Boolean) Modchu_Reflect.getFieldObject("EntityLivingBase", "field_70703_bu", "isJumping", entityplayer)) {				//Modchu_Debug.mDebug("motionResetFlag = true");				modelData.setCapsValue(modelData.caps_motionResetFlag, true);				Modchu_AS.set(Modchu_AS.entityMotionX, entityplayer, 0.0D);				Modchu_AS.set(Modchu_AS.entityMotionZ, entityplayer, 0.0D);				modelData.setCapsValue(modelData.caps_motionSetFlag, false);			} else {				if (modelData.getCapsValueBoolean(modelData.caps_motionSetFlag)) {					if (modelData.getCapsValueBoolean(modelData.caps_mushroomConfusionLeft)) {						if (motionX > 0.0D) Modchu_AS.set(Modchu_AS.entityMotionX, entityplayer, -motionX - 0.1D);						//Modchu_Debug.mDebug("mushroomConfusionLeft "+motionX);					}					if (modelData.getCapsValueBoolean(modelData.caps_mushroomConfusionRight)) {						if (motionX < 0.0D) Modchu_AS.set(Modchu_AS.entityMotionX, entityplayer, -motionX + 0.4D);						//Modchu_Debug.mDebug("mushroomConfusionRight "+motionX);					}					if (modelData.getCapsValueBoolean(modelData.caps_mushroomConfusionFront)) {						if (motionZ > 0.0D) Modchu_AS.set(Modchu_AS.entityMotionZ, entityplayer, -motionZ - 0.1D);						//Modchu_Debug.mDebug("mushroomConfusionFront "+motionZ);					}					if (modelData.getCapsValueBoolean(modelData.caps_mushroomConfusionBack)) {						if (motionZ < 0.0D) Modchu_AS.set(Modchu_AS.entityMotionZ, entityplayer, -motionZ + 0.4D);						//Modchu_Debug.mDebug("mushroomConfusionBack "+motionZ);					}				}			}		}	}	private static void mushroomConfusion1(Object entityplayer, PFLM_ModelData modelData) {		boolean forward;		boolean back;		boolean left;		boolean right;		Object key1 = null;		Object key2 = null;		Object key3 = null;		Object key4 = null;		Object keyBindForward = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindForward);		Object keyBindBack = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindBack);		Object keyBindLeft = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindLeft);		Object keyBindRight = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindRight);		if (Modchu_Main.getMinecraftVersion() > 79				&& modelData.getCapsValue(modelData.caps_freeVariable, "defaultKeyBindForward") == null) {			modelData.setCapsValue(modelData.caps_freeVariable, "defaultKeyBindForward", keyBindForward);			modelData.setCapsValue(modelData.caps_freeVariable, "defaultKeyBindBack", keyBindBack);			modelData.setCapsValue(modelData.caps_freeVariable, "defaultKeyBindLeft", keyBindLeft);			modelData.setCapsValue(modelData.caps_freeVariable, "defaultKeyBindRight", keyBindRight);		}		switch (modelData.getCapsValueInt(modelData.caps_mushroomConfusionType)) {		case 1:			key1 = keyBindForward;			key2 = keyBindBack;			key3 = keyBindLeft;			key4 = keyBindRight;			break;		case 2:			key2 = keyBindForward;			key3 = keyBindBack;			key4 = keyBindLeft;			key1 = keyBindRight;			break;		case 3:			key2 = keyBindForward;			key3 = keyBindBack;			key1 = keyBindLeft;			key4 = keyBindRight;			break;		case 4:			key4 = keyBindForward;			key1 = keyBindBack;			key2 = keyBindLeft;			key3 = keyBindRight;			break;		}		if (Modchu_Main.getMinecraftVersion() > 79) {			if (modelData.getCapsValueBoolean(modelData.caps_mushroomBack)) {				back = Keyboard.isKeyDown(Modchu_AS.getInt(Modchu_AS.keyBindingKeyCode, key2));				if (!back) modelData.setCapsValue(modelData.caps_mushroomBack, false);				Modchu_AS.set(Modchu_AS.keyBindingPressed, key2, false);			} else {				back = Keyboard.isKeyDown(Modchu_AS.getInt(Modchu_AS.keyBindingKeyCode, key2));				Modchu_AS.set(Modchu_AS.keyBindingPressed, key2, back);			}			if (modelData.getCapsValueBoolean(modelData.caps_mushroomForward)) {				forward = Keyboard.isKeyDown(Modchu_AS.getInt(Modchu_AS.keyBindingKeyCode, key1));				if (!forward) modelData.setCapsValue(modelData.caps_mushroomForward, false);				Modchu_AS.set(Modchu_AS.keyBindingPressed, key1, false);			} else {				forward = Keyboard.isKeyDown(Modchu_AS.getInt(Modchu_AS.keyBindingKeyCode, key2));				Modchu_AS.set(Modchu_AS.keyBindingPressed, key1, forward);			}			if (modelData.getCapsValueBoolean(modelData.caps_mushroomLeft)) {				left = Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, key3);				if (!forward) modelData.setCapsValue(modelData.caps_mushroomLeft, false);				Modchu_AS.set(Modchu_AS.keyBindingPressed, key3, false);			} else {				left = Keyboard.isKeyDown(Modchu_AS.getInt(Modchu_AS.keyBindingKeyCode, key4));				Modchu_AS.set(Modchu_AS.keyBindingPressed, key3, left);			}			if (modelData.getCapsValueBoolean(modelData.caps_mushroomRight)) {				right = Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, key4);				if (!forward) modelData.setCapsValue(modelData.caps_mushroomRight, false);				Modchu_AS.set(Modchu_AS.keyBindingPressed, key4, false);			} else {				right = Keyboard.isKeyDown(Modchu_AS.getInt(Modchu_AS.keyBindingKeyCode, key3));				Modchu_AS.set(Modchu_AS.keyBindingPressed, key4, right);			}			Modchu_AS.set(Modchu_AS.keyBindingPressed, key1, back);			Modchu_AS.set(Modchu_AS.keyBindingPressed, key2, forward);			Modchu_AS.set(Modchu_AS.keyBindingPressed, key3, right);			Modchu_AS.set(Modchu_AS.keyBindingPressed, key4, left);			//Modchu_Debug.dDebug("keyBindForward="+key1.pressed);			//Modchu_Debug.dDebug("keyBindBack="+key2.pressed, 1);			//Modchu_Debug.dDebug("forward="+forward, 2);			//Modchu_Debug.dDebug("back="+back, 3);			if (Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, key1)					&& Modchu_AS.getInt(Modchu_AS.keyBindingPressTime, key2) > 0) {				modelData.setCapsValue(modelData.caps_mushroomBack, true);				modelData.setCapsValue(modelData.caps_mushroomForward, false);				return;			}			modelData.setCapsValue(modelData.caps_mushroomBack, false);			if (Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, key2)					&& Modchu_AS.getInt(Modchu_AS.keyBindingPressTime, key1) > 0) {				modelData.setCapsValue(modelData.caps_mushroomForward, true);				modelData.setCapsValue(modelData.caps_mushroomBack, false);				return;			}			modelData.setCapsValue(modelData.caps_mushroomForward, false);			if (Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, key3)					&& Modchu_AS.getInt(Modchu_AS.keyBindingPressTime, key4) > 0) {				modelData.setCapsValue(modelData.caps_mushroomRight, true);				modelData.setCapsValue(modelData.caps_mushroomLeft, false);				return;			}			modelData.setCapsValue(modelData.caps_mushroomRight, false);			if (Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, key4)					&& Modchu_AS.getInt(Modchu_AS.keyBindingPressTime, key3) > 0) {				modelData.setCapsValue(modelData.caps_mushroomLeft, true);				modelData.setCapsValue(modelData.caps_mushroomRight, false);				return;			}			modelData.setCapsValue(modelData.caps_mushroomLeft, false);		} else {			Modchu_AS.set(Modchu_AS.gameSettingsKeyBindForward, key1);			Modchu_AS.set(Modchu_AS.gameSettingsKeyBindBack, key2);			Modchu_AS.set(Modchu_AS.gameSettingsKeyBindRight, key3);			Modchu_AS.set(Modchu_AS.gameSettingsKeyBindLeft, key4);		}	}	public static Object checkEntity(Object entity) {		if (entity != null); else {			entity = Modchu_AS.get(Modchu_AS.minecraftPlayer);			if (entity != null); else {				//String ss = "PFLM_Main getPlayerData thePlayer == null error !!";				//Modchu_Debug.mDebug(ss);				//Modchu_Main.setRuntimeException(ss);				return null;			}		}		return entity;	}	public static void changeModel(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) data.setCapsValue(data.caps_changeModel, entity);		if (entityReplaceFlag				&& data != null				&& data.getCapsValueBoolean(data.caps_isPlayer)) {			if (isPlayerAPI					&& !PFLM_ConfigData.isPlayerAPIDebug					&& entity != null) Modchu_Reflect.invokeMethod(entity.getClass(), "init", entity);			else if (!isPlayerAPI					&& entity != null) Modchu_Reflect.invokeMethod(entity.getClass(), "init", entity);		}	}	public static void changeColor(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) {			data.setCapsValue(data.caps_changeColor, entity);			//Modchu_Debug.lDebug("changeColor");		} else {			//if (data != null) Modchu_Debug.lDebug("changeColor out.data.getCapsValueBoolean(data.caps_isPlayer) ?"+(data.getCapsValueBoolean(data.caps_isPlayer)));		}	}	private static void sitSleepResetCheck(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) ((PFLM_ModelDataMaster) PFLM_ModelDataMaster.instance).sitSleepResetCheck((PFLM_ModelData) data, entity);	}	public static void setPosition(Object entity, double x, double y, double z) {		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftPlayer);		if (entity != null); else entity = thePlayer;		if (entity != null				&& Modchu_AS.get(Modchu_AS.minecraftWorld) != null				&& !isMulti) {		} else return;		Modchu_AS.set(Modchu_AS.entitySetPosition, entity, x, y, z);	}	public static void setPositionCorrection(Object entity, double x, double y, double z) {		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftPlayer);		if (entity != null); else entity = thePlayer;		if (entity != null				&& Modchu_AS.get(Modchu_AS.minecraftWorld) != null				&& !isMulti) {		} else return;//-@-b166		if (isPlayerAPI				&& !PFLM_ConfigData.isPlayerAPIDebug) {			Modchu_Reflect.invokeMethod("PFLM_EntityPlayer", "setPositionCorrection", new Class[]{ double.class, double.class, double.class }, entity, new Object[]{ x, y, z });			//PFLM_EntityPlayer.thePlayer.setPositionCorrection(x, y, z);		} else {/*			if (isSSP) {				Object ret = Modchu_Reflect.invokeMethod(pflm_entityPlayerSP2, "setPositionCorrection", new Class[]{double.class, double.class, double.class}, entity, x, y, z);				//((PFLM_EntityPlayerSP2) thePlayer).setPositionCorrection(x, y, z);			} else*///@-@b166			Modchu_Reflect.invokeMethod(entity.getClass(), "setPositionCorrection", new Class[]{ double.class, double.class, double.class }, entity, new Object[]{ x, y, z });		/*b166//*/}	}	public static boolean gotchaNullCheck() {//-@-125		return true;//@-@125/*//125delete		if (!entityReplaceFlag				| isMulti) return true;		if (thePlayer != null				&& thePlayer.worldObj != null				&& !(currentScreen instanceof GuiMainMenu)) {    	} else return false;//-@-b166		if (isPlayerAPI				&& !PFLM_ConfigData.isPlayerAPIDebug) {			if (!PFLM_EntityPlayer.isInstance(thePlayer)) {				Modchu_Debug.mDebug("playerControllerReplace2");				playerControllerReplace();			}		} else {//@-@b166			if (!(thePlayer instanceof PFLM_EntityPlayerSP)) {				Modchu_Debug.mDebug("playerControllerReplace3");				playerControllerReplace();			}//-@-b166		}//@-@b166		return true;*///125delete	}	public static void setSkinUrl(Object entity, String s) {		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftPlayer);		if (entity != null); else entity = thePlayer;		if (entity != null				&& Modchu_AS.get(Modchu_AS.minecraftWorld) != null				&& !isMulti) {//-@-b166			if (isPlayerAPI					&& !PFLM_ConfigData.isPlayerAPIDebug) {				Modchu_Reflect.setFieldObject("PFLM_PlayerBase", "skinUrl", Modchu_Reflect.getFieldObject("PFLM_PlayerBase", "player", entity), s);			} else {/*				if (isSSP) {					Modchu_Reflect.setFieldObject(Modchu_Reflect.getField(pflm_entityPlayerSP2, "skinUrl"), null, s);					//((PFLM_EntityPlayerSP2) thePlayer).skinUrl = s;				} else*///@-@b166				Modchu_Reflect.setFieldObject(thePlayer.getClass(), "skinUrl", entity, s);			/*b166//*/}		}	}	public static void setTexture(Object entity, Object t) {		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftPlayer);		if (entity != null); else entity = thePlayer;		if (entity != null				&& Modchu_AS.get(Modchu_AS.minecraftWorld) != null				&& !isMulti) {//-@-b166			if (isPlayerAPI					&& !PFLM_ConfigData.isPlayerAPIDebug) {				Modchu_Reflect.invokeMethod("PFLM_PlayerBase", "setPlayerTexture", new Class[]{String.class}, entity, t);			} else {/*				if (isSSP) {    				Object ret = Modchu_Reflect.invokeMethod(pflm_entityPlayerSP2, "setPlayerTexture", new Class[]{String.class}, entity, s);					//((PFLM_EntityPlayerSP2) thePlayer).setPlayerTexture(s);				} else*///@-@b166				Modchu_Reflect.invokeMethod(thePlayer.getClass(), "setPlayerTexture", new Class[]{String.class}, entity, t);			/*b166//*/}		}	}	public static void resetHeight(Object entity) {		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftPlayer);		if (entity != null); else entity = thePlayer;		if (entity != null				&& Modchu_AS.get(Modchu_AS.minecraftWorld) != null				&& !isMulti) {			Modchu_Reflect.invokeMethod("EntityPlayer", "func_71061_d_", "resetHeight", entity);		}	}	public static void clearDataMap() {/*		Object thePlayer = Modchu_AccessSupport.instance.minecraftThePlayerO();		RenderGlobal renderGlobal = (RenderGlobal) Modchu_Reflect.getFieldObject("Minecraft", "field_6323_f", "renderGlobal", mc);		if (renderGlobal != null				&& thePlayer != null) {			renderGlobal.onEntityDestroy(thePlayer);			renderGlobal.onEntityCreate(thePlayer);		}*//*			if (isOlddays) {				Object ret = Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "clearPlayers");				//PFLM_RenderPlayer2.clearDataMap();			} else*/		PFLM_ModelDataMaster.instance.clearDataMap();	}	public static void removeDataMap(Object entity) {		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftPlayer);		if (entity != null); else entity = thePlayer;		PFLM_ModelDataMaster.instance.removeDataMap(entity);	}	public static void setSize(Object entity, float f1, float f2) {		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftPlayer);		if (entity != null); else entity = thePlayer;		if (entity != null				&& Modchu_AS.get(Modchu_AS.minecraftWorld) != null				&& !isMulti) {			Modchu_AS.set(Modchu_AS.entitySetSize, entity, f1, f2);		}	}	public static float getModelScale(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getModelScale(data);		return 0.9375F;	}	public static float getWidth(Object entity) {		float f = 0.6F;		if (Modchu_Main.getMinecraftVersion() > 129				&& Modchu_Main.isOlddays) {			Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");			return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getWidth", obj[0]));			//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getWidth();		}		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return f;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getWidth(data);		return f;	}	public static float getHeight(Object entity) {		float f = 1.8F;		if (Modchu_Main.getMinecraftVersion() > 129				&& Modchu_Main.isOlddays) {			Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");			return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getHeight", obj[0]));			//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getHeight();		}		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return f;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getHeight(data);		return f;	}	public static float getYOffset(Object entity) {		float f = 1.62F;		if (Modchu_Main.getMinecraftVersion() > 129				&& Modchu_Main.isOlddays) {			Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");			return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getYOffset", obj[0]));			//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getYOffset();		}		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		//Modchu_Debug.dDebug("data="+data, 1);		if (data != null); else return f;		Object textureModel = data.models[0];		//Modchu_Debug.dDebug("textureModel="+textureModel, 2);		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getYOffset(data);		return f;	}	public static float getRidingWidth(Object entity) {		float f = 0.6F;		if (Modchu_Main.getMinecraftVersion() > 129				&& Modchu_Main.isOlddays) {			Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");			return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getRidingWidth", obj[0]));			//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getRidingWidth();		}		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return f;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getRidingWidth(data);		return f;	}	public static float getRidingHeight(Object entity) {		float f = 1.8F;		if (Modchu_Main.getMinecraftVersion() > 129				&& Modchu_Main.isOlddays) {			Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");			return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getRidingHeight", obj[0]));			//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getRidingHeight();		}		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return f;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getRidingHeight(data);		return f;	}	public static float getRidingYOffset(Object entity) {		float f = 1.62F;		if (Modchu_Main.getMinecraftVersion() > 129				&& Modchu_Main.isOlddays) {			Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");			return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getRidingYOffset", obj[0]));			//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getRidingYOffset();		}		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return f;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getRidingYOffset(data);		return f;	}	public static double getMountedYOffset(Object entity) {		double d = 0.75D;		if (Modchu_Main.getMinecraftVersion() > 129				&& Modchu_Main.isOlddays) {			Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");			return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getMountedYOffset", obj[0]));			//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getMountedYOffset();		}		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return d;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getMountedYOffset(data);		return d;	}	public static boolean getIsRiding(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return false;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).isRiding;		return false;	}	public static float getPhysical_Hammer(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return 1.0F;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).Physical_Hammer(data);		return 1.0F;	}	public static float ridingViewCorrection(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return 0.0F;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).ridingViewCorrection(data);		return 0.0F;	}	public static float getOnGround(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return 0.0F;		Object model = data.models[0];		if (model != null				&& model instanceof MultiModelBaseBiped) return Modchu_EntityCapsHelper.getCapsValueFloat(model, data, ((MultiModelBaseBiped) model).caps_onGround);		return 0.0F;	}	public static float getEyeHeight(Object entity) {		float f = 0.12F;		if (entity != null				&& Modchu_AS.get(Modchu_AS.minecraftWorld) != null				&& !isMulti) {//-@-125			if (isSSP) {				if (entity != null) return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_EntityPlayerSP2", "getEyeHeight", entity));				//return ((PFLM_EntityPlayerSP2) entity).getEyeHeight();			} else//@-@125				if (entity != null) {//-@-b166					if (isPlayerAPI							&& !PFLM_ConfigData.isPlayerAPIDebug) {						Object o = Modchu_Reflect.getFieldObject("PFLM_EntityPlayer", "thePlayer");						if (o != null) return (Float) Modchu_Reflect.invokeMethod("EntityPlayer", "getEyeHeight", o);					} else {//@-@b166						if (entity != null) return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_EntityPlayerSP2", "getEyeHeight", entity));//-@-b166					}//@-@b166				}		}		if (entity != null) return Modchu_AS.getFloat(Modchu_AS.entityGetEyeHeight, entity);		return 0.12F;	}	public static String getUsernamegetEyeHeight(Object entity) {		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftPlayer);		if (entity != null); else entity = thePlayer;		if (entity != null) return Modchu_AS.getString(Modchu_AS.userName, entity);		return null;	}	public static boolean getChangeModelFlag(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) return data.getCapsValueBoolean(data.caps_changeModelFlag);		return false;	}	public static void setChangeModelFlag(Object entity, boolean b) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		data.setCapsValue(data.caps_changeModelFlag, b);	}	public static int getHandednessMode(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) return data.getCapsValueInt(data.caps_dominantArm);		return 0;	}	public static void setHandednessMode(Object entity, int i) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		data.setCapsValue(data.caps_dominantArm, i);	}	public static Object getModel(Object entity, int i) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) return data.getCapsValue((MultiModelBaseBiped) null, data.caps_model, i);		return null;	}	public static boolean getIsSitting(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) return data.getCapsValueBoolean(data.caps_isSitting);		Modchu_Debug.mDebug("getIsSitting() modelData == null!!");		return false;	}	public static void setIsSitting(Object entity, boolean b) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) data.setCapsValue(data.caps_isSitting, b);		return;	}	public static boolean getIsSleeping(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) return data.getCapsValueBoolean(data.caps_isSleeping);		return false;	}	public static void setIsSleeping(Object entity, boolean b) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) data.setCapsValue(data.caps_isSleeping, b);		return;	}	public static boolean getIsWait(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) return data.getCapsValueBoolean(data.caps_isWait);		Modchu_Debug.mDebug("getIsWait() modelData == null!!");		return false;	}	public static void setIsWait(Object entity, boolean b) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) data.setCapsValue(data.caps_isWait, b);		return;	}	public static float getTempLimbSwing(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		float f = 0.0F;		if (data != null) {			f = Modchu_CastHelper.Float(data.getCapsValue(data.caps_tempLimbSwing));		}		return f;	}	public static void setTempLimbSwing(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) {			float f = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseLimbSwing, entity);			data.setCapsValue(data.caps_tempLimbSwing, f);		}		return;	}	public static int getTempResetCheckCount(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		int i = 0;		if (data != null) {			i = Modchu_CastHelper.Int(data.getCapsValue(data.caps_freeVariable, "tempResetCheckCount"));		}		return i;	}	public static void setTempResetCheckCount(Object entity, int i) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) {			data.getCapsValue(data.caps_freeVariable, "tempResetCheckCount", i);		}	}	public static int getMaidColor() {		return PFLM_ConfigData.maidColor;	}	public static void setMaidColor(int i) {		PFLM_ConfigData.maidColor = i & 0xf;	}	public static void setMaidColor(Object entity, int i) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) {			data.setCapsValue(data.caps_maidColor, i);		}	}	public static void setTextureName(String s) {		PFLM_ConfigData.textureName = s;	}	public static void setTextureArmorName(String s) {		PFLM_ConfigData.textureArmorName = s;	}	public static boolean getFlipHorizontal() {		return PFLM_ItemRendererMaster.flipHorizontal;	}	public static void setFlipHorizontal(boolean b) {		PFLM_ItemRendererMaster.flipHorizontal = b;		return;	}	public static void setLeftHandedness(boolean b) {		PFLM_ItemRendererMaster.leftHandedness = b;		return;	}	public static boolean getLeftHandedness() {		return PFLM_ItemRendererMaster.leftHandedness;	}	public static boolean getAllMultiModelActionRunInitFlag(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) return data.getCapsValueBoolean(data.caps_allMultiModelActionRunInitFlag);		return false;	}	public static void setAllMultiModelActionRunInitFlag(Object entity, boolean b) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) data.setCapsValue(data.caps_allMultiModelActionRunInitFlag, b);		return;	}	public static void customModelCfgReLoad(Object entity) {		ModchuModel_TextureManagerBase.instance.getSearchSettledList().clear();		ModchuModel_TextureManagerBase.instance.loadTextures();		onResourceManagerReload();		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return;		MultiModelBaseBiped[] textureModel = {				data.models[0],				data.models[1],				data.models[2]		};		int version = Modchu_Main.getMinecraftVersion();		float[] f1;		for(int i = 0; i < textureModel.length; i++) {			if (textureModel != null					&& textureModel[i] instanceof MultiModelCustom) {				f1 = ModchuModel_TextureManagerBase.instance.getArmorModelsSize(textureModel[i]);				if (f1 != null) {					((MultiModelCustom) textureModel[i]).reInit();/*					((MultiModelCustom) textureModel[i]).customModel.init(null, i == 0 ? 0.0F : f1[i - 1], 0.0F);					if (version > 190) ((MultiModelCustom) textureModel[i]).customModel.init(null, i == 0 ? 0.0F : f1[i - 1], 0.0F);*/					((MultiModelCustom) textureModel[i]).customModel.changeModel(data);				}			}		}	}	private static void onResourceManagerReload() {		Object textureManager = Modchu_AS.get(Modchu_AS.minecraftGetTextureManager);		Object theResourceManager = Modchu_AS.get("TextureManager", "theResourceManager", textureManager);		int version = Modchu_Main.getMinecraftVersion();		boolean b = Modchu_AS.set("TextureManager", "onResourceManagerReload", new Class[]{ Modchu_Reflect.loadClass(version > 190 ? "IResourceManager" : "ResourceManager") }, textureManager, new Object[]{ theResourceManager });	}	public static void loadcfg() {		// cfg読み込み		if (Modchu_Main.cfgdir.exists()) {			if (!mainCfgfile.exists()) {				// cfgファイルが無い = 新規作成				String s[] = {						"Physical_HurtSound=damage.hit", "isPlayerForm=true",						"isPlayerAPIDebug=false",						"isClearWater=false",						"watherFog=0.1F", "watherFog2=0.05F", "waterStillLightOpacity=3",						"waterMovingLightOpacity=3",						"textureSavedir=/output/", "guiMultiPngSaveButton=true",						"changeModeButton=true", "isRenderName=true",						"waitTime=600",						"multiAutochangeMode=true", "skirtFloats=false", "skirtFloatsVolume=1.0F",						"othersPlayerWaitTime=600", "versionCheck=true",						"useScaleChange=true", "mushroomConfusion=true", "entityReplace=false",						"useAddChatMessage=true"/*//125delete						, "Physical_BurningPlayer=0", "Physical_MeltingPlayer=0", "Physical_Hammer=1.0F",						"Physical_Undead=false", "isVoidFog=true", "isFog=true",						"isDimming=true", "lavaFog=2.0F", "isMouseOverMinecraftMenu=true",						"isSwapGuiSelectWorld=false", "isModelSize=false"*///125delete				};				PFLM_Config.writerConfig(mainCfgfile, s);				initVersionCheckThread();			} else {				// cfgファイルがある				PFLM_ConfigData.Physical_HurtSound = Modchu_CastHelper.String(PFLM_Config.loadConfig(mainCfgfile, "Physical_HurtSound", PFLM_ConfigData.Physical_HurtSound));				PFLM_ConfigData.isPlayerForm = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "isPlayerForm", PFLM_ConfigData.isPlayerForm));				PFLM_ConfigData.isPlayerAPIDebug = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "isPlayerAPIDebug", PFLM_ConfigData.isPlayerAPIDebug));				PFLM_ConfigData.isClearWater = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "isClearWater", PFLM_ConfigData.isClearWater));				PFLM_ConfigData.watherFog = Modchu_CastHelper.Float(PFLM_Config.loadConfig(mainCfgfile, "watherFog", PFLM_ConfigData.watherFog));				PFLM_ConfigData.watherFog2 = Modchu_CastHelper.Float(PFLM_Config.loadConfig(mainCfgfile, "watherFog2", PFLM_ConfigData.watherFog2));				PFLM_ConfigData.waterStillLightOpacity = Modchu_CastHelper.Int(PFLM_Config.loadConfig(mainCfgfile, "waterStillLightOpacity", PFLM_ConfigData.waterStillLightOpacity));				PFLM_ConfigData.waterMovingLightOpacity = Modchu_CastHelper.Int(PFLM_Config.loadConfig(mainCfgfile, "waterMovingLightOpacity", PFLM_ConfigData.waterMovingLightOpacity));				PFLM_ConfigData.textureSavedir = Modchu_CastHelper.String(PFLM_Config.loadConfig(mainCfgfile, "textureSavedir", PFLM_ConfigData.textureSavedir));				PFLM_ConfigData.guiMultiPngSaveButton = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "guiMultiPngSaveButton", PFLM_ConfigData.guiMultiPngSaveButton));				PFLM_ConfigData.changeModeButton = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "changeModeButton", PFLM_ConfigData.changeModeButton));				PFLM_ConfigData.isRenderName = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "isRenderName", PFLM_ConfigData.isRenderName));				PFLM_ConfigData.waitTime = Modchu_CastHelper.Int(PFLM_Config.loadConfig(mainCfgfile, "waitTime", PFLM_ConfigData.waitTime));				PFLM_ConfigData.multiAutochangeMode = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "multiAutochangeMode", PFLM_ConfigData.multiAutochangeMode));				PFLM_ConfigData.othersPlayerWaitTime = Modchu_CastHelper.Int(PFLM_Config.loadConfig(mainCfgfile, "othersPlayerWaitTime", PFLM_ConfigData.othersPlayerWaitTime));				PFLM_ConfigData.versionCheck = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "versionCheck", PFLM_ConfigData.versionCheck));				PFLM_ConfigData.useScaleChange = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "useScaleChange", PFLM_ConfigData.useScaleChange));				PFLM_ConfigData.mushroomConfusion = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "mushroomConfusion", PFLM_ConfigData.mushroomConfusion));				PFLM_ConfigData.entityReplace = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "entityReplace", PFLM_ConfigData.entityReplace));				PFLM_ConfigData.useAddChatMessage = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "useAddChatMessage", PFLM_ConfigData.useAddChatMessage));				initVersionCheckThread();				if (threadVersionCheck != null) {					String urlString = Modchu_CastHelper.String(PFLM_Config.loadConfig(mainCfgfile, "urlString", "https://raw.githubusercontent.com/Modchu/hp/master/PlayerFormLittleMaid"));					threadVersionCheck.urlString = urlString;				}/*//125delete				PFLM_ConfigData.Physical_BurningPlayer = Modchu_CastHelper.Int(PFLM_Config.loadConfig(mainCfgfile, "Physical_BurningPlayer", PFLM_ConfigData.Physical_BurningPlayer));				PFLM_ConfigData.Physical_MeltingPlayer = Modchu_CastHelper.Int(PFLM_Config.loadConfig(mainCfgfile, "Physical_MeltingPlayer", PFLM_ConfigData.Physical_MeltingPlayer));				PFLM_ConfigData.Physical_Hammer = Modchu_CastHelper.Float(PFLM_Config.loadConfig(mainCfgfile, "Physical_Hammer", PFLM_ConfigData.Physical_Hammer));				PFLM_ConfigData.Physical_Undead = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "Physical_Undead", PFLM_ConfigData.Physical_Undead));				PFLM_ConfigData.isVoidFog = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "isVoidFog", PFLM_ConfigData.isVoidFog));				PFLM_ConfigData.isFog = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "isFog", PFLM_ConfigData.isFog));				PFLM_ConfigData.isDimming = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "isDimming", PFLM_ConfigData.isDimming));				PFLM_ConfigData.lavaFog = Modchu_CastHelper.Float(PFLM_Config.loadConfig(mainCfgfile, "lavaFog", PFLM_ConfigData.lavaFog));				PFLM_ConfigData.isMouseOverMinecraftMenu = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "isMouseOverMinecraftMenu", PFLM_ConfigData.isMouseOverMinecraftMenu));				PFLM_ConfigData.isSwapGuiSelectWorld = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "isSwapGuiSelectWorld", PFLM_ConfigData.isSwapGuiSelectWorld));				PFLM_ConfigData.isModelSize = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(mainCfgfile, "isModelSize", PFLM_ConfigData.isModelSize));*///125delete				cfgMaxMinCheck();				String k[] = {						"Physical_HurtSound", "isPlayerForm",						"isPlayerAPIDebug",						"isClearWater",						"watherFog", "watherFog2", "waterStillLightOpacity",						"waterMovingLightOpacity",						"textureSavedir", "guiMultiPngSaveButton",						"changeModeButton", "isRenderName",						"waitTime",						"multiAutochangeMode",						"othersPlayerWaitTime", "versionCheck",						"useScaleChange", "mushroomConfusion", "entityReplace",						"useAddChatMessage"/*//125delete						, "Physical_BurningPlayer", "Physical_MeltingPlayer", "Physical_Hammer",						"Physical_Undead", "isVoidFog", "isFog",						"isDimming", "lavaFog", "isMouseOverMinecraftMenu",						"isSwapGuiSelectWorld", "isModelSize"*///125delete				};				String k1[] = {						""+PFLM_ConfigData.Physical_HurtSound, ""+PFLM_ConfigData.isPlayerForm,						""+PFLM_ConfigData.isPlayerAPIDebug,						""+PFLM_ConfigData.isClearWater,						""+PFLM_ConfigData.watherFog, ""+PFLM_ConfigData.watherFog2, ""+PFLM_ConfigData.waterStillLightOpacity,						""+PFLM_ConfigData.waterMovingLightOpacity,						""+PFLM_ConfigData.textureSavedir, ""+PFLM_ConfigData.guiMultiPngSaveButton,						""+PFLM_ConfigData.changeModeButton, ""+PFLM_ConfigData.isRenderName,						""+PFLM_ConfigData.waitTime,						""+PFLM_ConfigData.multiAutochangeMode,						""+PFLM_ConfigData.othersPlayerWaitTime, ""+PFLM_ConfigData.versionCheck,						""+PFLM_ConfigData.useScaleChange, ""+PFLM_ConfigData.mushroomConfusion, ""+PFLM_ConfigData.entityReplace,						""+PFLM_ConfigData.useAddChatMessage/*//125delete						, ""+PFLM_ConfigData.Physical_BurningPlayer, ""+PFLM_ConfigData.Physical_MeltingPlayer, ""+PFLM_ConfigData.Physical_Hammer,						""+PFLM_ConfigData.Physical_Undead, ""+PFLM_ConfigData.isVoidFog, ""+PFLM_ConfigData.isFog,						""+PFLM_ConfigData.isDimming, ""+PFLM_ConfigData.lavaFog, ""+PFLM_ConfigData.isMouseOverMinecraftMenu,						""+PFLM_ConfigData.isSwapGuiSelectWorld, ""+PFLM_ConfigData.isModelSize*///125delete				};				PFLM_Config.writerSupplementConfig(mainCfgfile, k, k1);				checkEntityReplaceNecessity();				Modchu_Debug.lDebug("loadcfg() mainCfgfile load ok.");			}		} else {			initVersionCheckThread();			Modchu_Debug.lDebug("loadcfg() !cfgdir.exists() error !!");		}	}	private static void checkEntityReplaceNecessity() {		if (PFLM_ConfigData.entityReplace				&& (PFLM_ConfigData.Physical_BurningPlayer != 0				| PFLM_ConfigData.Physical_MeltingPlayer != 0				| PFLM_ConfigData.Physical_Hammer != 1.0F				| PFLM_ConfigData.Physical_Undead				| !PFLM_ConfigData.Physical_HurtSound.equalsIgnoreCase("damage.hit")/*//125delete				| PFLM_ConfigData.isSwapGuiSelectWorld*///125delete				| PFLM_ConfigData.isModelSize)) entityReplaceFlag = true;	}	public static void cfgMaxMinCheck() {		if (PFLM_ConfigData.watherFog < 0.0F) PFLM_ConfigData.watherFog = 0.0F;		if (PFLM_ConfigData.watherFog > 1.0F) PFLM_ConfigData.watherFog = 1.0F;		if (PFLM_ConfigData.watherFog2 < 0.0F) PFLM_ConfigData.watherFog2 = 0.0F;		if (PFLM_ConfigData.watherFog2 > 1.0F) PFLM_ConfigData.watherFog2 = 1.0F;		if (PFLM_ConfigData.waterStillLightOpacity < 0) PFLM_ConfigData.waterStillLightOpacity = 0;		if (PFLM_ConfigData.waterStillLightOpacity > 255) PFLM_ConfigData.waterStillLightOpacity = 255;		if (PFLM_ConfigData.waterMovingLightOpacity < 0) PFLM_ConfigData.waterMovingLightOpacity = 0;		if (PFLM_ConfigData.waterMovingLightOpacity > 255) PFLM_ConfigData.waterMovingLightOpacity = 255;		if (PFLM_ConfigData.lavaFog < 0.0F) PFLM_ConfigData.lavaFog = 0.0F;		if (PFLM_ConfigData.lavaFog > 2.0F) PFLM_ConfigData.lavaFog = 2.0F;	}	public static void writerParamater() {		//GUI設定ファイル書き込み		String s[] = {				"textureName="+PFLM_ConfigData.textureName, "textureArmorName="+PFLM_ConfigData.textureArmorName, "maidColor="+PFLM_ConfigData.maidColor,				"ModelScale="+PFLM_ConfigData.modelScale, "changeMode="+PFLM_ConfigData.changeMode, "setModel="+PFLM_ConfigData.setModel,				"setColor=0", "setArmor=0", "changeMode=0", "othersChangeMode=1"		};		PFLM_Config.writerConfig(cfgfile, s);	}	public static void loadParamater() {		// Gui設定項目読み込み		if (cfgfile != null); else {			Modchu_Debug.systemLogDebug("PFLM_Main loadParamater() cfgfile == null !!", 2, null);			Modchu_Main.setRuntimeException("PFLM_Main loadParamater() cfgfile == null !! error !!");		}		Modchu_Debug.lDebug("PFLM_Main loadParamater() cfgfile="+cfgfile);		if (Modchu_Main.cfgdir.exists()) {			if (!cfgfile.exists()) {				// コンフィグファイルが無い = 新規作成				Modchu_Debug.lDebug("PFLM_Main loadParamater() new cfgfile");				writerParamater();			} else {				// コンフィグファイルがある				Modchu_Debug.lDebug("PFLM_Main loadParamater() read cfgfile");				try {					PFLM_ConfigData.textureArmorName = Modchu_CastHelper.String(PFLM_Config.loadConfig(cfgfile, "textureArmorName", PFLM_ConfigData.textureArmorName));					PFLM_ConfigData.textureName = Modchu_CastHelper.String(PFLM_Config.loadConfig(cfgfile, "textureName", PFLM_ConfigData.textureName));					PFLM_ConfigData.maidColor = Modchu_CastHelper.Int(PFLM_Config.loadConfig(cfgfile, "maidColor", PFLM_ConfigData.maidColor));					PFLM_ConfigData.modelScale = Modchu_CastHelper.Float(PFLM_Config.loadConfig(cfgfile, "ModelScale", PFLM_ConfigData.modelScale));					PFLM_ConfigData.changeMode = Modchu_CastHelper.Int(PFLM_Config.loadConfig(cfgfile, "changeMode", PFLM_ConfigData.changeMode));					PFLM_ConfigData.setModel = Modchu_CastHelper.Int(PFLM_Config.loadConfig(cfgfile, "setModel", PFLM_ConfigData.setModel));					PFLM_ConfigData.setColor = Modchu_CastHelper.Int(PFLM_Config.loadConfig(cfgfile, "setColor", PFLM_ConfigData.setColor));					PFLM_ConfigData.setArmor = Modchu_CastHelper.Int(PFLM_Config.loadConfig(cfgfile, "setArmor", PFLM_ConfigData.setArmor));					PFLM_ConfigData.showArmor = Modchu_CastHelper.Boolean(PFLM_Config.loadConfig(cfgfile, "showArmor", PFLM_ConfigData.showArmor));					PFLM_ConfigData.handednessMode = Modchu_CastHelper.Int(PFLM_Config.loadConfig(cfgfile, "handednessMode", PFLM_ConfigData.handednessMode));					PFLM_ConfigData.changeMode = Modchu_CastHelper.Int(PFLM_Config.loadConfig(cfgfile, "changeMode", PFLM_ConfigData.changeMode));					PFLM_ConfigData.othersChangeMode = Modchu_CastHelper.Int(PFLM_Config.loadConfig(cfgfile, "othersChangeMode", PFLM_ConfigData.othersChangeMode));					Modchu_Debug.lDebug("PFLM_Main loadParamater() read cfgfile ok.");				} catch (Error e1) {					Modchu_Debug.lDebug("PFLM_Main loadParamater() read cfgfile error !!", 2, e1);					e1.printStackTrace();				} catch (Exception e) {					Modchu_Debug.lDebug("PFLM_Main loadParamater() read cfgfile Exception !!", 2, e);					e.printStackTrace();				}				if (PFLM_ConfigData.handednessMode < -1) PFLM_ConfigData.handednessMode = -1;				if (PFLM_ConfigData.handednessMode > 1) PFLM_ConfigData.handednessMode = 1;			}			if (ModchuModel_Main.cfgfile != null					&& ModchuModel_Main.cfgfile.exists()); else {				// コンフィグファイルが無い = 新規作成				if (ModchuModel_Main.cfgfile != null) PFLM_Config.writerConfig(ModchuModel_Main.cfgfile, new String[]{ "" });			}		}		Modchu_Debug.lDebug("PFLM_Main loadParamater() end.");	}	public static void saveParamater() {		// Gui設定項目をcfgファイルに保存		String k[] = {				"textureName", "textureArmorName", "maidColor", "ModelScale", "setModel",				"setColor", "setArmor", "showArmor", "handednessMode", "changeMode",				"othersChangeMode"		};		String k1[] = {				""+PFLM_ConfigData.textureName, ""+PFLM_ConfigData.textureArmorName, ""+PFLM_ConfigData.maidColor, ""+PFLM_ConfigData.modelScale, ""+PFLM_ConfigData.setModel,				""+PFLM_ConfigData.setColor, ""+PFLM_ConfigData.setArmor, ""+PFLM_ConfigData.showArmor, ""+PFLM_ConfigData.handednessMode, ""+PFLM_ConfigData.changeMode,				""+PFLM_ConfigData.othersChangeMode		};		PFLM_Config.saveParamater(cfgfile, k, k1);	}	public static void writerTextureList() {		//textureListファイル 新規作成		String s[] = {				"autoUpdates=true",				ModchuModel_TextureManagerBase.instance.getDefaultTextureName(), "ERYI_Aokise", "MMM_Aug", "b2color_Beverly2", "Cirno_chrno",				"chu_chu", "CV_DogAngel", "CV_DogAngel2", "e10color_Elsa", "e2color_Elsie" ,				"littleForces_ExtraArms", "CF_Kagami", "Rana_Kelo", "CF_long", "m1color_Mabel",				"Mahoro_mahoro", "naz_naz", "MaidCV_Petit", "x32_QB", "kimono_Shion",				"MMM_SR2", "suika_suika", "CV_taremimi", "Tei_tareusa", "CF_twinD",				"CV_usagi", "CV_Utsuho", "Manju_Yukkuri", "e11color_Elsa2", "b4color_Beverly3",				"CV_Angel", "CV_Tenshi" ,"CV_Yomu", "CV_ChibiNeko", "CV_Pawapro",				"moyu_SA", "littleMaidMob_bgs", "littleMaidMob_brs", "LittleMaidMob_ch", "littleMaidMob_dm",				"littleMaidMob_st", "littleMaidMob_MS", "littleMAidMob_MS1", "LittleMaidMob_NM", "LittleMaidMob_NM1",				"b3color_Beverly4", "e20colorQ_Evelyn3", "LittleVocal_VUD1.Aki_VUD1", "LittleVocal_VUD1.Aku_VUD1", "LittleVocal_VUD1.Fuyu_VUD1",				"LittleVocal_VUD1.Gumi_VUD1", "LittleVocal_VUD1.Haku_VUD1", "LittleVocal_VUD1.Haru_VUD1", "LittleVocal_VUD1.Ia_VUD1", "LittleVocal_VUD1.Kiku_VUD1",				"LittleVocal_VUD1.Lily_VUD1", "LittleVocal_VUD1.Luka_VUD1", "LittleVocal_VUD1.Mako_VUD1", "LittleVocal_VUD1.Meiko_VUD1", "LittleVocal_VUD1.Miki_VUD1",				"LittleVocal_VUD1.Miku_VUD1", "LittleVocal_VUD1.Momo_VUD1", "LittleVocal_VUD1.Natsu_VUD1", "LittleVocal_VUD1.Neru_VUD1", "LittleVocal_VUD1.Oto_VUD1",				"LittleVocal_VUD1.Rin_VUD1", "LittleVocal_VUD1.Rina_VUD1", "LittleVocal_VUD1.Ruko_VUD1", "LittleVocal_VUD1.Sara_VUD1", "LittleVocal_VUD1.Tei_VUD1",				"LittleVocal_VUD1.Teto_VUD1", "LittleVocal_VUD1.Uta_VUD1", "LittleVocal_VUD1.Yukari0_VUD1", "LittleVocal_VUD1.Yukari1_VUD1", "LittleVocal_VUD1.ZMiku_VUD1",				"LittleVocal_VUD1.Yukari1_VUD1.0_SR2", "VOICEROID.Yukari_Yukari", "VOICEROID.Yukari_Yukari", "VOICEROID.YukariS0_Yukari", "VOICEROID.YukariS1_Yukari",				"e11color_Elsa3", "e11under_Elsa3", "Catcher_Pawapro", "Batter_Pawapro", "b4under_Beverly4",				"kimono_pl_Shion", "Sword_NM", "Ar_NM", "x16_QB", "Hituji",				"Udonge_usagi", "neta_chu", "ColorVariation_chu", "NetaPetit_Petit", "CV_DressYukari",				"e12color_Elsa3", "b14color_Beverly5", "e14color_Elsa4", "e14under_Elsa4", "b15color_Beverly6",				"b15under_Beverly6", "default_Custom1", "e15color_Elsa5", "e15under_Elsa5", "b16color_Chloe2",				"b16under_Chloe2", "b16color_Beverly7", "b16under_Beverly7", "jamBAND.Kana_SA", "jamBAND.Kanon_SA",				"jamBAND.Maki_SA", "jamBAND.Rizumu_SA", "HiFM_Squirrel", "HiFM_Sheep", "HiFM_Rabbit",				"HiFM_Fox", "HiFM_Dog", "HiFM_Cat", "HiFM_Bear"		};		PFLM_Config.writerModelList(s, textureListfile, textureList);	}	public static void loadTextureList() {		// ModelList読み込み		Modchu_Debug.lDebug("PFLM_Main loadTextureList()");		if (Modchu_Main.cfgdir.exists()) {			if (!textureListfile.exists()) {				// textureListファイルが無い = 新規作成				Modchu_Debug.lDebug("PFLM_Main loadTextureList() new PlayerFormLittleMaidtextureList.cfg");				writerTextureList();			} else {				// textureListファイルがある				Modchu_Debug.lDebug("PFLM_Main loadTextureList() read PlayerFormLittleMaidtextureList.cfg");				boolean b = PFLM_Config.loadList(textureListfile, textureList, "PlayerFormLittleMaidtextureList.cfg");				if (!b) writerTextureList();			}		}		Modchu_Debug.lDebug("PFLM_Main loadTextureList() end.");	}	public static void writerOthersPlayerParamater() {		//GUIOthersPlayer設定ファイル書き込み		String s[] = {				"othersTextureName="+PFLM_ConfigData.othersTextureName, "othersTextureArmorName="+PFLM_ConfigData.othersTextureArmorName, "othersMaidColor="+PFLM_ConfigData.othersMaidColor,				"othersModelScale="+PFLM_ConfigData.othersModelScale		};		PFLM_Config.writerConfig(othersCfgfile, s);	}	public static void loadOthersPlayerParamater() {		// GuiOthersPlayer設定項目読み込み		Modchu_Debug.lDebug("PFLM_Main loadOthersPlayerParamater()");		if (Modchu_Main.cfgdir.exists()) {			if (!othersCfgfile.exists()) {				// コンフィグファイルが無い = 新規作成				Modchu_Debug.lDebug("PFLM_Main loadOthersPlayerParamater() new PlayerFormLittleMaidGuiOthersPlayer.cfg");				writerOthersPlayerParamater();			} else {				// コンフィグファイルがある				Modchu_Debug.lDebug("PFLM_Main loadOthersPlayerParamater() read PlayerFormLittleMaidGuiOthersPlayer.cfg");				try {					PFLM_ConfigData.othersTextureName = Modchu_CastHelper.String(PFLM_Config.loadConfig(othersCfgfile, "othersTextureName", PFLM_ConfigData.othersTextureName));					PFLM_ConfigData.othersTextureArmorName = Modchu_CastHelper.String(PFLM_Config.loadConfig(othersCfgfile, "othersTextureArmorName", PFLM_ConfigData.othersTextureArmorName));					PFLM_ConfigData.othersMaidColor = Modchu_CastHelper.Int(PFLM_Config.loadConfig(othersCfgfile, "othersMaidColor", PFLM_ConfigData.othersMaidColor));					PFLM_ConfigData.othersModelScale = Modchu_CastHelper.Float(PFLM_Config.loadConfig(othersCfgfile, "othersModelScale", PFLM_ConfigData.othersModelScale));					PFLM_ConfigData.othersChangeMode = Modchu_CastHelper.Int(PFLM_Config.loadConfig(othersCfgfile, "changeMode", PFLM_ConfigData.othersChangeMode));					PFLM_ConfigData.othersHandednessMode = Modchu_CastHelper.Int(PFLM_Config.loadConfig(othersCfgfile, "PFLM_ConfigData.othersHandednessMode", PFLM_ConfigData.othersHandednessMode));					PFLM_Config.loadConfigPlayerLocalData(playerLocalData, othersCfgfile);				} catch (Error e1) {					Modchu_Debug.lDebug("PFLM_Main loadOthersPlayerParamater() read cfgfile error !!", 2, e1);					e1.printStackTrace();				} catch (Exception e) {					Modchu_Debug.lDebug("PFLM_Main loadOthersPlayerParamater() read cfgfile Exception !!", 2, e);					e.printStackTrace();				}			}		}		Modchu_Debug.lDebug("PFLM_Main loadOthersPlayerParamater() end.");	}	public static void saveOthersPlayerParamater(boolean flag) {		// GuiOthersPlayer設定項目をcfgファイルに保存		String k[] = {				"othersTextureName", "othersTextureArmorName", "othersMaidColor", "othersModelScale", "changeMode",				"othersHandednessMode"		};		String k1[] = {				""+PFLM_ConfigData.othersTextureName, ""+PFLM_ConfigData.othersTextureArmorName, ""+PFLM_ConfigData.othersMaidColor, ""+PFLM_ConfigData.othersModelScale, ""+PFLM_ConfigData.othersChangeMode,				""+PFLM_ConfigData.othersHandednessMode		};		PFLM_Config.saveOthersPlayerParamater(PFLM_GuiOthersPlayerIndividualCustomizeMaster.playerName, playerLocalData, othersCfgfile, k, k1, flag);	}	public static void removeOthersPlayerParamater(String s) {		// GuiOthersPlayer設定から指定内容削除		PFLM_Config.removeOthersPlayerParamater(othersCfgfile, s);	}	public static void saveShortcutKeysParamater() {		// GuiShortcutKeys設定項目をcfgファイルに保存		if (!shortcutKeysCfgfile.exists()) {			// コンフィグファイルが無い = 新規作成			writerShortcutKeysParamater();		}		int m = 9;		String k[] = new String[PFLM_ConfigData.maxShortcutKeys * m];		String k1[] = new String [PFLM_ConfigData.maxShortcutKeys * m];		int i1;		StringBuilder sb = new StringBuilder();		String defaultTextureName = ModchuModel_TextureManagerBase.instance.getDefaultTextureName();		for (int i = 0; i < PFLM_ConfigData.maxShortcutKeys; i++) {			if (PFLM_ConfigData.shortcutKeysTextureName[i] != null); else PFLM_ConfigData.shortcutKeysTextureName[i] = defaultTextureName;			if (PFLM_ConfigData.shortcutKeysTextureArmorName[i] != null); else PFLM_ConfigData.shortcutKeysTextureArmorName[i] = defaultTextureName;			if (PFLM_ConfigData.shortcutKeysModelScale[i] != 0.0F); else PFLM_ConfigData.shortcutKeysModelScale[i] = 0.9375F;			i1 = m * i;			k[i1] = sb.append("PFLM_ConfigData.shortcutKeysTextureName[").append(i).append("]").toString();			k1[i1] = PFLM_ConfigData.shortcutKeysTextureName[i];			i1++;			sb.delete(0, sb.length());			k[i1] = sb.append("PFLM_ConfigData.shortcutKeysTextureArmorName[").append(i).append("]").toString();			k1[i1] = PFLM_ConfigData.shortcutKeysTextureArmorName[i];			i1++;			sb.delete(0, sb.length());			k[i1] = sb.append("PFLM_ConfigData.shortcutKeysMaidColor[").append(i).append("]").toString();			k1[i1] = ""+PFLM_ConfigData.shortcutKeysMaidColor[i];			i1++;			sb.delete(0, sb.length());			k[i1] = sb.append("PFLM_ConfigData.shortcutKeysChangeMode[").append(i).append("]").toString();			k1[i1] = ""+PFLM_ConfigData.shortcutKeysChangeMode[i];			i1++;			sb.delete(0, sb.length());			k[i1] = sb.append("PFLM_ConfigData.shortcutKeysModelScale[").append(i).append("]").toString();			k1[i1] = ""+PFLM_ConfigData.shortcutKeysModelScale[i];			i1++;			sb.delete(0, sb.length());			k[i1] = sb.append("PFLM_ConfigData.shortcutKeysUse[").append(i).append("]").toString();			k1[i1] = ""+PFLM_ConfigData.shortcutKeysUse[i];			i1++;			sb.delete(0, sb.length());			k[i1] = sb.append("PFLM_ConfigData.shortcutKeysPFLMModelsUse[").append(i).append("]").toString();			k1[i1] = ""+PFLM_ConfigData.shortcutKeysPFLMModelsUse[i];			i1++;			sb.delete(0, sb.length());			k[i1] = sb.append("shortcutKeysCtrlUse[").append(i).append("]").toString();			k1[i1] = ""+PFLM_ConfigData.shortcutKeysCtrlUse[i];			i1++;			sb.delete(0, sb.length());			k[i1] = sb.append("shortcutKeysShiftUse[").append(i).append("]").toString();			k1[i1] = ""+PFLM_ConfigData.shortcutKeysShiftUse[i];			sb.delete(0, sb.length());		};		PFLM_Config.saveParamater(shortcutKeysCfgfile, k, k1);	}	public static void writerShortcutKeysParamater() {		//GUIShortcutKeys設定ファイル書き込み		int m = 9;		//String s[] = new String [PFLM_ConfigData.maxShortcutKeys * m];		String s[] = new String [10 * m];		int j;		StringBuilder sb = new StringBuilder();		String defaultTextureName = ModchuModel_TextureManagerBase.instance.getDefaultTextureName();		for (int i = 0; i < 10; i++) {			j = 0;			PFLM_ConfigData.shortcutKeysTextureName[i] = defaultTextureName;			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysTextureName[").append(i).append("]=default").toString();			j++;			sb.delete(0, sb.length());			PFLM_ConfigData.shortcutKeysTextureArmorName[i] = defaultTextureName;			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysTextureArmorName[").append(i).append("]=default").toString();			j++;			sb.delete(0, sb.length());			PFLM_ConfigData.shortcutKeysMaidColor[i] = 0;			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysMaidColor[").append(i).append("]=0").toString();			j++;			sb.delete(0, sb.length());			int mode = PFLM_GuiKeyControlsMaster.modeAction + i;			if (i == 6) mode = PFLM_GuiKeyControlsMaster.modeAllMultiModelActionPlus;			if (i == 7) mode = PFLM_GuiKeyControlsMaster.modeAllMultiModelActionMinus;			if (i == 8) mode = PFLM_GuiKeyControlsMaster.modeAllMultiModelActionModeChangePlus;			if (i == 9) mode = PFLM_GuiKeyControlsMaster.modeAllMultiModelActionRun;			PFLM_ConfigData.shortcutKeysChangeMode[i] = mode;			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysChangeMode[").append(i).append("]=").append(mode).toString();			j++;			sb.delete(0, sb.length());			PFLM_ConfigData.shortcutKeysModelScale[i] = 0.9375F;			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysModelScale[").append(i).append("]=0.9375").toString();			j++;			sb.delete(0, sb.length());			PFLM_ConfigData.shortcutKeysUse[i] = false;			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysUse[").append(i).append("]=false").toString();			j++;			sb.delete(0, sb.length());			PFLM_ConfigData.shortcutKeysPFLMModelsUse[i] = false;			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysPFLMModelsUse[").append(i).append("]=false").toString();			j++;			sb.delete(0, sb.length());			PFLM_ConfigData.shortcutKeysCtrlUse[i] = false;			s[m * i + j] = sb.append("shortcutKeysCtrlUse[").append(i).append("]=false").toString();			j++;			sb.delete(0, sb.length());			PFLM_ConfigData.shortcutKeysShiftUse[i] = false;			s[m * i + j] = sb.append("shortcutKeysShiftUse[").append(i).append("]=false").toString();			j++;			sb.delete(0, sb.length());		};/*		for (int i = 10; i < PFLM_ConfigData.maxShortcutKeys;i++) {			j = 0;			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysTextureName[").append(i).append("]=default").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysTextureArmorName[").append(i).append("]=default").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysMaidColor[").append(i).append("]=0").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysChangeMode[").append(i).append("]=0").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysModelScale[").append(i).append("]=0.9375").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysUse[").append(i).append("]=false").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysPFLMModelsUse[").append(i).append("]=false").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("shortcutKeysCtrlUse[").append(i).append("]=false").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("shortcutKeysShiftUse[").append(i).append("]=false").toString();			j++;			sb.delete(0, sb.length());		};*/		PFLM_Config.writerConfig(shortcutKeysCfgfile, s);	}	public static void loadShortcutKeysParamater() {		// GuiShortcutKeys設定項目読み込み		Modchu_Debug.mDebug("loadShortcutKeysParamater");		if (Modchu_Main.cfgdir.exists()) {			if (!shortcutKeysCfgfile.exists()) {				// コンフィグファイルが無い = 新規作成				writerShortcutKeysParamater();			} else {				// コンフィグファイルがある				String s;				String k;				String defaultTextureName = ModchuModel_TextureManagerBase.instance.getDefaultTextureName();				for (int i = 0; i < PFLM_ConfigData.maxShortcutKeys; i++) {					k = PFLM_ConfigData.shortcutKeysTextureName[i] != null ? PFLM_ConfigData.shortcutKeysTextureName[i] : "";					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("PFLM_ConfigData.shortcutKeysTextureName[").append(i).append("]").toString(), k).toString();					PFLM_ConfigData.shortcutKeysTextureName[i] = s != null ? s: defaultTextureName;					k = PFLM_ConfigData.shortcutKeysTextureArmorName[i] != null ? PFLM_ConfigData.shortcutKeysTextureArmorName[i] : "";					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("PFLM_ConfigData.shortcutKeysTextureArmorName[").append(i).append("]").toString(), k).toString();					PFLM_ConfigData.shortcutKeysTextureArmorName[i] = s != null ? s: defaultTextureName;					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("PFLM_ConfigData.shortcutKeysMaidColor[").append(i).append("]").toString(), PFLM_ConfigData.shortcutKeysMaidColor[i]).toString();					PFLM_ConfigData.shortcutKeysMaidColor[i] = s != null ? Modchu_CastHelper.Int(s) : 0;					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("PFLM_ConfigData.shortcutKeysChangeMode[").append(i).append("]").toString(), PFLM_ConfigData.shortcutKeysChangeMode[i]).toString();					PFLM_ConfigData.shortcutKeysChangeMode[i] = s != null ? Modchu_CastHelper.Int(s) : 0;					if (PFLM_ConfigData.shortcutKeysChangeMode[i] > PFLM_GuiKeyControlsMaster.changeModeMax) PFLM_ConfigData.shortcutKeysChangeMode[i] = 0;					if (PFLM_ConfigData.shortcutKeysChangeMode[i] < 0) PFLM_ConfigData.shortcutKeysChangeMode[i] = PFLM_GuiKeyControlsMaster.changeModeMax;					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("PFLM_ConfigData.shortcutKeysModelScale[").append(i).append("]").toString(), PFLM_ConfigData.shortcutKeysModelScale[i]).toString();					PFLM_ConfigData.shortcutKeysModelScale[i] = s != null ? Modchu_CastHelper.Float(s) : 0.9375F;					if (PFLM_ConfigData.shortcutKeysModelScale[i] > 10.0F) PFLM_ConfigData.shortcutKeysModelScale[i] = 10.0F;					if (PFLM_ConfigData.shortcutKeysModelScale[i] < 0.0F) PFLM_ConfigData.shortcutKeysModelScale[i] = 0.0F;					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("PFLM_ConfigData.shortcutKeysUse[").append(i).append("]").toString(), PFLM_ConfigData.shortcutKeysUse[i]).toString();					PFLM_ConfigData.shortcutKeysUse[i] = s != null ? Modchu_CastHelper.Boolean(s) : false;					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("PFLM_ConfigData.shortcutKeysPFLMModelsUse[").append(i).append("]").toString(), PFLM_ConfigData.shortcutKeysPFLMModelsUse[i]).toString();					PFLM_ConfigData.shortcutKeysPFLMModelsUse[i] = s != null ? Modchu_CastHelper.Boolean(s) : false;					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("shortcutKeysCtrlUse[").append(i).append("]").toString(), PFLM_ConfigData.shortcutKeysCtrlUse[i]).toString();					PFLM_ConfigData.shortcutKeysCtrlUse[i] = s != null ? Modchu_CastHelper.Boolean(s) : false;					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("shortcutKeysShiftUse[").append(i).append("]").toString(), PFLM_ConfigData.shortcutKeysShiftUse[i]).toString();					PFLM_ConfigData.shortcutKeysShiftUse[i] = s != null ? Modchu_CastHelper.Boolean(s) : false;				}			}		}	}	public static ConcurrentHashMap<String, Integer> loadShortcutKeysKeyNumberParamater() {		// ShortcutKeysKeyNumber設定読み込み		Modchu_Debug.lDebug("loadShortcutKeysKeyNumberParamater()");		if (!shortcutKeysKeyNumberCfgfile.exists()) {			// コンフィグファイルが無い = 新規作成			writerShortcutKeysKeyNumberParamater();		} else {			Modchu_Debug.lDebug("loadShortcutKeysKeyNumberParamater() shortcutKeysKeyNumberCfgfile.exists()");			LinkedList<String> list = loadShortcutKeysKeyNumberParamater(PFLM_Config.loadConfigList(shortcutKeysKeyNumberCfgfile));			if (list != null					&& !list.isEmpty()); else {				return null;			}			ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap();			String name = "key_"+PFLM_ConfigData.shortcutKeysName;			for (String s : list) {				if (s.startsWith(name)) {					String[] s1 = s.split(":");					String s2 = s1 != null ? s1[0] : null;					int i = Modchu_CastHelper.Int(s1[1]);					map.put(s2, i);				}			}			try {				PFLM_ConfigData.defaultSystemShortcutKeysGui = Modchu_CastHelper.Int(PFLM_Config.loadConfig(shortcutKeysKeyNumberCfgfile, "defaultSystemShortcutKeysGui", PFLM_ConfigData.defaultSystemShortcutKeysGui));				PFLM_ConfigData.defaultSystemShortcutKeysModels = Modchu_CastHelper.Int(PFLM_Config.loadConfig(shortcutKeysKeyNumberCfgfile, "defaultSystemShortcutKeysModels", PFLM_ConfigData.defaultSystemShortcutKeysModels));				PFLM_ConfigData.defaultSystemShortcutKeysWait = Modchu_CastHelper.Int(PFLM_Config.loadConfig(shortcutKeysKeyNumberCfgfile, "defaultSystemShortcutKeysWait", PFLM_ConfigData.defaultSystemShortcutKeysWait));				PFLM_ConfigData.defaultSystemShortcutKeysSit = Modchu_CastHelper.Int(PFLM_Config.loadConfig(shortcutKeysKeyNumberCfgfile, "defaultSystemShortcutKeysSit", PFLM_ConfigData.defaultSystemShortcutKeysSit));				PFLM_ConfigData.defaultSystemShortcutKeysLieDown = Modchu_CastHelper.Int(PFLM_Config.loadConfig(shortcutKeysKeyNumberCfgfile, "defaultSystemShortcutKeysLieDown", PFLM_ConfigData.defaultSystemShortcutKeysLieDown));				String k[] = {						"defaultSystemShortcutKeysGui",						"defaultSystemShortcutKeysModels",						"defaultSystemShortcutKeysWait",						"defaultSystemShortcutKeysSit",						"defaultSystemShortcutKeysLieDown"				};				String k1[] = {						""+PFLM_ConfigData.defaultSystemShortcutKeysGui,						""+PFLM_ConfigData.defaultSystemShortcutKeysModels,						""+PFLM_ConfigData.defaultSystemShortcutKeysWait,						""+PFLM_ConfigData.defaultSystemShortcutKeysSit,						""+PFLM_ConfigData.defaultSystemShortcutKeysLieDown				};				PFLM_Config.writerSupplementConfig(shortcutKeysKeyNumberCfgfile, k, k1);			} catch (Error e1) {				Modchu_Debug.lDebug("PFLM_Main loadShortcutKeysKeyNumberParamater() read cfgfile error !!", 2, e1);				e1.printStackTrace();			} catch (Exception e) {				Modchu_Debug.lDebug("PFLM_Main loadShortcutKeysKeyNumberParamater() read cfgfile Exception !!", 2, e);				e.printStackTrace();			}			return map;		}		return null;	}	private static LinkedList<String> loadShortcutKeysKeyNumberParamater(List<String> list) {		//Modchu_Debug.lDebug("loadShortcutKeysKeyNumberParamater");		//Modchu_Debug.lDebug("loadShortcutKeysKeyNumberParamater list="+list);		if (list != null				&& !list.isEmpty()); else {			//Modchu_Debug.lDebug("loadShortcutKeysKeyNumberParamater list null !!");			return null;		}		LinkedList<String> list2 = new LinkedList();		String name = "key_"+PFLM_ConfigData.shortcutKeysName;		for (String s : list) {			if (s.startsWith(name)) list2.add(s);		}		return list2;	}	private static void writerShortcutKeysKeyNumberParamater() {		//Modchu_Debug.lDebug("writerShortcutKeysKeyNumberParamater()");		//GUI設定ファイル新規書き込み		LinkedList<String> list2 = new LinkedList();		for (int i = 0; i < PFLM_ConfigData.maxShortcutKeys; i++) {			if (PFLM_ConfigData.shortcutKeysUse[i]) {				list2.add(new StringBuilder().append("key_").append(PFLM_ConfigData.shortcutKeysName).append(i).append(":").append(33 + i).toString());			}		}		list2.add("defaultSystemShortcutKeysGui="+PFLM_ConfigData.defaultSystemShortcutKeysGui);		list2.add("defaultSystemShortcutKeysModels="+PFLM_ConfigData.defaultSystemShortcutKeysModels);		list2.add("defaultSystemShortcutKeysWait="+PFLM_ConfigData.defaultSystemShortcutKeysWait);		list2.add("defaultSystemShortcutKeysSit="+PFLM_ConfigData.defaultSystemShortcutKeysSit);		list2.add("defaultSystemShortcutKeysLieDown="+PFLM_ConfigData.defaultSystemShortcutKeysLieDown);		PFLM_Config.writerConfig(shortcutKeysKeyNumberCfgfile, list2);		//Modchu_Debug.lDebug("writerShortcutKeysKeyNumberParamater() end.");	}	private static void saveShortcutKeysKeyNumberParamater() {		//GUI設定ファイル書き込み		File file = new File(Modchu_AS.getFile(Modchu_AS.minecraftMcDataDir), "options.txt");		if (file != null				&& file.exists()); else {			//Modchu_Debug.lDebug("PFLM_Main saveShortcutKeysKeyNumberParamater options.txt Not Found.");			return;		}		LinkedList<String> list2 = loadShortcutKeysKeyNumberParamater(ModchuModel_Config.loadConfigList(file));		list2.add("defaultSystemShortcutKeysGui="+PFLM_ConfigData.defaultSystemShortcutKeysGui);		list2.add("defaultSystemShortcutKeysModels="+PFLM_ConfigData.defaultSystemShortcutKeysModels);		list2.add("defaultSystemShortcutKeysWait="+PFLM_ConfigData.defaultSystemShortcutKeysWait);		list2.add("defaultSystemShortcutKeysSit="+PFLM_ConfigData.defaultSystemShortcutKeysSit);		list2.add("defaultSystemShortcutKeysLieDown="+PFLM_ConfigData.defaultSystemShortcutKeysLieDown);/*		LinkedList<String> list = new LinkedList();		for (Entry<Integer, Integer> en : map.entrySet()) {			int key = en.getKey();			int value = en.getValue();			//Modchu_Debug.lDebug("PFLM_Main saveShortcutKeysKeyNumberParamater options.txt key="+key);			//Modchu_Debug.lDebug("PFLM_Main saveShortcutKeysKeyNumberParamater options.txt value="+value);			list.add(new StringBuilder().append("key_").append(PFLM_ConfigData.shortcutKeysName).append(key).append(":").append(value).toString());		}*/		PFLM_Config.writerConfig(shortcutKeysKeyNumberCfgfile, list2);	}	public static void texturesNamberInit() {		//モデルリスト用テクスチャーパックナンバー作成		if (texturesNamberInitFlag) return;		texturesNamberInitFlag = true;		Map<String, ModchuModel_TextureBoxBase> textures = ModchuModel_TextureManagerBase.instance.textures;		PFLM_ConfigData.texturesNamberMap = new HashMap();		PFLM_ConfigData.texturesArmorNamberList = new LinkedList();		String textureName = null;		String t = null;		String t1 = null;		ModchuModel_TextureBoxBase ltb;		List<String> tempArmorNameList = new ArrayList();		//boolean debugFlag = false;		//ModchuModel_TextureManagerBase.instance.textureNameList();		for (int i2 = 0 ; i2 < textures.size() ; ++i2) {			ltb = ModchuModel_TextureManagerBase.instance.getTextureManagerTextures(i2, false);			textureName = ltb != null ? ModchuModel_TextureManagerBase.instance.getTextureBoxTextureName(ltb) : null;			t1 = textureName != null ? textureName : null;/*			if (t1 != null					&& t1.equals("default_Custom")) {				if (debugFlag) {					String ss = "PFLM_Main texturesNamberInit default_Custom debug";					Modchu_Main.setRuntimeException(ss);					return;				}				debugFlag = true;			}*/			if (ltb != null					&& t1 != null					&& !t1.isEmpty()) {				for (int color = 0 ; color < 16 ; color++) {					if (ModchuModel_TextureManagerBase.instance.getTextureBoxHasColor(ltb, color)) {						//Modchu_Debug.mDebug("color="+color+":i1="+i1[color]+" t1="+t1+" t="+t);						List<Integer> list1 = PFLM_ConfigData.texturesNamberMap.containsKey(color) ? PFLM_ConfigData.texturesNamberMap.get(color) : new LinkedList();						list1.add(i2);						PFLM_ConfigData.texturesNamberMap.put(color, list1);						t = t1;					}				}				if (ModchuModel_TextureManagerBase.instance.getTextureBoxHasArmor(ltb)) {					if (!tempArmorNameList.contains(textureName)) {						tempArmorNameList.add(textureName);						PFLM_ConfigData.texturesArmorNamberList.add(i2);					}				}			}		}	}	public static int optiNameCheck(String s, int j) {		int i = j;		String s1 = "HD_MT_AA";		if (s.indexOf(s1) != -1) {			Modchu_Debug.lDebug(s + " Check ok.");			i = 3;			getIconWidthTerrain = 0;		} else {			s1 = "HD_U";			if (s.indexOf(s1) != -1) {				/*125//*/optiVersionName = "HD_U ";				Modchu_Debug.lDebug(s + " Check ok.");				i = 3;			} else {				s1 = "HD";				/*125//*/optiVersionName = "HD ";				if (s.indexOf(s1) != -1) {					Modchu_Debug.lDebug(s + " Check ok.");					i = 4;				} else {					Modchu_Debug.lDebug("No OptiFine.Name Chenk error.Name="+s);				}			}		}		return i;	}	private static void initVersionCheckThread() {		if (!PFLM_ConfigData.versionCheck) return;		threadVersionCheck = new PFLM_ThreadVersionCheck();		threadVersionCheck.urlString = "https://raw.githubusercontent.com/Modchu/hp/master/PlayerFormLittleMaid";	}	private static void startVersionCheckThread() {		if (!PFLM_ConfigData.versionCheck) return;		threadVersionCheck.start();	}	public static boolean checkRelease(String s) {		return Modchu_Main.compareToVersionString(s, PFLM_Main.getVersion());	}	public static void setNewRelease(String s) {		newRelease = true;		newVersion = s;	}	public static boolean isPFLMModelsKeyDown() {		return Keyboard.isKeyDown(PFLMModelsKeyCode);	}	public static int getTextureListModelIndexOf(String s) {		Modchu_Debug.mDebug("getTextureListModelIndexOf s=" + s);		if (s != null); else return -1;		String s1 = null;		s = Modchu_Main.lastIndexProcessing(s, "_");		for(int i = 0; i < textureList.size(); i++) {			s1 = Modchu_Main.lastIndexProcessing(textureList.get(i), "_");			if (s1.equalsIgnoreCase(s)) {				return i;			}		}		return -1;	}	public static byte getPFLMFPacketConstant(String s) {		return Modchu_Main.isModUse("modchu.pflmf.modc_PFLMF") ? Modchu_CastHelper.Byte(Modchu_Reflect.getFieldObject("modchu.pflmf.PFLMF_IPacketConstant", s)) : (byte)-1;	}	public static boolean isPacetMode() {		if (Modchu_Main.isModUse("modchu.pflmf.modc_PFLMF")) {			Class c = Modchu_Reflect.loadClass("modchu.pflmf.PFLMF_Main");			if (c != null) return Modchu_CastHelper.Boolean(Modchu_Reflect.getFieldObject(c, "usePacket"));		}		return false;	}	public static void worldEventLoad(Object event) {		Modchu_Debug.Debug("PFLM_Main worldEventLoad");		if (!initModsLoaded) Modchu_Main.setRuntimeException("PFLM_Main worldEventLoad error !! initModsLoadedCount="+initModsLoadedCount+" maxInitModsLoadedCount="+maxInitModsLoadedCount);		initOnTickFlag = false;		if (!itemRendererReplaceFlag				&& Modchu_Main.itemRendererClass != null) itemRendererReplace();/*//125delete//-@-110		if (isPlayerForm				&& isSmartMoving				&& !Modchu_Main.isForge) {			if (!(RenderManager.instance.getEntityClassRenderObject(EntityPlayerSP.class) instanceof pflm_renderPlayer)) {				PFLM_PlayerController.addRenderer();				Modchu_Debug.Debug("onTickInGame SmartMovingAddRenderer");			}		}//@-@110*///125delete//-@-125		if (isSSP) {			Object mc = Modchu_AS.get(Modchu_AS.minecraftGetMinecraft);			Object playerController = Modchu_AS.get(Modchu_AS.minecraftPlayerController);			if (!Modchu_Reflect.loadClass("PFLM_PlayerController2").isInstance(playerController)				&& netclienthandler != null) {				Modchu_AS.set(Modchu_AS.minecraftPlayerController, Modchu_Reflect.newInstance("PFLM_PlayerController2", new Class[]{ Modchu_Reflect.loadClass("Minecraft") , Modchu_Reflect.loadClass("NetClientHandler") }, new Object[]{ mc, netclienthandler }));			}			Object entityplayer = Modchu_Reflect.getFieldObject(Modchu_Reflect.getField("PFLM_PlayerController2", "entityplayerformlittlemaidsp"), null);			Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftPlayer);			if (Modchu_AS.get(Modchu_AS.worldGetWorldInfoGetGameType) == Modchu_Reflect.getEnum("EnumGameType", "SURVIVAL")					&& !Modchu_Reflect.loadClass("PFLM_EntityPlayerSP2").isInstance(thePlayer)					&& entityplayer != null) {				Modchu_AS.set(Modchu_AS.minecraftPlayer, entityplayer);			}			if (Modchu_AS.getEnum(Modchu_AS.worldGetWorldInfoGetGameType) == Modchu_Reflect.getEnum("EnumGameType", "CREATIVE")					&& !Modchu_Reflect.loadClass("PFLM_PlayerControllerCreative2").isInstance(playerController)					&& netclienthandler != null) {				Modchu_AS.set(Modchu_AS.minecraftPlayerController, Modchu_Reflect.newInstance("PFLM_PlayerControllerCreative2", new Class[]{ Modchu_Reflect.loadClass("Minecraft") , Modchu_Reflect.loadClass("NetClientHandler") }, new Object[]{ mc, netclienthandler }));			}		}		if (Modchu_Main.isOlddays) {			if (!Modchu_Reflect.loadClass("PFLM_RenderPlayer2").isInstance(Modchu_AS.get(Modchu_AS.renderManagerGetEntityClassRenderObject, Modchu_Reflect.loadClass("EntityClientPlayerMP")))) {				Object ret = Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "addRenderer");				//PFLM_PlayerController2.addRenderer();				//Modchu_Debug.Debug("onTickInGame PFLM_PlayerController2.addRenderer()");			}		}/*		if (!addRendererFlag				&& Modchu_Main.isForge) {			addRendererFlag = true;			Map map = (Map) Modchu_Reflect.getFieldObject(RenderManager.class, "field_78729_o", "entityRenderMap", Modchu_Reflect.getFieldObject(RenderManager.class, "field_78727_a", "instance"));			//Map map = RenderManager.instance.entityRenderMap;			addRenderer(map);		}*/		//if(isSmartMoving				//&& mc != null) PFLM_SmartMovingOther.onTickInGame();//@-@125/*//125delete			if(minecraft.thePlayer.worldObj.isRemote) {				if (multiAutochangeMode) {					if (changeMode != PFLM_GuiMaster.modeOnline						&& setMultiAutochangeMode) {						Modchu_Debug.mDebug("onTickInGame setMultiAutochangeMode");						setMultiAutochangeMode = false;						changeMode = PFLM_GuiMaster.modeOnline;						clearDataMap();					} else {						setMultiAutochangeMode = false;					}				}				if (!isMulti) isMulti = true;				if (minecraft.theWorld == null						&& !setMultiAutochangeMode) {					Modchu_Debug.mDebug("onTickInGame !setMultiAutochangeMode minecraft.theWorld == null");					setMultiAutochangeMode = true;				}			} else {				if (isMulti) isMulti = false;			}*///125delete/*		if (isModelSize				&& !(minecraft.entityRenderer instanceof EntityRendererAltPlayerFormLittleMaid)) {			minecraft.entityRenderer = new EntityRendererAltPlayerFormLittleMaid(minecraft);			Modchu_Debug.mDebug("EntityRendererAltPlayerFormLittleMaid to set.");		}*//*		if (isPlayerForm					&& isSmartMoving) {				if (!(RenderManager.instance.getEntityClassRenderObject(EntityClientPlayerMP.class) instanceof PFLM_RenderPlayerSmart)						| !(RenderManager.instance.getEntityClassRenderObject(EntityOtherPlayerMP.class) instanceof PFLM_RenderPlayerSmart)) {					PFLM_PlayerController.addRenderer();					Modchu_Debug.Debug("onTickInGame SmartMovingAddRenderer");				}			}*///-@-123/*//125delete			if (!aetherAddRenderer && isAether) {				if (!(RenderManager.instance.getEntityClassRenderObject(thePlayer.getClass()) instanceof PFLM_RenderPlayerAether)) {					aetherAddRenderer = true;					RenderPlayer renderplayer = new PFLM_RenderPlayerAether();					Object obj = null;					try {						obj = getPrivateValue(RenderManager.class, RenderManager.instance, "entityRenderMap");					} catch (Exception e) {					}					if (obj == null) {						try {							obj = getPrivateValue(RenderManager.class, RenderManager.instance, "o");						} catch (Exception e) {							e.printStackTrace();						}					}					if (obj != null) {						((Map) obj).put(thePlayer.getClass(), renderplayer);						((Map) obj).put(EntityOtherPlayerMP.class, renderplayer);						renderplayer.setRenderManager(RenderManager.instance);						Modchu_Debug.lDebug("aetherAddRenderer");						//Modchu_Debug.lDebug("getEntityClassRenderObject "+(RenderManager.instance.getEntityClassRenderObject(thePlayer.getClass())));					} else {						Modchu_Debug.lDebug("aetherAddRenderer obj null !!");					}				}			}*///125delete//@-@123//-@-b166	}	private static void itemRendererReplace() {		int version = Modchu_Main.getMinecraftVersion();		if (version < 170				| version > 189) {			itemRendererReplaceFlag = true;			return;		}		Object itemRenderer = null;		Object entityRenderer = Modchu_AS.get(Modchu_AS.minecraftEntityRenderer);		if (entityRenderer != null); else Modchu_Debug.Debug("PFLM_Main itemRendererReplace entityRenderer == null !!");		for(int i = 0; i < 2; i++) {			itemRenderer = i == 0 ? Modchu_AS.get(Modchu_AS.minecraftEntityRendererItemRenderer) : Modchu_AS.get(Modchu_AS.renderManagerItemRenderer);			if (!instanceCheck(Modchu_Main.itemRendererClass, itemRenderer)) {				Object itemRenderer2 = null;				try {					itemRenderer2 = Modchu_Main.newModchuCharacteristicObject("Modchu_ItemRenderer", PFLM_ItemRendererMaster.class);					Modchu_Debug.mDebug("PFLM_Main itemRendererReplace itemRenderer2="+itemRenderer2);				} catch (Exception e) {					Modchu_Debug.systemLogDebug("PFLM_Main itemRendererReplace itemRenderer2 != null");					Modchu_Debug.systemLogDebug("", 2, e);				}				if (itemRenderer2 != null) {					Modchu_Debug.mDebug("PFLM_Main itemRendererReplace itemRenderer2 != null");					if (Modchu_Main.getMinecraftVersion() < 160							&& Modchu_LMMManager.isMMM) {						itemRenderer2 = Modchu_Main.newModchuCharacteristicObject("ModchuMMM_ItemRenderer", itemRenderer2);						if (itemRenderer2 != null) {							Modchu_Debug.mDebug("PFLM_Main itemRendererReplace 2 itemRenderer2="+itemRenderer2);						} else {							Modchu_Debug.mDebug("PFLM_Main itemRendererReplace 2 itemRenderer2 == null !!");							return;						}					} else {						//Modchu_Debug.mDebug("PFLM_Main itemRendererReplace 2 else");					}					if (i == 0) {						Modchu_AS.set(Modchu_AS.entityRendererItemRenderer, itemRenderer2);					} else if (i == 1) {						Modchu_AS.set(Modchu_AS.renderManagerItemRenderer, itemRenderer2);					}					if (Modchu_Main.isHD) {						initItemRendererHD = true;					} else {						initItemRenderer = true;					}					itemRendererReplaceFlag = true;				} else {					Modchu_Debug.mDebug("PFLM_Main itemRendererReplace itemRenderer2 == null !!");				}			}		}	}	public static Object getEntityMaster(Object entity) {		Object master = Modchu_Reflect.getFieldObject(entity.getClass(), "master", entity);		return master != null ? master : entity;	}}