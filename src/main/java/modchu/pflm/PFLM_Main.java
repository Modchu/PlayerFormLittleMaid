package modchu.pflm;import java.io.File;import java.lang.reflect.Field;import java.util.ArrayList;import java.util.Iterator;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Random;import java.util.concurrent.ConcurrentHashMap;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_AS;import modchu.lib.characteristic.Modchu_EntityPlayerDummy;import modchu.lib.characteristic.Modchu_GuiModelView;import modchu.lib.characteristic.Modchu_RenderPlayer;import modchu.lib.characteristic.Modchu_RenderPlayerBase;import modchu.lib.characteristic.Modchu_RenderPlayerDummy;import modchu.lib.characteristic.Modchu_RenderPlayerDummyBase;import modchu.lib.characteristic.Modchu_Version;import modchu.lib.replacepoint.Modchu_ModelMultiReplacePoint;import modchu.model.ModchuModel_IModelCaps;import modchu.model.ModchuModel_Main;import modchu.model.ModchuModel_ModelDataBase;import modchu.model.multimodel.MultiModelBaseBiped;import modchu.model.multimodel.MultiModelCustom;import modchu.model.replacepoint.ModchuModel_FileManagerReplacePoint;import modchu.model.replacepoint.ModchuModel_TextureManagerReplacePoint;import net.minecraft.src.MultiModel_Biped;import org.lwjgl.input.Keyboard;import org.lwjgl.input.Mouse;public class PFLM_Main{	public static final String version = "26";	public static Object baseModInstance;	public static PFLM_Main pflm_main;	public static Modchu_RenderPlayerBase renderPlayerInstance;	public static Modchu_RenderPlayerDummyBase renderPlayerDummyInstance;	public static final String modName = "PlayerFormLittleMaid";	public static final String versionString = ""+ Modchu_Version.version + "-" + version;	public static boolean isThirdPersonCamera = false;	public static boolean isnoBiomesX = false;	public static boolean isSmartMoving = false;	public static boolean isShaders = false;	public static boolean isShader = false;	public static boolean isDynamicLights = false;	public static boolean isAether = false;	public static boolean isGulliver = false;	public static boolean is2D = false;	public static boolean isCCTV = false;	public static boolean isWait = false;	public static boolean isMulti = false;	public static boolean isOlddays = false;	public static boolean isSSP = false;	public static boolean isLMM = false;	public static boolean isPlayerAPI = false;	public static boolean guiEnable = true;	public static boolean entityReplaceFlag = false;	public static boolean initItemRenderer = false;	public static boolean initItemRendererHD = false;	public static boolean oldRender = false;	public static boolean isPacetMode = false;	public static boolean newRelease = false;	public static boolean initModsLoadedFlag = false;	private static boolean isReleasekey = false;	private static boolean keySitLock = false;	private static boolean itemRendererReplaceFlag = false;	private static boolean runtimeExceptionFlag = false;	private static boolean texturesNamberInitFlag = false;	private static boolean setMultiAutochangeMode = true;	private static boolean isRemote = false;	private static File cfgdir;	private static File mainCfgfile;	public static File cfgfile;	public static File othersCfgfile;	private static File modelListfile;	private static File textureListfile;	private static File shortcutKeysCfgfile;	public static List<String> showModelList = new ArrayList<String>();	public static List<String> textureList = new ArrayList<String>();	public static ConcurrentHashMap playerLocalData = new ConcurrentHashMap();	public static String newVersion = "";	private static int erpflmCheck = 0;	public static int PFLMModelsKeyCode;	public static Class BipedClass;	private static Random rnd = new Random();	private static String runtimeExceptionString = null;	//不具合有り機能封印	public static boolean guiShowArmorSupport = false;	//対応minecraftバージョンによって使っていたりいなかったり	public static boolean isSwapGuiSelectWorld = false;	public static boolean addRendererFlag = false;	private static boolean aetherAddRenderer;	private static int keyCode = 0;	private static int keybindingTime = 0;	public static String optiVersionName;	public static int getIconWidthTerrain = 16;	public static boolean smartMovingAddRenderer = false;	public static boolean smartMovingAddRenderer2 = false;	public static boolean smartMovingVersion = false;	public static boolean aetherInit = false;	public static Object netclienthandler;	public PFLM_Main() {		pflm_main = this;	}	public static String getName() {		return modName;	}	public static String getVersion()	{		return versionString;	}	static{		String s = System.getenv("debugPlayerName");		if (s != null) {			Modchu_Debug.debugPlayerName = s;		}	}	public static void load() {		Modchu_Debug.systemDebug("PFLM_Main load", 3);		//MinecraftForge判定		boolean isForge = false;		try {			String s = ""+Class.forName("net.minecraft.src.FMLRenderAccessLibrary");			if (s != null) isForge = true;		} catch (Exception e) {		}		//System.out.println("modc_PFLM_PlayerFormLittleMaid-load() packageName="+packageName);		cfgdir = new File(Modchu_AS.getFile(Modchu_AS.minecraftMcDataDir), "/config/");		mainCfgfile = new File(cfgdir, ("PlayerFormLittleMaid.cfg"));		cfgfile = new File(cfgdir, ("PlayerFormLittleMaidGuiSave.cfg"));		othersCfgfile = new File(cfgdir, ("PlayerFormLittleMaidGuiOthersPlayer.cfg"));		modelListfile = new File(cfgdir, ("PlayerFormLittleMaidModelList.cfg"));		textureListfile = new File(cfgdir, ("PlayerFormLittleMaidtextureList.cfg"));		shortcutKeysCfgfile = new File(cfgdir, ("PlayerFormLittleMaidShortcutKeys.cfg"));		loadcfg();		ModchuModel_FileManagerReplacePoint.getModFile("playerformlittlemaid", "MultiModel");		ModchuModel_FileManagerReplacePoint.getModFile("playerformlittlemaid", "playerformlittlemaid");		ModchuModel_TextureManagerReplacePoint.instance.addSearch("playerformlittlemaid", "/assets/minecraft/textures/entity/littleMaid/", ModchuModel_Main.modelClassName+"_");		loadShortcutKeysParamater();		if (!Modchu_Main.isForge) {			Modchu_Reflect.invokeMethod("ModLoader", "setInGameHook", new Class[]{ Modchu_Reflect.loadClass("BaseMod"), boolean.class, boolean.class }, new Object[]{ baseModInstance, true, true });		}		shortcutKeysinit();		Modchu_EntityPlayerDummy.masterClass = PFLM_EntityPlayerDummyMaster.class;	}	public static void modsLoaded() {		if (initModsLoadedFlag) return;		initModsLoadedFlag = true;		//Modchu_Main.initModsLoadedCount 1		Modchu_Main.initModsLoadedCount++;		if (Modchu_Main.isForge) {			Object o = Modchu_Reflect.invokeMethod("cpw.mods.fml.common.Loader", "instance");			if (o != null) {				List list = (List) Modchu_Reflect.invokeMethod("cpw.mods.fml.common.Loader", "getActiveModList", o);				if (list != null) {					int size = list.size();					String name = null;					for (int i = 0; i < size; i++)					{						o = list.get(i);						name = (String) Modchu_Reflect.invokeMethod("cpw.mods.fml.common.ModContainer", "getName", o);						if (name.startsWith("Aether")) {							isAether = true;							Modchu_Debug.lDebug("Aether Check ok.");							aetherAddRenderer = true;							oldRender = true;							Class PlayerCoreRender = Modchu_Reflect.loadClass("net.aetherteam.playercore_api.cores.PlayerCoreRender");							Modchu_Debug.lDebug("Aether Check PlayerCoreRender="+PlayerCoreRender);							Modchu_Debug.lDebug("Aether Check Modchu_Reflect.loadClass(PFLM_RenderPlayerAether)="+Modchu_Reflect.loadClass("PFLM_RenderPlayerAether"));							Object RenderManagerInstance = Modchu_AS.get(Modchu_AS.renderManagerInstance);							Object render = Modchu_AS.get(Modchu_AS.renderManagerGetEntityClassRenderObject, Modchu_Reflect.loadClass("EntityPlayer"));							Class PFLMF_Aether = Modchu_Reflect.loadClass("modchu.pflmf.PFLMF_Aether");							if (PFLMF_Aether != null) ;else throw new RuntimeException("PlayerFormLittleMaidFML PFLMF_Aether not found !!");							//boolean b1 = Modchu_Reflect.setFieldObject("modchu.pflmf.PFLMF_Aether", "render_PlayerCoreRender", render);							//if (!b1) throw new RuntimeException("PlayerFormLittleMaidFML PFLMF_Aether set error !!");							Modchu_Debug.lDebug("Aether Check render.getClass()="+render.getClass());							Modchu_Reflect.invokeMethod("modchu.pflmf.PFLMF_Aether", "init");							renderPlayerDummyInstance = new Modchu_RenderPlayerDummy(PFLM_RenderMasterBase.class);							renderPlayerInstance = new Modchu_RenderPlayer(Modchu_Reflect.loadClass("modchu.pflm.PFLM_RenderPlayerAether"));							if (renderPlayerInstance != null) ;else {								throw new RuntimeException("Aether Check pflm_RenderPlayer == null !!");							}							renderPlayerInstance.master = new PFLM_RenderPlayerMaster(renderPlayerInstance);							Modchu_AS.set(Modchu_AS.renderRenderManager, renderPlayerInstance);							Object pflm_RenderPlayerAether = Modchu_Reflect.newInstance("modchu.pflmf.PFLMF_RenderPlayerAether");							if (pflm_RenderPlayerAether != null) ;else {								throw new RuntimeException("Aether Check PFLMF_RenderPlayerAether render == null !!");							}							Modchu_AS.set(Modchu_AS.renderRenderManager, pflm_RenderPlayerAether);							Modchu_Reflect.setFieldObject("modchu.pflmf.PFLMF_Aether", "renderPlayerAether", pflm_RenderPlayerAether);							Modchu_Reflect.setFieldObject(PlayerCoreRender, "nextPlayerCore", pflm_RenderPlayerAether, render);							Modchu_Debug.lDebug("Aether Check render="+render.getClass());							//Modchu_Reflect.setFieldObject(PlayerCoreRender, "shouldCallSuper", render, true);							//cpw.mods.fml.client.registry.RenderingRegistry.registerEntityRenderingHandler(Modchu_Reflect.loadClass("net.aetherteam.playercore_api.cores.PlayerCoreClient"), (Render) pflm_RenderPlayer);							//Modchu_Reflect.invokeMethod("cpw.mods.fml.client.registry.RenderingRegistry", "registerEntityRenderingHandler", new Class[]{ Class.class, Render.class }, new Object[]{ Modchu_Reflect.loadClass("EntityPlayer"), pflm_RenderPlayer });							//Modchu_Debug.lDebug("Aether Check last nextPlayerCore="+Modchu_Reflect.getFieldObject(PlayerCoreRender, "nextPlayerCore", Modchu_Reflect.getFieldObject("modchu.pflmf.PFLMF_Aether", "render_PlayerCoreRender")));							break;						}					}				} else {					Modchu_Debug.lDebug("Aether Check list == null !!");				}			} else {				Modchu_Debug.lDebug("Aether Check o == null !!");			}		}		Modchu_Debug.systemDebug("PFLM_Main modsLoadedInit", 4);		renderPlayerDummyInstance = new Modchu_RenderPlayerDummy(PFLM_RenderMasterBase.class);		Modchu_Debug.mDebug("PFLM_Main loadInit() renderPlayerDummyInstance="+renderPlayerDummyInstance);		Modchu_AS.set(Modchu_AS.renderRenderManager, renderPlayerDummyInstance);		//Modchu_Main.initModsLoadedCount 2		Modchu_Main.initModsLoadedCount++;		if (!addRendererFlag				&& Modchu_Main.isForge) {			addRendererFlag = true;			addRenderer(null);		}		//Modchu_Main.initModsLoadedCount 3		Modchu_Main.initModsLoadedCount++;		if (Modchu_Reflect.loadClass(Modchu_Main.getClassName("net.minecraft.src.MultiModel")) != null) ;else {			runtimeExceptionFlag = true;			runtimeExceptionString = "MultiModel_DefaultModelSet not found !!";		}		int i1 = Modchu_Main.getVersionStringConversionInt(Modchu_Main.version);		if (i1 < 702) {			Modchu_Debug.lDebug("ModchuLib Version is old !! VersionInt="+i1);			runtimeExceptionFlag = true;			runtimeExceptionString = "ModchuLib Version is old !!";		} else {			Modchu_Debug.lDebug("ModchuLib VersionInt="+i1);		}		loadParamater();		loadTextureList();		loadOthersPlayerParamater();		if (PFLM_ConfigData.versionCheck) startVersionCheckThread();		//Modchu_Main.initModsLoadedCount 4		Modchu_Main.initModsLoadedCount++;		//対応MOD導入チェック/*		List list = ModLoader.getLoadedMods();		int size = list.size();		BaseMod mod = null;		String name = null;		for (int i = 0; i < size; i++)		{			mod = (BaseMod)list.get(i);			name = mod.getClass().getSimpleName();			if (name.equals("mod_ThirdPersonCamera")) {				isThirdPersonCamera = true;				Modchu_Debug.lDebug("mod_ThirdPersonCamera Check ok.");			}			else if (name.equals("mod_noBiomesX")) {				isnoBiomesX = true;				Modchu_Debug.lDebug("mod_noBiomesX Check ok.");			}			else if (name.equals("mod_SmartMoving")) {				if (!isRelease()) {					isSmartMoving = true;					Modchu_Debug.lDebug("mod_SmartMoving Check ok.");				}			}			else if (name.equals("mod_Aether")) {				isAether = true;				Modchu_Debug.lDebug("mod_Aether Check ok.");			}			else if (name.equals("mod_2DCraft")) {				is2D = true;				Modchu_Debug.lDebug("mod_2DCraft Check ok.");			}			else if (name.equals("mod_CCTV")) {				isCCTV = true;				Modchu_Debug.lDebug("mod_CCTV Check ok.");			}			else if (name.equals("mod_LMM_littleMaidMob")) {				isLMM = true;				Modchu_Debug.lDebug("mod_LMM_littleMaidMob Check ok.");			}		}*/		Object o = Modchu_Reflect.invokeMethod("cpw.mods.fml.common.Loader", "instance");		if (o != null) {			List list = (List) Modchu_Reflect.invokeMethod("cpw.mods.fml.common.Loader", "getActiveModList", o);			if (list != null) {				int size = list.size();				String name = null;				for (int i = 0; i < size; i++)				{					o = list.get(i);					name = (String) Modchu_Reflect.invokeMethod("cpw.mods.fml.common.ModContainer", "getName", o);					if (name.startsWith("ThirdPersonCamera")) {						isThirdPersonCamera = true;						Modchu_Debug.lDebug("ThirdPersonCamera Check ok.");					}					else if (name.startsWith("noBiomesX")) {						isnoBiomesX = true;						Modchu_Debug.lDebug("noBiomesX Check ok.");					}					else if (name.startsWith("SmartMoving")) {						if (!Modchu_Main.isRelease()) {							isSmartMoving = true;							Modchu_Debug.lDebug("SmartMoving Check ok.");						}					}					else if (name.startsWith("Aether")) {						isAether = true;						Modchu_Debug.lDebug("Aether Check ok.");					}					else if (name.startsWith("2DCraft")) {						is2D = true;						Modchu_Debug.lDebug("2DCraft Check ok.");					}					else if (name.startsWith("CCTV")) {						isCCTV = true;						Modchu_Debug.lDebug("CCTV Check ok.");					}					else if (name.startsWith("LMM_littleMaidMob")) {						isLMM = true;						Modchu_Debug.lDebug("LMM_littleMaidMob Check ok.");					}				}			}		}		//mod_SmartMovingMp Shaders MinecraftForgeなど対応クラス存在チェック		String className1[] = {				"mod_SmartMovingMp", "Shaders", "DynamicLights", "Shader", "EntityPlayerSP2",				"RenderPlayer2"		};		String test2 = null;		String s = null;		for(int n = 0 ; n < className1.length ; n++){			try {				test2 = Modchu_Main.getClassName(className1[n]);				//Modchu_Debug.mDebug("test2 = "+test2);				test2 = ""+Class.forName(test2);				Modchu_Debug.lDebug(test2 + " Check ok.");				if(n == 0) isSmartMoving = true;				if(n == 1) isShaders = true;				if(n == 2) isDynamicLights = true;				if(n == 3) {					isShader = true;					erpflmCheck = 7;				}				if(n == 4) {					try {						s = Modchu_Main.getClassName("EntityPlayerSP2");						if (s != null) {							o = Modchu_Reflect.getFieldObject(s, "armor", -1);							if (o != null) isSSP = true;						}					} catch(Exception e) {					}				}				if(n == 5) {					try {						o = Modchu_Reflect.getFieldObject("ItemRenderer", "olddays", -1);						if (o != null) {							isOlddays = true;							Modchu_Debug.lDebug("ItemRenderer olddays Check ok.");						} else {							Modchu_Debug.lDebug("ItemRenderer olddays Check false.");						}					} catch(Exception e) {					}				}			} catch (ClassNotFoundException e) {			}		}    	if (!isThirdPersonCamera) {			Modchu_Debug.lDebug("isThirdPersonCamera false.");		}		if (!isnoBiomesX) {			Modchu_Debug.lDebug("isnoBiomesX false.");		}		if (!isSmartMoving) {			Modchu_Debug.lDebug("isSmartMoving false.");		}		if (!isShaders) {			Modchu_Debug.lDebug("isShaders false.");		}		if (!isDynamicLights) {			Modchu_Debug.lDebug("isDynamicLights false.");		}		if (!isShader) {			Modchu_Debug.lDebug("isShader false.");		}		if (!isAether) {			Modchu_Debug.lDebug("isAether false.");		}		if (!is2D) {			Modchu_Debug.lDebug("is2D false.");		}		if (!isCCTV) {			Modchu_Debug.lDebug("isCCTV false.");		}		if (!isOlddays) {			Modchu_Debug.lDebug("No Olddays.");		}		if (!isLMM) {			Modchu_Debug.lDebug("No littleMaidMob.");		}		//Modchu_Main.initModsLoadedCount 5		Modchu_Main.initModsLoadedCount++;		if (isSmartMoving) {			PFLM_ConfigData.isModelSize = false;			ModchuModel_Main.skirtFloats = false;			ModchuModel_Main.modelClassName = "MultiModelSmart";			BipedClass = Modchu_Reflect.loadClass(Modchu_Main.getClassName("MultiModelSmart_Biped"));			ModchuModel_TextureManagerReplacePoint.instance.addSearch(ModchuModel_Main.modelClassName, "/mob/littleMaid/", ModchuModel_Main.modelClassName+"_");			ModchuModel_TextureManagerReplacePoint.instance.addSearch("playerformlittlemaid", "/mob/littleMaid/", ModchuModel_Main.modelClassName+"_");		} else {			BipedClass = MultiModel_Biped.class;		}		//Modchu_Main.initModsLoadedCount 6		Modchu_Main.initModsLoadedCount++;		if (PFLM_ConfigData.isPlayerForm) {			int ID = Modchu_AS.getInt(Modchu_AS.vacancyGlobalEntityID);			if (ID > -1) {				if (Modchu_Main.isForge) Modchu_Reflect.invokeMethod("cpw.mods.fml.common.registry.EntityRegistry", "registerGlobalEntityID", new Class[]{ Class.class, String.class, int.class }, new Object[]{ Modchu_EntityPlayerDummy.class, "PFLM_EntityPlayerDummy", ID });				else Modchu_Reflect.invokeMethod("ModLoader", "registerEntityID", new Class[]{ Class.class, String.class, int.class }, new Object[]{ Modchu_EntityPlayerDummy.class, "PFLM_EntityPlayerDummy", ID });			}		}		if (PFLM_ConfigData.isModelSize) {/*//110delete//-@-100				// OptiFine判定L				try {					s = (String) getPrivateValue(RenderGlobal.class, this, "version");					String s1 = "OptiFine";					if (s.indexOf(s1) != -1) {						Modchu_Debug.Debug(s + " Check ok.");						erpflmCheck = 2;					}				} catch (Exception exception) {					//Modchu_Debug.Debug("No OptiFineL.");				}//@-@100*///110delete			// OptiFine判定			boolean t = false;			String className2 = Modchu_Main.getClassName("Config");			test2 = null;			int n1 = 0;			try {				test2 = ""+Class.forName(className2);				Modchu_Debug.lDebug(test2 + " Check ok.");				t = true;				// b166deleteerpflmCheck = 4;			} catch (ClassNotFoundException e) {			}			if (t) {//-@-b166				s = null;				Field f11;/*//110delete				try {					f11 = Class.forName(className2).getDeclaredField("version");					f11.setAccessible(true);					String s1 = (String) f11.get(null);					erpflmCheck = optiNameCheck(s1, erpflmCheck);				} catch (Exception e1) {					Modchu_Debug.lDebug("No OptiFine.");				}//@-@b166*///110delete//-@-110				try {					f11 = Class.forName(className2).getField("OF_NAME");					try {						s = (String) f11.get(null);					} catch (Exception e) {						e.printStackTrace();						Modchu_Debug.lDebug("No OptiFine.");					}				} catch (Exception e1) {					Modchu_Debug.lDebug("No OptiFine.");				}				erpflmCheck = optiNameCheck(s, erpflmCheck);				if (erpflmCheck <= 1) {					boolean err = false;					String s2 = "";					try {						f11 = Class.forName(className2).getField("OF_EDITION");						try {							s = (String) f11.get(null);							erpflmCheck = optiNameCheck(s, erpflmCheck);							try {								f11 = Class.forName(className2).getField("VERSION");								try {									s2 = (String) f11.get(null);								} catch (Exception exception) {									err = true;								}							} catch (Exception exception) {								err = true;							}//@-@110//-@-123							String s1 = "B2";							if (s2.indexOf(s1) != -1) {								Modchu_Debug.lDebug("OptiFine "+ s2 + " Check ok.");								// 125deleteerpflmCheck = erpflmCheck == 3 ? 6 : 5 ;								/*125//*/erpflmCheck = 6;							}//@-@123//-@-110//-@-125							s1 = "B3";							if (s2.indexOf(s1) != -1) {								Modchu_Debug.lDebug("OptiFine "+ s2 + " Check ok.");								erpflmCheck = 5;							}//@-@125						} catch (Exception e) {							err = true;						}					} catch (Exception exception) {						err = true;					}					if(err) {						Modchu_Debug.lDebug("No OptiFine.");					}				}//@-@110			} else {/*//b166delete				try {					s = "FontRenderer";					Package pac = getClass().getPackage();					if (pac != null) s = pac.getName().concat(".").concat(s);					Method method = Class.forName(s).getDeclaredMethod("lineIsCommand", new Class[] {int.class});					erpflmCheck = 2;				} catch (Exception e1) {					Modchu_Debug.lDebug("No Optimine.");*///b166delete//-@-b166				Modchu_Debug.lDebug("No OptiFine Config.");//-@-125				try {					s = "VersionThread";					s = ""+Class.forName(s);					erpflmCheck = 2;				} catch (Exception e1) {					Modchu_Debug.lDebug("No OptiFineL.");				}//@-@125//@-@b166				// b166delete}			}		}/*//125delete		if (isModelSize) {			try {				if (isCCTV) {					String s3;					entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererCCTV"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });					entityRenderer.itemRenderer = newInstanceItemRenderer();					s3 = "PFLM_EntityRendererCCTV";					Modchu_Debug.lDebug(s3 + " to set.");					Class CCTV = Modchu_Reflect.loadClass(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("mod_CCTV"));					Modchu_Reflect.setFieldObject(CCTV, "c", entityRenderer);					Modchu_Reflect.setFieldObject(CCTV, "rendererReplaced", true);				} else				if (is2D) {					String s3;					entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRenderer2D"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });					s3 = "PFLM_EntityRenderer2D";					Modchu_Debug.lDebug(s3 + " to set.");				} else				if (erpflmCheck == 0) {					entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRenderer"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });					Modchu_Debug.lDebug("PFLM_EntityRenderer to set.");				} else				if (erpflmCheck == 1) {					entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererForge"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });					Modchu_Debug.lDebug("PFLM_EntityRendererForge to set.");				} else				if (erpflmCheck == 2) {					entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiL"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });					Modchu_Debug.lDebug("PFLM_EntityRendererOptiL to set.");				} else				if (erpflmCheck == 3) {					String s3;					if(isShaders) {//-@-125						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShaders"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererShaders";//@-@125*///125delete/*//125delete						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShadersHDM"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererShadersHDM";*///125delete/*//125delete					} else {//-@-125						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHD"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererOptiHD";//@-@125*///125delete/*//125delete						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHDM"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererOptiHDM";*///125delete/*//125delete					}					Modchu_Debug.lDebug(s3 + " to set.");				} else				if (erpflmCheck == 4) {					String s3;					if(isShaders) {						//-@-125						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShadersHDU"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererShadersHDU";//@-@125*///125delete/*//125delete						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShaders"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererShaders";*///125delete/*//125delete					} else {//-@-125						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHDU"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererOptiHDU";//@-@125*///125delete/*//125delete						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHD"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererOptiHD";*///125delete/*//125delete					}					Modchu_Debug.lDebug(s3 + " to set.");				} else					if (erpflmCheck == 5) {						String s3;						if(isShaders) {//-@-125							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShadersHDU3"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererShadersHDU3";//@-@125*///125delete/*//125delete							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShadersC"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererShadersC";*///125delete/*//125delete						} else {//-@-125							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHDU3"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererOptiHDU3";//@-@125*///125delete/*//125delete							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHDC"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererOptiHDC";*///125delete/*//125delete						}						Modchu_Debug.lDebug(s3 + " to set.");					} else						if (erpflmCheck == 6) {						String s3;						if(isShaders) {//-@-125							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShadersHDU3"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererShadersHDU3";//@-@125*///125delete/*//125delete							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShadersHDMTC"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererShadersHDMTC";*///125delete/*//125delete						} else {//-@-125							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHDU2"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererOptiHDU2";//@-@125*///125delete/*//125delete							entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererOptiHDMTC"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });							s3 = "PFLM_EntityRendererOptiHDMTC";*///125delete/*//125delete						}						Modchu_Debug.lDebug(s3 + " to set.");					} else					if (erpflmCheck == 7) {					String s3;					if(isShader) {//-@-110						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRendererShader"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRendererShader";//@-@110*///125delete/*//110delete						entityRenderer = (EntityRenderer) Modchu_Reflect.newInstance(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PFLM_EntityRenderer"), new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc });						s3 = "PFLM_EntityRenderer";*///110delete/*//125delete						Modchu_Debug.lDebug(s3 + " to set.");					}				}			} catch(Exception exception) {				Modchu_Debug.lDebug("PFLM_EntityRenderer Fail to set!");				exception.printStackTrace();			}		} else {			if (itemRendererClass != null) {				if (!instanceCheck(itemRendererClass, entityRenderer.itemRenderer)) {					ItemRenderer itemRenderer2 = newInstanceItemRenderer();					if (itemRenderer2 != null) {						Modchu_Debug.mDebug("modsLoaded itemRenderer2 != null");						entityRenderer.itemRenderer = itemRenderer2;						if (isHD) {							initItemRendererHD = true;						} else {							initItemRenderer = true;						}						if (isCCTV) {							Class CCTV = Modchu_Reflect.loadClass(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("mod_CCTV"));							Class EntityExtensibleRenderer = Modchu_Reflect.loadClass(Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("EntityExtensibleRenderer"));							Modchu_Reflect.setFieldObject(EntityExtensibleRenderer, "c", "itemRenderer", Modchu_Reflect.getFieldObject(CCTV, "c"), itemRenderer2);						}					} else {						Modchu_Debug.mDebug("modsLoaded itemRenderer2 == null !!");					}				}			}		}/*		if(isSmartMoving) {			isModelSize = false;			try {				s = Modchu_Main.mod_mod_Modchu_ModchuLib.getClassName("PlayerAPI");				Method mes = null;				mes = Class.forName(s).getMethod("unregister", new Class[] {String.class});				if(isSmartMoving) mes.invoke(null, "Smart Moving");				//PlayerAPI.unregister("Smart Moving");			} catch (Exception e) {			}			PFLM_PlayerBaseSmartServer.registerPlayerBase();			PFLM_SmartOtherPlayerData.initialize(gameSettings, false, ModLoader.getLogger());		}*/		// PlayerAPI判定		isPlayerAPI = false;		if (Modchu_Main.getMinecraftVersion() > 69				&& !PFLM_ConfigData.isPlayerAPIDebug				&& entityReplaceFlag) {			//PlayerAPI.register("PlayerFormLittleMaid", PFLM_PlayerBase.class);			s = Modchu_Main.getClassName("PlayerAPI");			if (Modchu_Reflect.loadClass(s, -1) != null) {				Class base;				if (isSmartMoving) {					base = Modchu_Reflect.loadClass("PFLM_PlayerBaseSmart");				} else {					base = Modchu_Reflect.loadClass("PFLM_PlayerBase");				}				Modchu_Reflect.invokeMethod(s, "register", new Class[] {String.class, Class.class}, null, new Object[]{ "PlayerFormLittleMaid", base });				isPlayerAPI = true;				Modchu_Debug.Debug("PlayerAPI register.");			}		}		if (!isPlayerAPI) {			Modchu_Debug.lDebug("PlayerAPI false.");		}		//Modchu_Main.initModsLoadedCount 7		Modchu_Main.initModsLoadedCount++;		if (!PFLM_ConfigData.isClearWater) {			PFLM_ConfigData.setWatherFog = PFLM_ConfigData.watherFog;			PFLM_ConfigData.setWatherFog2 = PFLM_ConfigData.watherFog2;			PFLM_ConfigData.setwaterStillLightOpacity = PFLM_ConfigData.waterStillLightOpacity;			PFLM_ConfigData.setwaterMovingLightOpacity = PFLM_ConfigData.waterMovingLightOpacity;		} else {			int version = Modchu_Main.getMinecraftVersion();			if (version > 169) {				Modchu_AS.set(Modchu_AS.blockSetLightOpacity, Modchu_AS.get(Modchu_AS.getItem, "water") ,PFLM_ConfigData.setwaterStillLightOpacity);			} else {				Modchu_AS.set(Modchu_AS.blockSetLightOpacity, Modchu_AS.get(Modchu_AS.getItem, "waterStill") ,PFLM_ConfigData.setwaterStillLightOpacity);				Modchu_AS.set(Modchu_AS.blockSetLightOpacity, Modchu_AS.get(Modchu_AS.getItem, "waterMoving") ,PFLM_ConfigData.setwaterMovingLightOpacity);			}		}		Class c = Modchu_Reflect.loadClass("modchu.pflmf.PFLMF_Main");		if (c != null) isPacetMode = (Boolean) Modchu_Reflect.getFieldObject(c, "usePacket");		if (entityReplaceFlag) Modchu_Debug.Debug("PFLM-EntityPlayerReplace setting on.");		else Modchu_Debug.Debug("PFLM-EntityPlayerReplace setting off.");		//Modchu_Main.initModsLoadedCount 8		Modchu_Main.initModsLoadedCount++;		Modchu_Main.initModsLoadedFlag = true;	}	private static void shortcutKeysinit() {		LinkedList keyBindingsList = new LinkedList();		LinkedList<String[]> stringLocalizationList = new LinkedList();		systemShortcutKeysinit(keyBindingsList, stringLocalizationList);		shortcutKeysinit(keyBindingsList, stringLocalizationList);		Object[] keyBindings = new Object[keyBindingsList.size()];		boolean[] repeatings = new boolean[keyBindingsList.size()];		int i = 0;		for (Iterator iterator = keyBindingsList.iterator(); iterator.hasNext();) {			keyBindings[i] = iterator.next();			repeatings[i] = true;			Modchu_Main.registerKey(baseModInstance, keyBindings[i], false);			i++;		}		if (Modchu_Main.isForge				&& Modchu_Main.getMinecraftVersion() < 170) {			Object handler = Modchu_Reflect.newInstance("modchu.pflm.fmlonly.PFLM_KeyHandler", new Class[]{ Modchu_Reflect.loadClass("KeyBinding[]"), boolean[].class }, new Object[]{ keyBindings, repeatings });			Modchu_Main.registerKeyHandler(handler);		}		String[] s1;		for (Iterator iterator = stringLocalizationList.iterator(); iterator.hasNext();) {			s1 = (String[]) iterator.next();			Modchu_Main.addLocalization(s1[0], s1[1]);		}	}	private static void systemShortcutKeysinit(LinkedList keyBindingsList, LinkedList<String[]> stringLocalizationList) {		boolean keyFlag = Modchu_Main.getMinecraftVersion() > 129 ? Modchu_Main.isForge : false;		//キーの登録と名称変換テーブルの登録		String s;		String s2;		if (PFLM_ConfigData.isPlayerForm) {			s = "key.PlayerFormLittleMaid";			keyBindingsList.add(Modchu_AS.get(Modchu_AS.newInstanceKeyBinding, s, 41, "PFLM"));			//ModLoaderClientHelper.registerKeyBinding(this, Modchu_AccessSupport.instance.newInstanceKeyBinding(s, 41), keyFlag);			s2 = "PlayerFormLittleMaidGui";			stringLocalizationList.add(new String[]{ s, s2 });			s = "key.PFLM Models Key";			keyBindingsList.add(Modchu_AS.get(Modchu_AS.newInstanceKeyBinding, s, 64, "PFLM"));			//ModLoaderClientHelper.registerKeyBinding(this, Modchu_AccessSupport.instance.newInstanceKeyBinding(s, 64), keyFlag);			s2 = "PFLMModelsKey";			stringLocalizationList.add(new String[]{ s, s2 });			if(PFLM_ConfigData.waitTime == 0) {				s = "key.PFLM wait";				keyBindingsList.add(Modchu_AS.get(Modchu_AS.newInstanceKeyBinding, s, 26, "PFLM"));				//ModLoaderClientHelper.registerKeyBinding(this, Modchu_AccessSupport.instance.newInstanceKeyBinding(s, 26), keyFlag);				s2 = "PFLMWait";				stringLocalizationList.add(new String[]{ s, s2 });			}		}		s = "key.Sit";		keyBindingsList.add(Modchu_AS.get(Modchu_AS.newInstanceKeyBinding, s, 39, "PFLM"));		//ModLoaderClientHelper.registerKeyBinding(this, Modchu_AccessSupport.instance.newInstanceKeyBinding(s, 39), keyFlag);		s2 = "Sit";		stringLocalizationList.add(new String[]{ s, s2 });		s = "key.LieDown";		keyBindingsList.add(Modchu_AS.get(Modchu_AS.newInstanceKeyBinding, s, 27, "PFLM"));		//ModLoaderClientHelper.registerKeyBinding(this, Modchu_AccessSupport.instance.newInstanceKeyBinding(s, 27), keyFlag);		s2 = "LieDown";		stringLocalizationList.add(new String[]{ s, s2 });	}	public static void shortcutKeysinit(LinkedList keyBindingsList, LinkedList<String[]> stringLocalizationList) {		if (Modchu_Main.isServer) return;		boolean keyFlag = Modchu_Main.getMinecraftVersion() > 129 ? Modchu_Main.isForge : false;		String s;		String s2;		Object keyBinding;		Modchu_Debug.lDebug("shortcutKeysinit PFLM_ConfigData.maxShortcutKeys="+PFLM_ConfigData.maxShortcutKeys);		for(int i = 0; i < PFLM_ConfigData.maxShortcutKeys;i++) {			if (PFLM_ConfigData.shortcutKeysUse[i]) {				s = "key.ModelChange"+i;				Modchu_Debug.lDebug("shortcutKeysinit s="+s);				keyBinding = Modchu_AS.get(Modchu_AS.newInstanceKeyBinding, s, 33+i, "PFLM");				keyBindingsList.add(keyBinding);				//ModLoaderClientHelper.registerKeyBinding(mod_pflm_playerformlittlemaid, keyBinding, keyFlag);				s2 = "ModelChange"+i;				stringLocalizationList.add(new String[]{ s, s2 });			}		}		List keybindArray = Modchu_AS.getList(Modchu_AS.keybindArray);		for(int i = 0; i < keybindArray.size() ; i++) {			keyBinding = keybindArray.get(i);			String keyDescription = Modchu_AS.getString(Modchu_AS.keyBindingKeyDescription, keyBinding);			if (keyDescription.equalsIgnoreCase("key.PFLM Models Key")) {				PFLM_Main.PFLMModelsKeyCode = Modchu_AS.getInt(Modchu_AS.keyBindingKeyCode, keyBinding);				break;			}		}		Modchu_Debug.lDebug("shortcutKeysinit end.");	}	public static void addRenderer(Map map) {		Modchu_Debug.systemDebug("PFLM_Main addRenderer", 5);		addRendererFlag = true;		if (!PFLM_ConfigData.isPlayerForm) return;//-@-125		Modchu_Debug.lDebug("addRenderer");		if (map != null) ;else map = Modchu_AS.getMap(Modchu_AS.renderManagerEntityRenderMap);		ConcurrentHashMap entityRenderMap;		if (!isAether) {			renderPlayerInstance = new Modchu_RenderPlayer(PFLM_RenderPlayerMaster.class);			Modchu_AS.set(Modchu_AS.renderRenderManager, renderPlayerInstance);			//if (isSmartMoving) {				//PFLM_RenderPlayerSmart var1 = new PFLM_RenderPlayerSmart();				//map.put(EntityClientPlayerMP.class, var1);				//map.put(EntityOtherPlayerMP.class, var1);			//}			//else			if (Modchu_Main.isForge) {				//isModelSize				//if (isPlayerAPI				//&& !PFLM_ConfigData.isPlayerAPIDebug) map.put(PFLM_EntityPlayer.class, var1);				//else				map.put(Modchu_Reflect.loadClass("PFLM_EntityPlayerSP"), renderPlayerInstance);				map.put(Modchu_Reflect.loadClass("EntityClientPlayerMP"), renderPlayerInstance);				map.put(Modchu_Reflect.loadClass("EntityOtherPlayerMP"), renderPlayerInstance);				//Modchu_Reflect.invokeMethod("cpw.mods.fml.client.registry.RenderingRegistry", "registerEntityRenderingHandler", new Class[]{ Class.class, Render.class }, new Object[]{ Modchu_Reflect.loadClass("PFLM_EntityPlayerSP"), pflm_RenderPlayer });				//Modchu_Reflect.invokeMethod("cpw.mods.fml.client.registry.RenderingRegistry", "registerEntityRenderingHandler", new Class[]{ Class.class, Render.class }, new Object[]{ EntityClientPlayerMP.class, pflm_RenderPlayer });				//Modchu_Reflect.invokeMethod("cpw.mods.fml.client.registry.RenderingRegistry", "registerEntityRenderingHandler", new Class[]{ Class.class, Render.class }, new Object[]{ EntityOtherPlayerMP.class, pflm_RenderPlayer });			} else if (isOlddays) {				try {					renderPlayerInstance = (Modchu_RenderPlayerBase) Modchu_Reflect.newInstance("PFLM_RenderPlayer2", null, null);					Modchu_AS.set(Modchu_AS.renderRenderManager, renderPlayerInstance);					map.put(Modchu_Reflect.loadClass("EntityClientPlayerMP"), renderPlayerInstance);					map.put(Modchu_Reflect.loadClass("EntityOtherPlayerMP"), renderPlayerInstance);					map.remove(Modchu_Reflect.loadClass("EntityPlayer"));				} catch (Exception e) {					e.printStackTrace();				}			} else {				//map.put(EntityClientPlayerMP.class, pflm_RenderPlayer);				//map.put(EntityOtherPlayerMP.class, pflm_RenderPlayer);				map.put(Modchu_Reflect.loadClass("EntityPlayer"), renderPlayerInstance);			}		} else {			Modchu_Debug.lDebug("addRenderer isAether pflm_RenderPlayer="+renderPlayerInstance);			//map.put(EntityPlayer.class, pflm_RenderPlayer);			map.put(Modchu_Reflect.loadClass("EntityPlayer"), renderPlayerInstance);			//Modchu_Reflect.invokeMethod("cpw.mods.fml.client.registry.RenderingRegistry", "registerEntityRenderingHandler", new Class[]{ Class.class, Render.class }, new Object[]{ Modchu_Reflect.loadClass("EntityPlayer"), pflm_RenderPlayer });		}		map.put(Modchu_Reflect.loadClass("modchu.lib.characteristic.Modchu_EntityPlayerDummy"), renderPlayerDummyInstance);//@-@125/*//125delete		if (!isAether) {			Modchu_Debug.lDebug("addRenderer");			map.put(EntityPlayerSP.class, new pflm_renderPlayer());			map.put(EntityOtherPlayerMP.class, new pflm_renderPlayer());		}		if (guiMultiPngSaveButton) {		//if (isSmartMoving) {		//map.put(PFLM_EntityPlayerDummy.class, modc_PFLM_PlayerFormLittleMaid.renderPlayerDummyInstance);		//} else {			map.put(PFLM_EntityPlayerDummy.class, modc_PFLM_PlayerFormLittleMaid.renderPlayerDummyInstance);		//}		}*///125delete	}	public static void keyboardEvent(Object keyBinding) {		//Modchu_Debug.Debug("keyboardEvent");		Object currentScreen = Modchu_AS.get(Modchu_AS.minecraftCurrentScreen);		if (Modchu_Reflect.loadClass("GuiChat").isInstance(currentScreen)) return;//-@-125		if (Modchu_Main.isForge				&& Modchu_Main.getMinecraftVersion() > 129				&& Modchu_Main.getMinecraftVersion() < 170) {			int keyC = Modchu_AS.getInt(Modchu_AS.keyBindingKeyCode, keyBinding);			if (keyC == keyCode					&& keybindingTime > 0) {				//Modchu_Debug.Debug("keyboardEvent return keybindingTime="+keybindingTime);				keybindingTime--;				return;			}			setKeyCode(keyC);			keybindingTime = 30;		}//@-@125		// GUIを開く		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);		Object theWorld = Modchu_AS.get(Modchu_AS.minecraftTheWorld);		if (thePlayer == null) {			//ここに来る=取得ミス=GUIが出せない。致命的			//Modchu_Debug.Debug("keyboardEvent return thePlayer == null");			return;		}		if (Modchu_Main.getMinecraftVersion() < 170) {			isRemote = !isRemote;			if (!isRemote) return;		}		String keyDescription = Modchu_AS.getString(Modchu_AS.keyBindingKeyDescription, keyBinding);		boolean isCtrlKeyDown = Modchu_AS.getBoolean(Modchu_AS.isCtrlKeyDown);		boolean isShiftKeyDown = Modchu_AS.getBoolean(Modchu_AS.isShiftKeyDown);		if (keyDescription.equals("key.PlayerFormLittleMaid")) {			if (theWorld != null && currentScreen == null					&& !isPFLMModelsKeyDown()					&& !isCtrlKeyDown					&& !isShiftKeyDown) {				if (Modchu_Main.isForge) Modchu_Reflect.invokeMethod("cpw.mods.fml.client.FMLClientHandler", "displayGuiScreen", new Class[]{ Modchu_Reflect.loadClass("EntityPlayer"), Modchu_Reflect.loadClass("GuiScreen") }, Modchu_Reflect.invokeMethod("cpw.mods.fml.client.FMLClientHandler", "instance"), new Object[]{ thePlayer, new Modchu_GuiModelView(PFLM_GuiMaster.class, theWorld) });				else Modchu_Reflect.invokeMethod("ModLoader", "openGUI", new Class[]{ Modchu_Reflect.loadClass("EntityPlayer"), Modchu_Reflect.loadClass("GuiScreen") }, new Object[]{ thePlayer, new Modchu_GuiModelView(PFLM_GuiMaster.class, theWorld) });			}			return;		}		if (keyDescription.equals("key.Sit")) {			if (!isPFLMModelsKeyDown()					&& !isCtrlKeyDown					&& !isShiftKeyDown					&& !keySitLock) {				float moveForward = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseMoveForward, thePlayer);				float moveStrafing = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseMoveStrafing, thePlayer);				float f = moveForward * moveForward + moveStrafing * moveStrafing;				//Modchu_Debug.mDebug("-----key.Sit s");				//Modchu_Debug.mDebug("key.Sit entityplayersp.isRiding()="+entityplayersp.isRiding());				if (Modchu_AS.getBoolean(Modchu_AS.minecraftInGameHasFocus)						&& (double)f < 0.20000000000000001D						&& !Modchu_AS.getBoolean(Modchu_AS.entityLivingBaseIsJumping, thePlayer)) {					boolean b = getIsSitting();					//Modchu_Debug.mDebug("key.Sit setIsSitting getIsSitting()="+getIsSitting());					setIsSitting(!b);					//Modchu_Debug.mDebug("key.Sit setIsSitting !b="+!b);					setIsSleeping(false);					keySitLock = true;				}				//Modchu_Debug.mDebug("key.Sit getIsSitting()="+getIsSitting());				//Modchu_Debug.mDebug("key.Sit entityplayersp.isRiding()="+entityplayersp.isRiding());				//Modchu_Debug.mDebug("-----key.Sit e");			}			return;		} else if (keyDescription.equals("key.LieDown")) {			if (!isPFLMModelsKeyDown()					&& !isCtrlKeyDown					&& !isShiftKeyDown) {				boolean b = getIsSleeping();				setIsSleeping(!b);				setIsSitting(false);			}			return;		} else if (keyDescription.equals("key.PFLM Models Key")) {			if (isCtrlKeyDown) {				clearDataMap();				if (PFLM_ConfigData.changeMode == PFLM_GuiMaster.modeRandom						&& Modchu_AS.getInt(Modchu_AS.minecraftGameSettingsThirdPersonView) == 0) Modchu_AS.set(Modchu_AS.minecraftGameSettingsSetThirdPersonView, 1);			}			return;		} else if (keyDescription.startsWith("key.ModelChange")				&& PFLM_ConfigData.isPlayerForm) {			int i = Integer.valueOf(keyDescription.substring("key.ModelChange".length(), keyDescription.length()));			boolean flag = true;			if (PFLM_ConfigData.shortcutKeysPFLMModelsUse[i]					&& !isPFLMModelsKeyDown()) flag = false;			if (PFLM_ConfigData.shortcutKeysCtrlUse[i]					&& !isCtrlKeyDown) flag = false;			if (PFLM_ConfigData.shortcutKeysShiftUse[i]					&& !isShiftKeyDown) flag = false;			if (PFLM_ConfigData.shortcutKeysUse[i]					&& flag) {				boolean clear = false;				switch (PFLM_ConfigData.shortcutKeysChangeMode[i]) {				case PFLM_GuiKeyControlsMaster.modeOthersSettingOffline:					PFLM_ConfigData.textureName = PFLM_ConfigData.shortcutKeysTextureName[i];					PFLM_ConfigData.textureArmorName = PFLM_ConfigData.shortcutKeysTextureArmorName[i];					PFLM_ConfigData.maidColor = PFLM_ConfigData.shortcutKeysMaidColor[i];					PFLM_ConfigData.modelScale = PFLM_ConfigData.shortcutKeysModelScale[i];					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeModelScale:					PFLM_ConfigData.modelScale = PFLM_ConfigData.shortcutKeysModelScale[i];					break;				case PFLM_GuiKeyControlsMaster.modePlayerOffline:					PFLM_ConfigData.changeMode = PFLM_GuiMaster.modeOffline;					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modePlayerOnline:					PFLM_ConfigData.changeMode = PFLM_GuiMaster.modeOnline;					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeRandom:					PFLM_ConfigData.changeMode = PFLM_GuiMaster.modeRandom;					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeSetModel:					PFLM_ConfigData.textureName = PFLM_ConfigData.shortcutKeysTextureName[i];					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeSetColor:					PFLM_ConfigData.maidColor = PFLM_ConfigData.shortcutKeysMaidColor[i];					break;				case PFLM_GuiKeyControlsMaster.modeSetArmor:					PFLM_ConfigData.textureArmorName = PFLM_ConfigData.shortcutKeysTextureArmorName[i];					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeSetModelAndArmor:					PFLM_ConfigData.textureName = PFLM_ConfigData.shortcutKeysTextureName[i];					PFLM_ConfigData.textureArmorName = PFLM_ConfigData.shortcutKeysTextureArmorName[i];					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeSetModelAndColor:					PFLM_ConfigData.textureName = PFLM_ConfigData.shortcutKeysTextureName[i];					PFLM_ConfigData.maidColor = PFLM_ConfigData.shortcutKeysMaidColor[i];					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeSetColorAndArmor:					PFLM_ConfigData.textureArmorName = PFLM_ConfigData.shortcutKeysTextureArmorName[i];					PFLM_ConfigData.maidColor = PFLM_ConfigData.shortcutKeysMaidColor[i];					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeActionRelease:					setActionRequest(new boolean[]{ true, false });					break;				case PFLM_GuiKeyControlsMaster.modeCustomModelCfgReLoad:					customModelCfgReLoad();					clear = true;					break;				case PFLM_GuiKeyControlsMaster.modeAllMultiModelActionModeChangePlus:					ModchuModel_ModelDataBase.setAllMultiModelActionModePlus();					if (PFLM_ConfigData.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "PFLM AllMultiModelActionMode = "+ModchuModel_ModelDataBase.getAllMultiModelActionModeName(ModchuModel_ModelDataBase.getAllMultiModelActionMode()));					break;				case PFLM_GuiKeyControlsMaster.modeAllMultiModelActionModeChangeMinus:					ModchuModel_ModelDataBase.setAllMultiModelActionModeMinus();					if (PFLM_ConfigData.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "PFLM AllMultiModelActionMode = "+ModchuModel_ModelDataBase.getAllMultiModelActionModeName(ModchuModel_ModelDataBase.getAllMultiModelActionMode()));					break;				case PFLM_GuiKeyControlsMaster.modeAllMultiModelActionPlus:					ModchuModel_ModelDataBase.setAllMultiModelActionPlus();					if (PFLM_ConfigData.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "PFLM AllMultiModelAction = "+ModchuModel_ModelDataBase.getAllMultiModelActionRequestNumber());					break;				case PFLM_GuiKeyControlsMaster.modeAllMultiModelActionMinus:					ModchuModel_ModelDataBase.setAllMultiModelActionMinus();					if (PFLM_ConfigData.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "PFLM AllMultiModelAction = "+ModchuModel_ModelDataBase.getAllMultiModelActionRequestNumber());					break;				case PFLM_GuiKeyControlsMaster.modeAllMultiModelActionRun:					ModchuModel_ModelDataBase.setAllMultiModelActionFlag(!ModchuModel_ModelDataBase.getAllMultiModelActionFlag());					break;				}				Modchu_Debug.mDebug("keyboardEvent --------- action PFLM_ConfigData.shortcutKeysChangeMode[i]="+PFLM_ConfigData.shortcutKeysChangeMode[i]);				if (PFLM_ConfigData.shortcutKeysChangeMode[i] >= PFLM_GuiKeyControlsMaster.modeAction						&& PFLM_ConfigData.shortcutKeysChangeMode[i] <= PFLM_GuiKeyControlsMaster.modeActionLast) {					int i1 = PFLM_ConfigData.shortcutKeysChangeMode[i] - PFLM_GuiKeyControlsMaster.modeAction + 1;					Modchu_Debug.mDebug("keyboardEvent --------- action i1="+i1);					int actionRequestNumber = getActionRequestNumber();					boolean actionFlag = getActionFlag();					//Modchu_Debug.mDebug("actionFlag="+actionFlag);					if (actionFlag							&& actionRequestNumber == i1) {						setActionRequest(new boolean[]{ true, false });						Modchu_Debug.mDebug("setActionRequest false.解除要求");					} else {						if (!actionFlag								| (actionFlag										&& actionRequestNumber != i1)) {							setActionRequestNumber(i1);							setActionRequest(new boolean[]{ true, true });							Modchu_Debug.mDebug("setActionRequest true.実行要求");						}					}					Modchu_Debug.mDebug("keyboardEvent --------- action end.");				}				if (PFLM_GuiMaster.partsSaveFlag) {					PFLM_GuiMaster.partsSaveFlag = false;					saveParamater();					PFLM_Config.clearCfgData();				}				if (clear) {					clearDataMap();					if (PFLM_ConfigData.changeMode == PFLM_GuiMaster.modeRandom							&& Modchu_AS.getInt(Modchu_AS.minecraftGameSettingsThirdPersonView) == 0) Modchu_AS.set(Modchu_AS.minecraftGameSettingsSetThirdPersonView, 1);				}				PFLM_ConfigData.shortcutKeysNumber = i;			}			return;		}		else if (PFLM_ConfigData.waitTime == 0) {			if (Modchu_AS.getString(Modchu_AS.keyBindingKeyDescription, keyBinding).equals("key.PFLM wait"))			{				//Modchu_Debug.mDebug("PFLMWait");				if (!(Boolean) Modchu_Reflect.getFieldObject("EntityLivingBase", "field_70703_bu", "isJumping", thePlayer))				{					isWait = !isWait;				}			}		}	}	private static void setKeyCode(int i) {		keyCode = i;	}	public static boolean onTickInGUI(float f, Object minecraft, Object par1GuiScreen, Object... tickData) {//-@-125		//if(isSmartMoving && mc != null) PFLM_SmartMovingOther.TranslateIfNecessary((GameSettings)null);//@-@125/*//125delete//-@-110		if (!smartMovingAddRenderer				&& isPlayerForm				&& isSmartMoving				&& !Modchu_Main.isForge) {			PFLM_PlayerController.addRenderer();			smartMovingAddRenderer = true;			Modchu_Debug.lDebug("SmartMovingAddRenderer");		}//@-@110//-@-123		// GUI置き換え		if (par1GuiScreen instanceof GuiSelectWorld				&& isAether				&& guiSelectWorldSwapCount < 10) {			// ワールドセレクトを置き換え			if (!(par1GuiScreen instanceof PFLM_GuiSelectWorldAether)) {				guiSelectWorldSwapCount++;				try {					int ID = (Integer) Modchu_Reflect.getFieldObject(GuiMainMenu.class, "musicId", par1GuiScreen);					minecraft.displayGuiScreen(new PFLM_GuiSelectWorldAether((GuiSelectWorld)par1GuiScreen, ID));					Modchu_Debug.Debug("Swap GuiSelectWorldAether.");				} catch (Exception e) {					e.printStackTrace();				}				return true;			}		}//@-@123		// GUI置き換え		if (par1GuiScreen instanceof GuiSelectWorld				&& !isAether				&& isSwapGuiSelectWorld				&& guiSelectWorldSwapCount < 10) {			// ワールドセレクトを置き換え			if (!(par1GuiScreen instanceof PFLM_GuiSelectWorld)) {				guiSelectWorldSwapCount++;				minecraft.displayGuiScreen(new PFLM_GuiSelectWorld((GuiSelectWorld)par1GuiScreen));				Modchu_Debug.Debug("Swap GuiSelectWorld.");//-@-b166				return true;//@-@b166				// b166deletereturn;			}		}*///125delete//-@-b166		return false;		//return true;//@-@b166		// b166deletereturn;	}	public static boolean onTickInGame(byte type, Object... tickData) {		//Modchu_Debug.mDebug("PFLM_Main onTickInGame");		if (type != 2) return true;		if (runtimeExceptionFlag) throw new RuntimeException(runtimeExceptionString);		//else if (!runtimeExceptionFlag) return false;		sitSleepResetCheck();		if (!Keyboard.getEventKeyState()				&& !Mouse.getEventButtonState()) {			if (!isReleasekey) isReleasekey = true;			if (keySitLock) {				//Modchu_Debug.mDebug("keySitLock解除");				keySitLock = false;			}		} else if (isReleasekey) isReleasekey = false;//-@-125/*		Object currentScreen = Modchu_Reflect.getFieldObject("Minecraft", "field_71462_r", "currentScreen", mc);		if (currentScreen != null				&& !Modchu_Main.isForge) onTickInGUI(0.0F, minecraft, (GuiScreen) currentScreen);*///@-@125		if (!itemRendererReplaceFlag				&& Modchu_Main.itemRendererClass != null) {			Object itemRenderer = null;			Object entityRenderer = Modchu_AS.get(Modchu_AS.minecraftEntityRenderer);			if (entityRenderer != null) ;else Modchu_Debug.Debug("onTickInGame entityRenderer == null !!");			for(int i = 0; i < 2; i++) {				itemRenderer = i == 0 ? Modchu_AS.get(Modchu_AS.minecraftEntityRendererItemRenderer) : Modchu_AS.get(Modchu_AS.renderManagerItemRenderer);				if (!instanceCheck(Modchu_Main.itemRendererClass, itemRenderer)) {					Object itemRenderer2 = Modchu_AS.get(Modchu_AS.newInstanceItemRenderer);					if (itemRenderer2 != null) {						Modchu_Debug.mDebug("onTickInGame itemRenderer2 != null");						if (i == 0) {							Modchu_AS.set(Modchu_AS.entityRendererItemRenderer, itemRenderer2);						} else if (i == 1) {							Modchu_AS.set(Modchu_AS.renderManagerItemRenderer, itemRenderer2);						}						if (Modchu_Main.isHD) {							initItemRendererHD = true;						} else {							initItemRenderer = true;						}						itemRendererReplaceFlag = true;					} else {						Modchu_Debug.mDebug("onTickInGame itemRenderer2 == null !!");					}				}			}		}/*//125delete//-@-110		if (isPlayerForm				&& isSmartMoving				&& !Modchu_Main.isForge) {			if (!(RenderManager.instance.getEntityClassRenderObject(EntityPlayerSP.class) instanceof pflm_renderPlayer)) {				PFLM_PlayerController.addRenderer();				Modchu_Debug.Debug("onTickInGame SmartMovingAddRenderer");			}		}//@-@110*///125delete//-@-125		Object mc = Modchu_AS.get(Modchu_AS.minecraftGetMinecraft);		if (isSSP) {			Object playerController = Modchu_AS.get(Modchu_AS.minecraftPlayerController);			if (!Modchu_Reflect.loadClass("PFLM_PlayerController2").isInstance(playerController)				&& netclienthandler != null) {				Modchu_AS.set(Modchu_AS.minecraftPlayerController, Modchu_Reflect.newInstance("PFLM_PlayerController2", new Class[]{ Modchu_Reflect.loadClass("Minecraft") , Modchu_Reflect.loadClass("NetClientHandler") }, new Object[]{ mc, netclienthandler }));			}			Object entityplayer = Modchu_Reflect.getFieldObject(Modchu_Reflect.getField("PFLM_PlayerController2", "entityplayerformlittlemaidsp"), null);			Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);			Object theWorld = Modchu_AS.get(Modchu_AS.minecraftTheWorld);			if (Modchu_AS.get(Modchu_AS.worldGetWorldInfoGetGameType) == Modchu_Reflect.getEnum("EnumGameType", "SURVIVAL")					&& !Modchu_Reflect.loadClass("PFLM_EntityPlayerSP2").isInstance(thePlayer)					&& entityplayer != null) {				Modchu_AS.set(Modchu_AS.minecraftThePlayer, entityplayer);			}			if (Modchu_AS.getEnum(Modchu_AS.worldGetWorldInfoGetGameType) == Modchu_Reflect.getEnum("EnumGameType", "CREATIVE")					&& !Modchu_Reflect.loadClass("PFLM_PlayerControllerCreative2").isInstance(playerController)					&& netclienthandler != null) {				Modchu_AS.set(Modchu_AS.minecraftPlayerController, Modchu_Reflect.newInstance("PFLM_PlayerControllerCreative2", new Class[]{ Modchu_Reflect.loadClass("Minecraft") , Modchu_Reflect.loadClass("NetClientHandler") }, new Object[]{ mc, netclienthandler }));			}		}		if (isOlddays) {			if (!Modchu_Reflect.loadClass("PFLM_RenderPlayer2").isInstance(Modchu_AS.get(Modchu_AS.renderManagerGetEntityClassRenderObject, Modchu_Reflect.loadClass("EntityClientPlayerMP")))) {				Object ret = Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "addRenderer");				//PFLM_PlayerController2.addRenderer();				//Modchu_Debug.Debug("onTickInGame PFLM_PlayerController2.addRenderer()");			}		}		if (Modchu_AS.getBoolean(Modchu_AS.isLANWorld)) {			if (!isMulti) isMulti = true;		} else if (Modchu_AS.getBoolean(Modchu_AS.isMuiti)) {			if (PFLM_ConfigData.multiAutochangeMode) {				if (PFLM_ConfigData.changeMode == PFLM_GuiMaster.modeOffline						&& setMultiAutochangeMode) {					setMultiAutochangeMode = false;					PFLM_ConfigData.changeMode = PFLM_GuiMaster.modeOnline;					clearDataMap();				} else {					setMultiAutochangeMode = false;				}			}			if (!isMulti) isMulti = true;		} else {			if (isMulti) isMulti = false;		}		//Modchu_Debug.mDebug("isMulti="+isMulti);		Object theWorld = Modchu_AS.get(Modchu_AS.minecraftTheWorld);		if (theWorld == null				&& !setMultiAutochangeMode) {			//Modchu_Debug.mDebug("onTickInGame minecraft.theWorld == null");			setMultiAutochangeMode = true;		}/*		if (!addRendererFlag				&& Modchu_Main.isForge) {			addRendererFlag = true;			Map map = (Map) Modchu_Reflect.getFieldObject(RenderManager.class, "field_78729_o", "entityRenderMap", Modchu_Reflect.getFieldObject(RenderManager.class, "field_78727_a", "instance"));			//Map map = RenderManager.instance.entityRenderMap;			addRenderer(map);		}*/		//if(isSmartMoving				//&& mc != null) PFLM_SmartMovingOther.onTickInGame();//@-@125/*//125delete			if(minecraft.thePlayer.worldObj.isRemote) {				if (multiAutochangeMode) {					if (changeMode != PFLM_GuiMaster.modeOnline						&& setMultiAutochangeMode) {						Modchu_Debug.mDebug("onTickInGame setMultiAutochangeMode");						setMultiAutochangeMode = false;						changeMode = PFLM_GuiMaster.modeOnline;						clearDataMap();					} else {						setMultiAutochangeMode = false;					}				}				if (!isMulti) isMulti = true;				if (minecraft.theWorld == null						&& !setMultiAutochangeMode) {					Modchu_Debug.mDebug("onTickInGame !setMultiAutochangeMode minecraft.theWorld == null");					setMultiAutochangeMode = true;				}			} else {				if (isMulti) isMulti = false;			}*///125delete/*		if (isModelSize				&& !(minecraft.entityRenderer instanceof EntityRendererAltPlayerFormLittleMaid)) {			minecraft.entityRenderer = new EntityRendererAltPlayerFormLittleMaid(minecraft);			Modchu_Debug.mDebug("EntityRendererAltPlayerFormLittleMaid to set.");		}*//*		if (isPlayerForm					&& isSmartMoving) {				if (!(RenderManager.instance.getEntityClassRenderObject(EntityClientPlayerMP.class) instanceof PFLM_RenderPlayerSmart)						| !(RenderManager.instance.getEntityClassRenderObject(EntityOtherPlayerMP.class) instanceof PFLM_RenderPlayerSmart)) {					PFLM_PlayerController.addRenderer();					Modchu_Debug.Debug("onTickInGame SmartMovingAddRenderer");				}			}*///-@-123/*//125delete			if (!aetherAddRenderer && isAether) {				if (!(RenderManager.instance.getEntityClassRenderObject(thePlayer.getClass()) instanceof PFLM_RenderPlayerAether)) {					aetherAddRenderer = true;					RenderPlayer renderplayer = new PFLM_RenderPlayerAether();					Object obj = null;					try {						obj = getPrivateValue(RenderManager.class, RenderManager.instance, "entityRenderMap");					} catch (Exception e) {					}					if (obj == null) {						try {							obj = getPrivateValue(RenderManager.class, RenderManager.instance, "o");						} catch (Exception e) {							e.printStackTrace();						}					}					if (obj != null) {						((Map) obj).put(thePlayer.getClass(), renderplayer);						((Map) obj).put(EntityOtherPlayerMP.class, renderplayer);						renderplayer.setRenderManager(RenderManager.instance);						Modchu_Debug.lDebug("aetherAddRenderer");						//Modchu_Debug.lDebug("getEntityClassRenderObject "+(RenderManager.instance.getEntityClassRenderObject(thePlayer.getClass())));					} else {						Modchu_Debug.lDebug("aetherAddRenderer obj null !!");					}				}			}*///125delete//@-@123//-@-b166		return true;	}	public static boolean instanceCheck(Class c, Object o) {		boolean b = true;		if (o != null) {			if(!c.isInstance(o)) {				b = false;			}		} else {			b = false;		}		return b;	}	public static void serverConnect(Object netClientHandler) {		clientConnect(netClientHandler);		return;	}	public static void clientConnect(Object netClientHandler) {		if (Modchu_Main.getMinecraftVersion() < 130				| !entityReplaceFlag) return;		//Modchu_Debug.mDebug("clientConnect");		netclienthandler = netClientHandler;		Object mc = Modchu_AS.get(Modchu_AS.minecraftGetMinecraft);		double x = 0.0D;		double y = 0.0D;		double z = 0.0D;		boolean setPositionFlag = false;		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);		if (thePlayer != null) {			setPositionFlag = true;			x = Modchu_AS.getDouble(Modchu_AS.entityPosX, thePlayer);			y = Modchu_AS.getDouble(Modchu_AS.entityPosY, thePlayer);			z = Modchu_AS.getDouble(Modchu_AS.entityPosZ, thePlayer);		}		Object tempThePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);		//Modchu_Debug.Debug("get x="+x+" y="+y+" z="+z);		Object playerController = Modchu_AS.get(Modchu_AS.minecraftPlayerController);		Object theWorld = Modchu_AS.get(Modchu_AS.minecraftTheWorld);		try {			Object enumGameType = Modchu_AS.get(Modchu_AS.worldGetWorldInfoGetGameType);			//int var2 = 0;			//if (thePlayer != null) var2 = thePlayer.hashCode();			Class[] types = { Modchu_Reflect.loadClass("Minecraft") , Modchu_Reflect.loadClass("NetClientHandler") };			Object[] args = {mc, netclienthandler};			if(isSSP) {				if (enumGameType != null) {					//Modchu_Debug.Debug("enumGameType="+enumGameType);					if (enumGameType == Modchu_Reflect.getEnum("EnumGameType", "CREATIVE")) {						Modchu_AS.set(Modchu_AS.minecraftPlayerController, Modchu_Reflect.newInstance("PFLM_PlayerControllerCreative2", types, args));						Modchu_Debug.lDebug("Replace PFLM_PlayerControllerCreative2.");					} else {						Modchu_AS.set(Modchu_AS.minecraftPlayerController, Modchu_Reflect.newInstance("PFLM_PlayerController2", types, args));						Modchu_Debug.lDebug("Replace PFLM_PlayerController2.");					}				} else {					Modchu_AS.set(Modchu_AS.minecraftPlayerController, Modchu_Reflect.newInstance("PFLM_PlayerController2", types, args));					Modchu_Debug.lDebug("Replace PFLM_PlayerController2.");				}			} else {				Modchu_AS.set(Modchu_AS.minecraftPlayerController, Modchu_Reflect.newInstance("PFLM_PlayerController", types, args));				Modchu_Debug.lDebug("Replace PFLM_PlayerController.");			}			if (enumGameType != null) {				Modchu_Debug.mDebug("enumGameType="+enumGameType);				Modchu_AS.set(Modchu_AS.playerControllerSetGameType, enumGameType);			}			Modchu_AS.set(Modchu_AS.minecraftSetDimensionAndSpawnPlayer);			if(isSSP					&& enumGameType != null					&& enumGameType == Modchu_Reflect.getEnum("EnumGameType", "CREATIVE")) {				Modchu_AS.set(Modchu_AS.playerControllerCreativeSetPlayerCapabilities);				Modchu_Reflect.invokeMethod("PFLM_PlayerControllerCreative2", "setInCreativeMode", new Class[]{boolean.class}, playerController, new Object[]{ true });				Modchu_Reflect.invokeMethod("PFLM_EntityPlayerSP2", "copyPlayer", new Class[]{Modchu_Reflect.loadClass("EntityPlayer")}, Modchu_AS.get(Modchu_AS.minecraftThePlayer), new Object[]{ tempThePlayer });				//Modchu_Debug.Debug("isSSP CREATIVE set");			}/*//@/			if(!isSmartMoving					&& isModelSize					&& !PFLM_ConfigData.isPlayerAPIDebug) {				PFLM_PlayerBaseServer.registerPlayerBase();				Modchu_Debug.Debug("PlayerAPI Server register.");			}*///@//*			int var3 = thePlayer.dimension;		        theWorld.setSpawnLocation();		        theWorld.removeAllEntities();		        if (thePlayer != null)		        {		        	theWorld.setEntityDead(thePlayer);		        }		        renderViewEntity = null;		        thePlayer = playerController.func_78754_a(theWorld);		        thePlayer.dimension = var3;		        renderViewEntity = thePlayer;		        thePlayer.preparePlayerToSpawn();		        theWorld.spawnEntityInWorld(thePlayer);		        playerController.flipPlayer(thePlayer);		        thePlayer.movementInput = new MovementInputFromOptions(gameSettings);		        if (var2 > 0) thePlayer.hashCode() = var2;		        playerController.setPlayerCapabilities(thePlayer);		        thePlayer.sendQueue.handleClientCommand(new Packet205ClientCommand(1));*/			if (setPositionFlag) {				//double d = (double)(1.8F - getHeight());				//if (d < 0) d = -d + 1.0D;				//d = d + 0.5D;				//Modchu_Debug.mDebug("setPositionFlag getHeight()="+getHeight());				if (PFLM_ConfigData.isModelSize) {					setPosition(x, y, z);					setPositionCorrection(0.0D, 0.5D, 0.0D);				}				//thePlayer.setPositionAndRotation2(x, y, z, thePlayer.rotationYaw, thePlayer.rotationPitch, 3);				//Modchu_Debug.mDebug("setPositionAndRotation2 x="+x+" y="+y+" z="+z);			}			clearDataMap();		} catch (Exception e) {			e.printStackTrace();		}    }	public static void playerControllerReplace() {		Object mc = Modchu_AS.get(Modchu_AS.minecraftGetMinecraft);		Object theWorld = Modchu_AS.get(Modchu_AS.minecraftTheWorld);		if (theWorld == null				| Modchu_Reflect.getFieldObject("World", "field_4209_q", "worldProvider", theWorld) == null) return;		double x = 0.0D;		double y = 0.0D;		double z = 0.0D;		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);		boolean setPositionFlag = false;		if (thePlayer != null) {			setPositionFlag = true;			x = Modchu_AS.getDouble(Modchu_AS.entityPosX, thePlayer);			y = Modchu_AS.getDouble(Modchu_AS.entityPosY, thePlayer);			z = Modchu_AS.getDouble(Modchu_AS.entityPosZ, thePlayer);		}		Object tempThePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);		//Modchu_Debug.Debug("playerControllerReplace get x="+x+" y+"+y+" z="+z);		int var10 = 0;		if (thePlayer != null) {			var10 = thePlayer.hashCode();			Modchu_AS.set(Modchu_AS.worldSetEntityDead);		}		//Modchu_Debug.Debug("x="+minecraft.thePlayer.posX+" y="+minecraft.thePlayer.posY+" z="+minecraft.thePlayer.posZ);		Object playerController = Modchu_Reflect.getFieldObject("Minecraft", "field_71442_b", "playerController", mc); 		if (Modchu_Main.getMinecraftVersion() > 79 				&& !(Boolean) Modchu_Reflect.getFieldObject("PlayerController", "field_1064_b", "isInTestMode", playerController) 				| Modchu_Main.getMinecraftVersion() < 80) {			Modchu_Debug.lDebug("Replace PFLM_PlayerController.");			Modchu_Reflect.setFieldObject("Minecraft", "field_71442_b", "playerController", mc, Modchu_Reflect.newInstance("PFLM_PlayerController", new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc }));		} else {			Modchu_Debug.lDebug("Replace PFLM_PlayerControllerCreative.");			Modchu_Reflect.setFieldObject("Minecraft", "field_71442_b", "playerController", mc, Modchu_Reflect.newInstance("PFLM_PlayerControllerCreative", new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, new Object[]{ mc }));		} 		Modchu_AS.set(Modchu_AS.entitySetDead); 		Modchu_AS.set(Modchu_AS.minecraftThePlayer, Modchu_AS.get(Modchu_AS.playerControllerMPCreatePlayer)); 		Modchu_AS.set(Modchu_AS.minecraftRenderViewEntity, (Object)null);		if (thePlayer != null				&& tempThePlayer != null) {			if (isPlayerAPI					&& !PFLM_ConfigData.isPlayerAPIDebug) {				Modchu_Reflect.invokeMethod("PFLM_EntityPlayer", "copyPlayer", new Class[]{Modchu_Reflect.loadClass("EntityPlayer")}, Modchu_AS.get(Modchu_AS.minecraftThePlayer), new Object[]{ tempThePlayer });			} else {				Modchu_Reflect.invokeMethod("PFLM_EntityPlayerSP", "copyPlayer", new Class[]{Modchu_Reflect.loadClass("EntityPlayer")}, Modchu_AS.get(Modchu_AS.minecraftThePlayer), new Object[]{ tempThePlayer });			}		}		//minecraft.thePlayer.dimension = par2;		Modchu_AS.set(Modchu_AS.minecraftRenderViewEntity, thePlayer);		//minecraft.thePlayer.preparePlayerToSpawn();		//minecraft.thePlayer.setLocationAndAngles((double)((float)minecraft.thePlayer.posX + 0.5F), (double)((float)minecraft.thePlayer.posY + 0.1F), (double)((float)minecraft.thePlayer.posZ + 0.5F), 0.0F, 0.0F);		Modchu_AS.set(Modchu_AS.playerControllerMPFlipPlayer);		Modchu_AS.set(Modchu_AS.worldSpawnPlayerWithLoadedChunks);		Modchu_AS.set(Modchu_AS.entityPlayerSPMovementInput);		Modchu_AS.set(Modchu_AS.entityEntityID, thePlayer, var10);		if(Modchu_Main.getMinecraftVersion() > 79 				&& Modchu_Main.getMinecraftVersion() < 130) {			Modchu_AS.set(Modchu_AS.entityPlayerSPFunc_6420_o);			if((Boolean) Modchu_Reflect.invokeMethod("PlayerController", "func_78758_h", "isInCreativeMode", playerController)) {				//&& (Boolean) Modchu_Reflect.invokeMethod(Modchu_Main.getMinecraftVersion() > 129 ? "PlayerControllerMP" : "PlayerController", "func_78758_h", "isInCreativeMode", playerController)) {				Modchu_AS.set(Modchu_AS.playerControllerFunc_6473_b);			}		}		if (isPlayerAPI				&& !PFLM_ConfigData.isPlayerAPIDebug) {			if (!(Boolean) Modchu_Reflect.getFieldObject("PFLM_PlayerBase", "initFlag", thePlayer)) Modchu_Reflect.invokeMethod("PFLM_PlayerBase", "init", thePlayer);		} else {			if (!(Boolean) Modchu_Reflect.getFieldObject("PFLM_EntityPlayerSP", "initFlag", thePlayer)) Modchu_Reflect.invokeMethod("PFLM_EntityPlayerSP", "init", thePlayer);		}		setPosition(x, y, z);	}	public static void mushroomConfusion(Object entityplayer, PFLM_ModelData modelData) {		Object itemstack = Modchu_AS.get(Modchu_AS.entityPlayerInventoryGetStackInSlot, entityplayer, 9);		boolean mushroomConfusionFlag = false;		if (itemstack != null) {			Object block = Modchu_AS.get(Modchu_AS.getBlock, itemstack);			if (Modchu_Reflect.loadClass("BlockMushroom").isInstance(block)) {				Object itemstack2 = Modchu_AS.get(Modchu_AS.entityPlayerInventoryGetStackInSlot, entityplayer, 10);				if (itemstack2 != null) {					Object item2 = Modchu_AS.get(Modchu_AS.itemStackGetItem, itemstack2);					Object dyePowder = Modchu_AS.get(Modchu_AS.getItem, "dye");					if (item2 == dyePowder) {						mushroomConfusionFlag = true;						if (Modchu_Main.getMinecraftVersion() < 80) modelData.setCapsValue(modelData.caps_freeVariable, "mushroomConfusionResetFlag", true);						modelData.setCapsValue(modelData.caps_mushroomConfusionCount, modelData.getCapsValueInt(modelData.caps_mushroomConfusionCount) - 1);						if(modelData.getCapsValueInt(modelData.caps_mushroomConfusionCount) < 0) {							modelData.setCapsValue(modelData.caps_mushroomConfusionCount, 500 + (100 * rnd.nextInt(10)));							modelData.setCapsValue(modelData.caps_mushroomConfusionType, rnd.nextInt(modelData.getCapsValueInt(modelData.caps_mushroomConfusionTypeMax)));						}						mushroomConfusion(entityplayer, modelData, modelData.getCapsValueInt(modelData.caps_mushroomConfusionType));						//Modchu_Debug.dDebug("modelData.mushroomConfusionCount="+modelData.getCapsValueInt(modelData.caps_mushroomConfusionCount));						//Modchu_Debug.dDebug("modelData.mushroomConfusionType="+modelData.mushroomConfusionType);					}				}			}		}		if (Modchu_Main.getMinecraftVersion() < 80) {			if (mushroomConfusionFlag					&& modelData.getCapsValueBoolean(modelData.caps_freeVariable, "mushroomConfusionResetFlag")) {				modelData.setCapsValue(modelData.caps_freeVariable, "mushroomConfusionResetFlag", true);				mushroomConfusionFlag = false;				Modchu_AS.set(Modchu_AS.gameSettingsKeyBindForward, modelData.getCapsValue(modelData.caps_freeVariable, "defaultKeyBindForward"));				Modchu_AS.set(Modchu_AS.gameSettingsKeyBindForward, modelData.getCapsValue(modelData.caps_freeVariable, "defaultKeyBindBack"));				Modchu_AS.set(Modchu_AS.gameSettingsKeyBindForward, modelData.getCapsValue(modelData.caps_freeVariable, "defaultKeyBindLeft"));				Modchu_AS.set(Modchu_AS.gameSettingsKeyBindForward, modelData.getCapsValue(modelData.caps_freeVariable, "defaultKeyBindRight"));			}		}	}	private static void mushroomConfusion(Object entityplayer, PFLM_ModelData modelData, int i) {		switch (i) {		case 0:			mushroomConfusion0(entityplayer, modelData);			break;		case 1:		case 2:		case 3:		case 4:			mushroomConfusion1(entityplayer, modelData);			break;		}	}	private static void mushroomConfusion0(Object entityplayer, PFLM_ModelData modelData) {		double motionX = Modchu_AS.getDouble(Modchu_AS.entityMotionX, entityplayer);		double motionY = Modchu_AS.getDouble(Modchu_AS.entityMotionY, entityplayer);		double motionZ = Modchu_AS.getDouble(Modchu_AS.entityMotionZ, entityplayer);		if (modelData.getCapsValueBoolean(modelData.caps_motionResetFlag)) {			Object keyBindForward = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindForward);			Object keyBindBack = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindBack);			Object keyBindLeft = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindLeft);			Object keyBindRight = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindRight);			if (motionX > 0.0D					| motionZ > 0.0D) {				if (Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, keyBindForward)						| Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, keyBindBack)						| Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, keyBindLeft)						| Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, keyBindRight)) {					//Modchu_Debug.mDebug("pressed");					modelData.setCapsValue(modelData.caps_motionResetFlag, false);					modelData.setCapsValue(modelData.caps_mushroomConfusionLeft, false);					if(motionX > 0.001D) {						modelData.setCapsValue(modelData.caps_mushroomConfusionLeft, true);						//Modchu_Debug.mDebug("mushroomConfusionLeft");					}					modelData.setCapsValue(modelData.caps_mushroomConfusionRight, false);					if(motionX < -0.001D) {						modelData.setCapsValue(modelData.caps_mushroomConfusionRight, true);						//Modchu_Debug.mDebug("mushroomConfusionRight");					}					modelData.setCapsValue(modelData.caps_mushroomConfusionFront, false);					if(motionZ > 0.0001D) {						modelData.setCapsValue(modelData.caps_mushroomConfusionFront, true);						//Modchu_Debug.mDebug("mushroomConfusionFront");					}					modelData.setCapsValue(modelData.caps_mushroomConfusionBack, false);					if(motionZ < -0.001D) {						modelData.setCapsValue(modelData.caps_mushroomConfusionBack, true);						//Modchu_Debug.mDebug("mushroomConfusionBack");					}					modelData.setCapsValue(modelData.caps_motionSetFlag, true);				}			}		} else {			float moveForward = (Float) Modchu_Reflect.getFieldObject(entityplayer.getClass(), "field_70701_bs", "moveForward", entityplayer);			float moveStrafing = (Float) Modchu_Reflect.getFieldObject(entityplayer.getClass(), "field_70702_br", "moveStrafing", entityplayer);			float f = moveForward * moveForward + moveStrafing * moveStrafing;			//Modchu_Debug.mDebug("f="+f);			if (!Modchu_AS.getBoolean(Modchu_AS.entityIsRiding, entityplayer)					&& Modchu_AS.getBoolean(Modchu_AS.minecraftInGameHasFocus)					&& (double)f < 0.10000000000000001D					&& !(Boolean) Modchu_Reflect.getFieldObject("EntityLivingBase", "field_70703_bu", "isJumping", entityplayer)) {				//Modchu_Debug.mDebug("motionResetFlag = true");				modelData.setCapsValue(modelData.caps_motionResetFlag, true);				Modchu_AS.set(Modchu_AS.entityMotionX, entityplayer, 0.0D);				Modchu_AS.set(Modchu_AS.entityMotionZ, entityplayer, 0.0D);				modelData.setCapsValue(modelData.caps_motionSetFlag, false);			} else {				if (modelData.getCapsValueBoolean(modelData.caps_motionSetFlag)) {					if (modelData.getCapsValueBoolean(modelData.caps_mushroomConfusionLeft)) {						if (motionX > 0.0D) Modchu_AS.set(Modchu_AS.entityMotionX, entityplayer, -motionX - 0.1D);						//Modchu_Debug.mDebug("mushroomConfusionLeft "+motionX);					}					if (modelData.getCapsValueBoolean(modelData.caps_mushroomConfusionRight)) {						if (motionX < 0.0D) Modchu_AS.set(Modchu_AS.entityMotionX, entityplayer, -motionX + 0.4D);						//Modchu_Debug.mDebug("mushroomConfusionRight "+motionX);					}					if (modelData.getCapsValueBoolean(modelData.caps_mushroomConfusionFront)) {						if (motionZ > 0.0D) Modchu_AS.set(Modchu_AS.entityMotionZ, entityplayer, -motionZ - 0.1D);						//Modchu_Debug.mDebug("mushroomConfusionFront "+motionZ);					}					if (modelData.getCapsValueBoolean(modelData.caps_mushroomConfusionBack)) {						if (motionZ < 0.0D) Modchu_AS.set(Modchu_AS.entityMotionZ, entityplayer, -motionZ + 0.4D);						//Modchu_Debug.mDebug("mushroomConfusionBack "+motionZ);					}				}			}		}	}	private static void mushroomConfusion1(Object entityplayer, PFLM_ModelData modelData) {		boolean forward;		boolean back;		boolean left;		boolean right;		Object key1 = null;		Object key2 = null;		Object key3 = null;		Object key4 = null;		Object keyBindForward = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindForward);		Object keyBindBack = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindBack);		Object keyBindLeft = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindLeft);		Object keyBindRight = Modchu_AS.get(Modchu_AS.gameSettingsKeyBindRight);		if (Modchu_Main.getMinecraftVersion() > 79				&& modelData.getCapsValue(modelData.caps_freeVariable, "defaultKeyBindForward") == null) {			modelData.setCapsValue(modelData.caps_freeVariable, "defaultKeyBindForward", keyBindForward);			modelData.setCapsValue(modelData.caps_freeVariable, "defaultKeyBindBack", keyBindBack);			modelData.setCapsValue(modelData.caps_freeVariable, "defaultKeyBindLeft", keyBindLeft);			modelData.setCapsValue(modelData.caps_freeVariable, "defaultKeyBindRight", keyBindRight);		}		switch (modelData.getCapsValueInt(modelData.caps_mushroomConfusionType)) {		case 1:			key1 = keyBindForward;			key2 = keyBindBack;			key3 = keyBindLeft;			key4 = keyBindRight;			break;		case 2:			key2 = keyBindForward;			key3 = keyBindBack;			key4 = keyBindLeft;			key1 = keyBindRight;			break;		case 3:			key2 = keyBindForward;			key3 = keyBindBack;			key1 = keyBindLeft;			key4 = keyBindRight;			break;		case 4:			key4 = keyBindForward;			key1 = keyBindBack;			key2 = keyBindLeft;			key3 = keyBindRight;			break;		}		if (Modchu_Main.getMinecraftVersion() > 79) {			if (modelData.getCapsValueBoolean(modelData.caps_mushroomBack)) {				back = Keyboard.isKeyDown(Modchu_AS.getInt(Modchu_AS.keyBindingKeyCode, key2));				if (!back) modelData.setCapsValue(modelData.caps_mushroomBack, false);				Modchu_AS.set(Modchu_AS.keyBindingPressed, key2, false);			} else {				back = Keyboard.isKeyDown(Modchu_AS.getInt(Modchu_AS.keyBindingKeyCode, key2));				Modchu_AS.set(Modchu_AS.keyBindingPressed, key2, back);			}			if (modelData.getCapsValueBoolean(modelData.caps_mushroomForward)) {				forward = Keyboard.isKeyDown(Modchu_AS.getInt(Modchu_AS.keyBindingKeyCode, key1));				if (!forward) modelData.setCapsValue(modelData.caps_mushroomForward, false);				Modchu_AS.set(Modchu_AS.keyBindingPressed, key1, false);			} else {				forward = Keyboard.isKeyDown(Modchu_AS.getInt(Modchu_AS.keyBindingKeyCode, key2));				Modchu_AS.set(Modchu_AS.keyBindingPressed, key1, forward);			}			if (modelData.getCapsValueBoolean(modelData.caps_mushroomLeft)) {				left = Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, key3);				if (!forward) modelData.setCapsValue(modelData.caps_mushroomLeft, false);				Modchu_AS.set(Modchu_AS.keyBindingPressed, key3, false);			} else {				left = Keyboard.isKeyDown(Modchu_AS.getInt(Modchu_AS.keyBindingKeyCode, key4));				Modchu_AS.set(Modchu_AS.keyBindingPressed, key3, left);			}			if (modelData.getCapsValueBoolean(modelData.caps_mushroomRight)) {				right = Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, key4);				if (!forward) modelData.setCapsValue(modelData.caps_mushroomRight, false);				Modchu_AS.set(Modchu_AS.keyBindingPressed, key4, false);			} else {				right = Keyboard.isKeyDown(Modchu_AS.getInt(Modchu_AS.keyBindingKeyCode, key3));				Modchu_AS.set(Modchu_AS.keyBindingPressed, key4, right);			}			Modchu_AS.set(Modchu_AS.keyBindingPressed, key1, back);			Modchu_AS.set(Modchu_AS.keyBindingPressed, key2, forward);			Modchu_AS.set(Modchu_AS.keyBindingPressed, key3, right);			Modchu_AS.set(Modchu_AS.keyBindingPressed, key4, left);			//Modchu_Debug.dDebug("keyBindForward="+key1.pressed);			//Modchu_Debug.dDebug("keyBindBack="+key2.pressed, 1);			//Modchu_Debug.dDebug("forward="+forward, 2);			//Modchu_Debug.dDebug("back="+back, 3);			if (Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, key1)					&& Modchu_AS.getInt(Modchu_AS.keyBindingPressTime, key2) > 0) {				modelData.setCapsValue(modelData.caps_mushroomBack, true);				modelData.setCapsValue(modelData.caps_mushroomForward, false);				return;			}			modelData.setCapsValue(modelData.caps_mushroomBack, false);			if (Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, key2)					&& Modchu_AS.getInt(Modchu_AS.keyBindingPressTime, key1) > 0) {				modelData.setCapsValue(modelData.caps_mushroomForward, true);				modelData.setCapsValue(modelData.caps_mushroomBack, false);				return;			}			modelData.setCapsValue(modelData.caps_mushroomForward, false);			if (Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, key3)					&& Modchu_AS.getInt(Modchu_AS.keyBindingPressTime, key4) > 0) {				modelData.setCapsValue(modelData.caps_mushroomRight, true);				modelData.setCapsValue(modelData.caps_mushroomLeft, false);				return;			}			modelData.setCapsValue(modelData.caps_mushroomRight, false);			if (Modchu_AS.getBoolean(Modchu_AS.keyBindingPressed, key4)					&& Modchu_AS.getInt(Modchu_AS.keyBindingPressTime, key3) > 0) {				modelData.setCapsValue(modelData.caps_mushroomLeft, true);				modelData.setCapsValue(modelData.caps_mushroomRight, false);				return;			}			modelData.setCapsValue(modelData.caps_mushroomLeft, false);		} else {			Modchu_AS.set(Modchu_AS.gameSettingsKeyBindForward, key1);			Modchu_AS.set(Modchu_AS.gameSettingsKeyBindBack, key2);			Modchu_AS.set(Modchu_AS.gameSettingsKeyBindRight, key3);			Modchu_AS.set(Modchu_AS.gameSettingsKeyBindLeft, key4);		}	}    public static void changeModel(Object entity) {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);    	if (entityReplaceFlag    			&& data != null    			&& data.getCapsValueBoolean(data.caps_isPlayer)) {    		if (isPlayerAPI    				&& !PFLM_ConfigData.isPlayerAPIDebug    				&& thePlayer != null) Modchu_Reflect.invokeMethod("PFLM_PlayerBase", "init", entity);    		else if (!isPlayerAPI    				&& thePlayer != null) Modchu_Reflect.invokeMethod("PFLM_EntityPlayerSP", "init", entity);    	}    }    public static void changeColor(Object entity) {    	if (entity != null) ;else entity = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);    	if (data != null) {    		data.setCapsValue(data.caps_changeColor, entity);    		//Modchu_Debug.lDebug("changeColor");    	} else {    		//if (data != null) Modchu_Debug.lDebug("changeColor out.data.getCapsValueBoolean(data.caps_isPlayer) ?"+(data.getCapsValueBoolean(data.caps_isPlayer)));    	}    }    private static void sitSleepResetCheck() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	if (thePlayer != null) {    		PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    		if (data != null) PFLM_ModelDataMaster.instance.sitSleepResetCheck(data, thePlayer);    	}    }    public static void setPosition(double x, double y, double z) {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	if (thePlayer != null    			&& Modchu_AS.get(Modchu_AS.minecraftTheWorld) != null    			&& !isMulti) {    	} else return;    	Modchu_AS.set(Modchu_AS.entitySetPosition, x, y, z);    }    public static void setPositionCorrection(double x, double y, double z) {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	if (thePlayer != null    			&& Modchu_AS.get(Modchu_AS.minecraftTheWorld) != null    			&& !isMulti) {    	} else return;//-@-b166    	if (isPlayerAPI    			&& !PFLM_ConfigData.isPlayerAPIDebug) {    		Modchu_Reflect.invokeMethod("PFLM_EntityPlayer", "setPositionCorrection", new Class[]{ double.class, double.class, double.class }, thePlayer, new Object[]{ x, y, z });    		//PFLM_EntityPlayer.thePlayer.setPositionCorrection(x, y, z);    	} else {/*    		if (isSSP) {    			Object ret = Modchu_Reflect.invokeMethod(pflm_entityPlayerSP2, "setPositionCorrection", new Class[]{double.class, double.class, double.class}, thePlayer, x, y, z);    			//((PFLM_EntityPlayerSP2) thePlayer).setPositionCorrection(x, y, z);    		} else*///@-@b166    		Modchu_Reflect.invokeMethod("PFLM_EntityPlayerSP", "setPositionCorrection", new Class[]{ double.class, double.class, double.class }, thePlayer, new Object[]{ x, y, z });    	/*b166//*/}    }    public static boolean gotchaNullCheck() {//-@-125    	return true;//@-@125/*//125delete    	if (!entityReplaceFlag    			| isMulti) return true;    	if (thePlayer != null    			&& thePlayer.worldObj != null    			&& !(currentScreen instanceof GuiMainMenu)) {        } else return false;//-@-b166    	if (isPlayerAPI				&& !PFLM_ConfigData.isPlayerAPIDebug) {    		if (!PFLM_EntityPlayer.isInstance(thePlayer)) {    			Modchu_Debug.mDebug("playerControllerReplace2");    			playerControllerReplace();    		}    	} else {//@-@b166    		if (!(thePlayer instanceof PFLM_EntityPlayerSP)) {    			Modchu_Debug.mDebug("playerControllerReplace3");    			playerControllerReplace();    		}//-@-b166    	}//@-@b166    	return true;*///125delete    }    public static String getArmorName(String s) {    	return getArmorName(s, 0);    }    public static String getArmorName(String s, int i) {    	if (s == null) return "";    	String s1 = s;    	Object ltb = ModchuModel_Main.getTextureBox(s);    	if (ltb != null    			&& ModchuModel_Main.getTextureBoxHasArmor(ltb)) {    		//Modchu_Debug.mDebug("getArmorName getTextureBoxHasArmor true s1="+s1);    	} else {    		//Modchu_Debug.mDebug("getArmorName getTextureBoxHasArmor false s1="+s1);    		s1 = ModchuModel_Main.getModelSpecificationArmorPackege(s);    		if (s1 != null) return s1;    		boolean flag = specificationArmorCheckBoolean(s);    		s1 = specificationArmorCheck(s);    		if (!flag) {    			if (i == 1) {    				s1 = s1 != null ? s1.indexOf("_Biped") > -1 ? "_Biped" : "erasearmor" : "erasearmor";    			} else {    				s1 = s1 != null ? s1.indexOf("_Biped") > -1 ? "_Biped" : "default" : "default";    			}    		} else {    			s1 = i == 1 ? "erasearmor" : "default";    		}    	}    	//Modchu_Debug.mDebug("getArmorName s1="+s1+" i="+i);    	return s1;    }    public static String specificationArmorCheck(String s) {    	s = Modchu_Main.lastIndexProcessing(s, "_");    	String[] cheackModelName = specificationArmorCheckModelName();    	boolean flag = false;    	for (int i2 = 0 ; i2 < cheackModelName.length ; i2++) {    		if (s.startsWith(cheackModelName[i2])) {    			s = "erasearmor";    		}    	}    	return s;    }    public static boolean specificationArmorCheckBoolean(String s) {    	s = Modchu_Main.lastIndexProcessing(s, "_");    	String[] cheackModelName = specificationArmorCheckModelName();    	boolean flag = false;    	for (int i2 = 0 ; i2 < cheackModelName.length ; i2++) {    		if (s.startsWith(cheackModelName[i2])) {    			flag = true;    		}    	}    	return flag;    }    public static String[] specificationArmorCheckModelName() {    	return new String[] {    			"Elsa"    	};    }    public static void setSkinUrl(String s) {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	if (thePlayer != null    			&& Modchu_AS.get(Modchu_AS.minecraftTheWorld) != null    			&& !isMulti) {//-@-b166    		if (isPlayerAPI    				&& !PFLM_ConfigData.isPlayerAPIDebug) {    			Modchu_Reflect.setFieldObject("PFLM_PlayerBase", "skinUrl", Modchu_Reflect.getFieldObject("PFLM_PlayerBase", "player", thePlayer), s);    		} else {/*    			if (isSSP) {    				Modchu_Reflect.setFieldObject(Modchu_Reflect.getField(pflm_entityPlayerSP2, "skinUrl"), null, s);    				//((PFLM_EntityPlayerSP2) thePlayer).skinUrl = s;    			} else*///@-@b166    			Modchu_Reflect.setFieldObject("PFLM_EntityPlayerSP", "skinUrl", thePlayer, s);    		/*b166//*/}    	}    }    public static void setTexture(Object t) {		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	if (thePlayer != null    			&& Modchu_AS.get(Modchu_AS.minecraftTheWorld) != null    			&& !isMulti) {//-@-b166    		if (isPlayerAPI    				&& !PFLM_ConfigData.isPlayerAPIDebug) {    			Modchu_Reflect.invokeMethod("PFLM_PlayerBase", "setPlayerTexture", new Class[]{String.class}, thePlayer, t);    		} else {/*    			if (isSSP) {        			Object ret = Modchu_Reflect.invokeMethod(pflm_entityPlayerSP2, "setPlayerTexture", new Class[]{String.class}, thePlayer, s);    				//((PFLM_EntityPlayerSP2) thePlayer).setPlayerTexture(s);    			} else*///@-@b166    			Modchu_Reflect.invokeMethod("PFLM_EntityPlayerSP", "setPlayerTexture", new Class[]{String.class}, thePlayer, t);    		/*b166//*/}    	}    }    public static void resetHeight() {		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	if (thePlayer != null    			&& Modchu_AS.get(Modchu_AS.minecraftTheWorld) != null    			&& !isMulti) {    		Modchu_Reflect.invokeMethod("EntityPlayer", "func_71061_d_", "resetHeight", thePlayer);    	}    }    public static void clearDataMap() {/*    	Object thePlayer = Modchu_AccessSupport.instance.minecraftThePlayerO();    	RenderGlobal renderGlobal = (RenderGlobal) Modchu_Reflect.getFieldObject("Minecraft", "field_6323_f", "renderGlobal", mc);    	if (renderGlobal != null    			&& thePlayer != null) {    		renderGlobal.onEntityDestroy(thePlayer);    		renderGlobal.onEntityCreate(thePlayer);    	}*//*    		if (isOlddays) {    			Object ret = Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "clearPlayers");    			//PFLM_RenderPlayer2.clearDataMap();    		} else*/    	PFLM_ModelDataMaster.instance.clearDataMap();    }    public static void removeDataMap() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	removeDataMap(thePlayer);    }    public static void removeDataMap(Object entityPlayer) {    	PFLM_ModelDataMaster.instance.removeDataMap(entityPlayer);    }    public static void setSize(float f1, float f2) {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	if (thePlayer != null    			&& Modchu_AS.get(Modchu_AS.minecraftTheWorld) != null    			&& !isMulti) {    		Modchu_AS.set(Modchu_AS.entitySetSize, f1, f2);    	}    }    public static float getModelScale() {    	return getModelScale(null);    }    public static float getModelScale(Object entity) {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	if (entity != null) ;else entity = thePlayer;    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);    	Object textureModel = data.modelMain.model;    	if (textureModel != null    			&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getModelScale(data);    	return 0.9375F;    }    public static float getWidth() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	float f = 0.6F;    	if (Modchu_Main.getMinecraftVersion() > 129    			&& isOlddays) {    		Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");    		return Float.valueOf((String) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getWidth", obj[0]));    		//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getWidth();    	}    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (data != null) ;else return f;    	Object textureModel = data.modelMain.model;    	if (textureModel != null    			&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getWidth(data);    	return f;    }    public static float getHeight() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	float f = 1.8F;    	if (Modchu_Main.getMinecraftVersion() > 129    			&& isOlddays) {    		Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");    		return Float.valueOf((String) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getHeight", obj[0]));    		//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getHeight();    	}    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (data != null) ;else return f;    	Object textureModel = data.modelMain.model;    	if (textureModel != null    			&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getHeight(data);    	return f;    }    public static float getyOffset() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	float f = 1.62F;    	if (Modchu_Main.getMinecraftVersion() > 129    			&& isOlddays) {    		Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");    		return Float.valueOf((String) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getyOffset", obj[0]));    		//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getyOffset();    	}    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (data != null) ;else return f;    	Object textureModel = data.modelMain.model;    	if (textureModel != null    			&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getyOffset(data);    	return f;    }    public static float getRidingWidth() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	float f = 0.6F;    	if (Modchu_Main.getMinecraftVersion() > 129    			&& isOlddays) {    		Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");    		return Float.valueOf((String) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getRidingWidth", obj[0]));    		//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getRidingWidth();    	}    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (data != null) ;else return f;    	Object textureModel = data.modelMain.model;    	if (textureModel != null    			&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getRidingWidth(data);    	return f;    }    public static float getRidingHeight() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	float f = 1.8F;    	if (Modchu_Main.getMinecraftVersion() > 129    			&& isOlddays) {    		Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");    		return Float.valueOf((String) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getRidingHeight", obj[0]));    		//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getRidingHeight();    	}    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (data != null) ;else return f;    	Object textureModel = data.modelMain.model;    	if (textureModel != null    			&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getRidingHeight(data);    	return f;    }    public static float getRidingyOffset() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	float f = 1.62F;    	if (Modchu_Main.getMinecraftVersion() > 129    			&& isOlddays) {    		Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");    		return Float.valueOf((String) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getRidingyOffset", obj[0]));    		//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getRidingyOffset();    	}    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (data != null) ;else return f;    	Object textureModel = data.modelMain.model;    	if (textureModel != null    			&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getRidingyOffset(data);    	return f;    }    public static double getMountedYOffset() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	double d = 0.75D;    	if (Modchu_Main.getMinecraftVersion() > 129    			&& isOlddays) {    		Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");    		return Float.valueOf((String) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getMountedYOffset", obj[0]));    		//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getMountedYOffset();    	}    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (data != null) ;else return d;    	Object textureModel = data.modelMain.model;    	if (textureModel != null    			&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getMountedYOffset(data);    	return d;    }    public static boolean getIsRiding() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (data != null) ;else return false;    	Object textureModel = data.modelMain.model;    	if (textureModel != null    			&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).isRiding;    	return false;    }    public static float getPhysical_Hammer() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (data != null) ;else return PFLM_ConfigData.Physical_Hammer;    	Object textureModel = data.modelMain.model;    	if (textureModel != null    			&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).Physical_Hammer((ModchuModel_IModelCaps) data);    	return PFLM_ConfigData.Physical_Hammer;    }    public static float ridingViewCorrection() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (data != null) ;else return 0.0F;    	Object textureModel = data.modelMain.model;    	if (textureModel != null    			&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).ridingViewCorrection(data);    	return 0.0F;    }    public static boolean bipedCheck() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	if (thePlayer != null) ;else return false;    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (data != null) ;else return false;    	Object textureModel = data.modelMain.model;    	if (textureModel != null    			&& textureModel instanceof MultiModelBaseBiped) return BipedClass.isInstance(textureModel);    	return false;    }    public static float getOnGround() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (data != null) ;else return 0.0F;    	Object textureModel = data.modelMain.model;    	if (textureModel != null    			&& textureModel instanceof MultiModelBaseBiped) return (Float) ((MultiModelBaseBiped) textureModel).getCapsValue(((MultiModelBaseBiped) textureModel).caps_onGround, (ModchuModel_IModelCaps) data);    	return 0.0F;    }    public static float getEyeHeight() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	float f = 0.12F;    	if (thePlayer != null    			&& Modchu_AS.get(Modchu_AS.minecraftTheWorld) != null    			&& !isMulti) {//-@-125    		if (isSSP) {    			if (thePlayer != null) return Float.valueOf((String) Modchu_Reflect.invokeMethod("PFLM_EntityPlayerSP2", "getEyeHeight", thePlayer));    			//return ((PFLM_EntityPlayerSP2) thePlayer).getEyeHeight();    		} else//@-@125    			if (thePlayer != null) {//-@-b166    				if (isPlayerAPI    						&& !PFLM_ConfigData.isPlayerAPIDebug) {    					Object o = Modchu_Reflect.getFieldObject("PFLM_EntityPlayer", "thePlayer");    					if (o != null) return (Float) Modchu_Reflect.invokeMethod("EntityPlayer", "getEyeHeight", o);    				} else {//@-@b166    					if (thePlayer != null) return Float.valueOf((String) Modchu_Reflect.invokeMethod("PFLM_EntityPlayerSP2", "getEyeHeight", thePlayer));//-@-b166    				}//@-@b166    			}    	}    	if (thePlayer != null) return Modchu_AS.getFloat(Modchu_AS.entityGetEyeHeight);    	return 0.12F;    }    public static String getUsername() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	if (thePlayer != null) return Modchu_AS.getString(Modchu_AS.userName);    	return null;    }    public static boolean getChangeModelFlag() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (modelData != null) return modelData.getCapsValueBoolean(modelData.caps_changeModelFlag);    	return false;    }    public static void setChangeModelFlag(boolean b) {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	modelData.setCapsValue(modelData.caps_changeModelFlag, b);    }    public static int getHandednessMode(Object entity) {    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);    	if (modelData != null) return modelData.getCapsValueInt(modelData.caps_dominantArm);    	return 0;    }    public static void setHandednessMode(Object entity, int i) {    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);    	modelData.setCapsValue(modelData.caps_dominantArm, i);    }    public static boolean getActionFlag() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (modelData != null) return modelData.getCapsValueBoolean(modelData.caps_actionFlag);    	return false;    }    public static boolean[] getActionRequest() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (modelData != null) return modelData.getCapsValueBooleanArray(modelData.caps_actionRequest);    	return null;    }    public static void setActionRequest(boolean[] b) {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (modelData != null) modelData.setCapsValue(modelData.caps_actionRequest, b);    	return;    }    public static int getActionRequestNumber() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (modelData != null) return modelData.getCapsValueInt(modelData.caps_actionRequestNumber);    	return -1;    }    public static void setActionRequestNumber(int i) {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (modelData != null) modelData.setCapsValue(modelData.caps_actionRequestNumber, i);    	return;    }    public static int getActionReleaseNumber() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (modelData != null) return modelData.getCapsValueInt(modelData.caps_actionReleaseNumber);    	return -1;    }    public static void setActionReleaseNumber(int i) {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (modelData != null) modelData.setCapsValue(modelData.caps_actionReleaseNumber, i);    	return;    }    public static Object getModel(int i) {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (modelData != null) return modelData.getCapsValue((MultiModelBaseBiped) null, modelData.caps_model, i);    	return null;    }    public static Object getModel(Object entityPlayer, int i) {    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entityPlayer);    	if (modelData != null) return modelData.getCapsValue((MultiModelBaseBiped) null, modelData.caps_model, i);    	return null;    }    public static boolean getIsSitting() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (modelData != null) return modelData.getCapsValueBoolean(modelData.caps_isSitting);    	Modchu_Debug.mDebug("getIsSitting() modelData == null!!");    	return false;    }    public static void setIsSitting(boolean b) {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (modelData != null) modelData.setCapsValue(modelData.caps_isSitting, b);    	return;    }    public static boolean getIsSleeping() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (modelData != null) return modelData.getCapsValueBoolean(modelData.caps_isSleeping);    	return false;    }    public static void setIsSleeping(boolean b) {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (modelData != null) modelData.setCapsValue(modelData.caps_isSleeping, b);    	return;    }    public static String[] setTexturePackege(String textureName, String textureArmorName, int color, int prevNextNormal, boolean armorOnly) {    	if (!armorOnly) {    		String s = textureName;    		switch(prevNextNormal) {    		case 0:    			s = ModchuModel_Main.textureManagerGetPrevPackege(textureName, color);    			break;    		case 1:    			s = ModchuModel_Main.textureManagerGetNextPackege(textureName, color);    			break;    		case 2:    			break;    		}    		if (s != null    				&& !s.isEmpty()) ;else return null;    		textureName = s;    		textureArmorName = textureName;    		String s1 = getArmorName(textureArmorName, prevNextNormal);    		if (s1 != null    				&& !s1.isEmpty()) textureArmorName = s1;    	} else {    		textureArmorName = prevNextNormal == 0 ? ModchuModel_Main.textureManagerGetPrevArmorPackege(textureArmorName) : ModchuModel_Main.textureManagerGetNextArmorPackege(textureArmorName);    	}    	return new String[]{ textureName, textureArmorName };    }    public static int getMaidColor() {    	return PFLM_ConfigData.maidColor;    }    public static void setMaidColor(int i) {    	PFLM_ConfigData.maidColor = i & 0xf;    }    public static void setMaidColor(Object entityplayer, int i) {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	if (entityplayer != null) ;else entityplayer = thePlayer;    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entityplayer);    	if (data != null) {    		data.setCapsValue(data.caps_maidColor, i);    	}    }    public static void setTextureName(String s) {    	PFLM_ConfigData.textureName = s;    }    public static void setTextureArmorName(String s) {    	PFLM_ConfigData.textureArmorName = s;    }    public static boolean getFlipHorizontal() {    	return PFLM_ItemRendererMaster.flipHorizontal;    }    public static void setFlipHorizontal(boolean b) {    	PFLM_ItemRendererMaster.flipHorizontal = b;    	return;    }    public static void setLeftHandedness(boolean b) {    	PFLM_ItemRendererMaster.leftHandedness = b;    	return;    }    public static boolean getLeftHandedness() {    	return PFLM_ItemRendererMaster.leftHandedness;    }    public static void customModelCfgReLoad() {    	Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);    	PFLM_ModelData data = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);    	if (data != null) ;else return;    	Modchu_ModelMultiReplacePoint[] textureModel = {    			(Modchu_ModelMultiReplacePoint) data.modelMain.model,    			(Modchu_ModelMultiReplacePoint) data.modelFATT.modelInner,    			(Modchu_ModelMultiReplacePoint) data.modelFATT.modelOuter    	};    	float[] f1;    	for(int i = 0; i < textureModel.length; i++) {    		if (textureModel != null    				&& textureModel[i] instanceof MultiModelCustom) {    			f1 = ModchuModel_Main.getArmorModelsSize(textureModel[i]);    			if (f1 != null) ((MultiModelCustom) textureModel[i]).customModel.init(null, null, f1[0], f1[1]);    		}    	}    }    public static void loadcfg() {		// cfg読み込み		if (cfgdir.exists()) {			if (!mainCfgfile.exists()) {				// cfgファイルが無い = 新規作成				String s[] = {						"AlphaBlend=true",						"Physical_HurtSound=damage.hit", "isPlayerForm=true",						"isPlayerAPIDebug=false",						"isClearWater=false",						"watherFog=0.1F", "watherFog2=0.05F", "waterStillLightOpacity=3",						"waterMovingLightOpacity=3",						"transparency=1.0F",						"textureSavedir=/output/", "guiMultiPngSaveButton=true",						"changeModeButton=true", "isRenderName=true",						"waitTime=600",						"multiAutochangeMode=true", "skirtFloats=false", "skirtFloatsVolume=1.0F",						"othersPlayerWaitTime=600", "versionCheck=true",						"useScaleChange=true", "mushroomConfusion=true", "entityReplace=false",						"useAddChatMessage=true"/*//125delete						, "Physical_BurningPlayer=0", "Physical_MeltingPlayer=0", "Physical_Hammer=1.0F",						"Physical_Undead=false", "isVoidFog=true", "isFog=true",						"isDimming=true", "lavaFog=2.0F", "isMouseOverMinecraftMenu=true",						"isSwapGuiSelectWorld=false", "isModelSize=false"*///125delete				};				PFLM_Config.writerConfig(mainCfgfile, s);			} else {				// cfgファイルがある				PFLM_ConfigData.AlphaBlend = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "AlphaBlend", PFLM_ConfigData.AlphaBlend)).toString());				PFLM_ConfigData.Physical_HurtSound = (PFLM_Config.loadConfig(mainCfgfile, "Physical_HurtSound", PFLM_ConfigData.Physical_HurtSound)).toString();				PFLM_ConfigData.isPlayerForm = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "isPlayerForm", PFLM_ConfigData.isPlayerForm)).toString());				PFLM_ConfigData.isPlayerAPIDebug = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "isPlayerAPIDebug", PFLM_ConfigData.isPlayerAPIDebug)).toString());				PFLM_ConfigData.isClearWater = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "isClearWater", PFLM_ConfigData.isClearWater)).toString());				PFLM_ConfigData.watherFog = Float.valueOf((PFLM_Config.loadConfig(mainCfgfile, "watherFog", PFLM_ConfigData.watherFog)).toString());				PFLM_ConfigData.watherFog2 = Float.valueOf((PFLM_Config.loadConfig(mainCfgfile, "watherFog2", PFLM_ConfigData.watherFog2)).toString());				PFLM_ConfigData.waterStillLightOpacity = Integer.valueOf((PFLM_Config.loadConfig(mainCfgfile, "waterStillLightOpacity", PFLM_ConfigData.waterStillLightOpacity)).toString());				PFLM_ConfigData.waterMovingLightOpacity = Integer.valueOf((PFLM_Config.loadConfig(mainCfgfile, "waterMovingLightOpacity", PFLM_ConfigData.waterMovingLightOpacity)).toString());				PFLM_ConfigData.transparency = Float.valueOf((PFLM_Config.loadConfig(mainCfgfile, "transparency", PFLM_ConfigData.transparency)).toString());				PFLM_ConfigData.textureSavedir = (PFLM_Config.loadConfig(mainCfgfile, "textureSavedir", PFLM_ConfigData.textureSavedir)).toString();				PFLM_ConfigData.guiMultiPngSaveButton = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "guiMultiPngSaveButton", PFLM_ConfigData.guiMultiPngSaveButton)).toString());				PFLM_ConfigData.changeModeButton = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "changeModeButton", PFLM_ConfigData.changeModeButton)).toString());				PFLM_ConfigData.isRenderName = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "isRenderName", PFLM_ConfigData.isRenderName)).toString());				PFLM_ConfigData.waitTime = Integer.valueOf((PFLM_Config.loadConfig(mainCfgfile, "waitTime", PFLM_ConfigData.waitTime)).toString());				PFLM_ConfigData.multiAutochangeMode = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "multiAutochangeMode", PFLM_ConfigData.multiAutochangeMode)).toString());				PFLM_ConfigData.othersPlayerWaitTime = Integer.valueOf((PFLM_Config.loadConfig(mainCfgfile, "othersPlayerWaitTime", PFLM_ConfigData.othersPlayerWaitTime)).toString());				PFLM_ConfigData.versionCheck = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "versionCheck", PFLM_ConfigData.versionCheck)).toString());				PFLM_ConfigData.useScaleChange = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "useScaleChange", PFLM_ConfigData.useScaleChange)).toString());				PFLM_ConfigData.mushroomConfusion = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "mushroomConfusion", PFLM_ConfigData.mushroomConfusion)).toString());				PFLM_ConfigData.entityReplace = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "entityReplace", PFLM_ConfigData.entityReplace)).toString());				PFLM_ConfigData.useAddChatMessage = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "useAddChatMessage", PFLM_ConfigData.useAddChatMessage)).toString());/*//125delete				PFLM_ConfigData.Physical_BurningPlayer = Integer.valueOf((PFLM_Config.loadConfig(mainCfgfile, "Physical_BurningPlayer", PFLM_ConfigData.Physical_BurningPlayer)).toString());				PFLM_ConfigData.Physical_MeltingPlayer = Integer.valueOf((PFLM_Config.loadConfig(mainCfgfile, "Physical_MeltingPlayer", PFLM_ConfigData.Physical_MeltingPlayer)).toString());				PFLM_ConfigData.Physical_Hammer = Float.valueOf((PFLM_Config.loadConfig(mainCfgfile, "Physical_Hammer", PFLM_ConfigData.Physical_Hammer)).toString());				PFLM_ConfigData.Physical_Undead = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "Physical_Undead", PFLM_ConfigData.Physical_Undead)).toString());				PFLM_ConfigData.isVoidFog = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "isVoidFog", PFLM_ConfigData.isVoidFog)).toString());				PFLM_ConfigData.isFog = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "isFog", PFLM_ConfigData.isFog)).toString());				PFLM_ConfigData.isDimming = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "isDimming", PFLM_ConfigData.isDimming)).toString());				PFLM_ConfigData.lavaFog = Float.valueOf((PFLM_Config.loadConfig(mainCfgfile, "lavaFog", PFLM_ConfigData.lavaFog)).toString());				PFLM_ConfigData.isMouseOverMinecraftMenu = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "isMouseOverMinecraftMenu", PFLM_ConfigData.isMouseOverMinecraftMenu)).toString());				PFLM_ConfigData.isSwapGuiSelectWorld = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "isSwapGuiSelectWorld", PFLM_ConfigData.isSwapGuiSelectWorld)).toString());				PFLM_ConfigData.isModelSize = Boolean.valueOf((PFLM_Config.loadConfig(mainCfgfile, "isModelSize", PFLM_ConfigData.isModelSize)).toString());*///125delete				cfgMaxMinCheck();				String k[] = {						"AlphaBlend",						"Physical_HurtSound", "isPlayerForm",						"isPlayerAPIDebug",						"isClearWater",						"watherFog", "watherFog2", "waterStillLightOpacity",						"waterMovingLightOpacity",						"transparency",						"textureSavedir", "guiMultiPngSaveButton",						"changeModeButton", "isRenderName",						"waitTime",						"multiAutochangeMode",						"othersPlayerWaitTime", "versionCheck",						"useScaleChange", "mushroomConfusion", "entityReplace",						"useAddChatMessage"/*//125delete						, "Physical_BurningPlayer", "Physical_MeltingPlayer", "Physical_Hammer",						"Physical_Undead", "isVoidFog", "isFog",						"isDimming", "lavaFog", "isMouseOverMinecraftMenu",						"isSwapGuiSelectWorld", "isModelSize"*///125delete				};				String k1[] = {						""+PFLM_ConfigData.AlphaBlend,						""+PFLM_ConfigData.Physical_HurtSound, ""+PFLM_ConfigData.isPlayerForm,						""+PFLM_ConfigData.isPlayerAPIDebug,						""+PFLM_ConfigData.isClearWater,						""+PFLM_ConfigData.watherFog, ""+PFLM_ConfigData.watherFog2, ""+PFLM_ConfigData.waterStillLightOpacity,						""+PFLM_ConfigData.waterMovingLightOpacity,						""+PFLM_ConfigData.transparency,						""+PFLM_ConfigData.textureSavedir, ""+PFLM_ConfigData.guiMultiPngSaveButton,						""+PFLM_ConfigData.changeModeButton, ""+PFLM_ConfigData.isRenderName,						""+PFLM_ConfigData.waitTime,						""+PFLM_ConfigData.multiAutochangeMode,						""+PFLM_ConfigData.othersPlayerWaitTime, ""+PFLM_ConfigData.versionCheck,						""+PFLM_ConfigData.useScaleChange, ""+PFLM_ConfigData.mushroomConfusion, ""+PFLM_ConfigData.entityReplace,						""+PFLM_ConfigData.useAddChatMessage/*//125delete						, ""+PFLM_ConfigData.Physical_BurningPlayer, ""+PFLM_ConfigData.Physical_MeltingPlayer, ""+PFLM_ConfigData.Physical_Hammer,						""+PFLM_ConfigData.Physical_Undead, ""+PFLM_ConfigData.isVoidFog, ""+PFLM_ConfigData.isFog,						""+PFLM_ConfigData.isDimming, ""+PFLM_ConfigData.lavaFog, ""+PFLM_ConfigData.isMouseOverMinecraftMenu,						""+PFLM_ConfigData.isSwapGuiSelectWorld, ""+PFLM_ConfigData.isModelSize*///125delete				};				PFLM_Config.writerSupplementConfig(mainCfgfile, k, k1);				checkEntityReplaceNecessity();				Modchu_Debug.lDebug("loadcfg() mainCfgfile load ok.");			}		} else {			Modchu_Debug.lDebug("loadcfg() !cfgdir.exists() error !!");		}	}	private static void checkEntityReplaceNecessity() {		if (PFLM_ConfigData.entityReplace				&& (PFLM_ConfigData.Physical_BurningPlayer != 0				| PFLM_ConfigData.Physical_MeltingPlayer != 0				| PFLM_ConfigData.Physical_Hammer != 1.0F				| PFLM_ConfigData.Physical_Undead				| !PFLM_ConfigData.Physical_HurtSound.equalsIgnoreCase("damage.hit")/*//125delete				| PFLM_ConfigData.isSwapGuiSelectWorld*///125delete				| PFLM_ConfigData.isModelSize)) entityReplaceFlag = true;	}	public static void cfgMaxMinCheck() {		if (PFLM_ConfigData.watherFog < 0.0F) PFLM_ConfigData.watherFog = 0.0F;		if (PFLM_ConfigData.watherFog > 1.0F) PFLM_ConfigData.watherFog = 1.0F;		if (PFLM_ConfigData.watherFog2 < 0.0F) PFLM_ConfigData.watherFog2 = 0.0F;		if (PFLM_ConfigData.watherFog2 > 1.0F) PFLM_ConfigData.watherFog2 = 1.0F;		if (PFLM_ConfigData.waterStillLightOpacity < 0) PFLM_ConfigData.waterStillLightOpacity = 0;		if (PFLM_ConfigData.waterStillLightOpacity > 255) PFLM_ConfigData.waterStillLightOpacity = 255;		if (PFLM_ConfigData.waterMovingLightOpacity < 0) PFLM_ConfigData.waterMovingLightOpacity = 0;		if (PFLM_ConfigData.waterMovingLightOpacity > 255) PFLM_ConfigData.waterMovingLightOpacity = 255;		if (PFLM_ConfigData.lavaFog < 0.0F) PFLM_ConfigData.lavaFog = 0.0F;		if (PFLM_ConfigData.lavaFog > 2.0F) PFLM_ConfigData.lavaFog = 2.0F;		if (PFLM_ConfigData.transparency < 0.0F) PFLM_ConfigData.transparency = 0.0F;		if (PFLM_ConfigData.transparency > 1.0F) PFLM_ConfigData.transparency = 1.0F;	}	public static void writerParamater() {		//GUI設定ファイル書き込み		String s[] = {				"textureName="+PFLM_ConfigData.textureName, "textureArmorName="+PFLM_ConfigData.textureArmorName, "maidColor="+PFLM_ConfigData.maidColor,				"ModelScale="+PFLM_ConfigData.modelScale, "changeMode="+PFLM_ConfigData.changeMode, "setModel="+PFLM_GuiMaster.setModel,				"setColor=0", "setArmor=0", "changeMode=0", "othersChangeMode=1"		};		PFLM_Config.writerConfig(cfgfile, s);	}	public static void loadParamater() {		// Gui設定項目読み込み		Modchu_Debug.mDebug("PFLM_Main loadParamater");		if (cfgdir.exists()) {			if (!cfgfile.exists()) {				// コンフィグファイルが無い = 新規作成				writerParamater();			} else {				// コンフィグファイルがある				PFLM_ConfigData.textureArmorName = (PFLM_Config.loadConfig(cfgfile, "textureArmorName", PFLM_ConfigData.textureArmorName)).toString();				PFLM_ConfigData.textureName = (PFLM_Config.loadConfig(cfgfile, "textureName", PFLM_ConfigData.textureName)).toString();				PFLM_ConfigData.maidColor = Integer.valueOf((PFLM_Config.loadConfig(cfgfile, "maidColor", PFLM_ConfigData.maidColor)).toString());				PFLM_ConfigData.modelScale = Float.valueOf((PFLM_Config.loadConfig(cfgfile, "ModelScale", PFLM_ConfigData.modelScale)).toString());				PFLM_ConfigData.changeMode = Integer.valueOf((PFLM_Config.loadConfig(cfgfile, "changeMode", PFLM_ConfigData.changeMode)).toString());				PFLM_GuiMaster.setModel = Integer.valueOf((PFLM_Config.loadConfig(cfgfile, "setModel", PFLM_GuiMaster.setModel)).toString());				PFLM_GuiMaster.setColor = Integer.valueOf((PFLM_Config.loadConfig(cfgfile, "setColor", PFLM_GuiMaster.setColor)).toString());				PFLM_GuiMaster.setArmor = Integer.valueOf((PFLM_Config.loadConfig(cfgfile, "setArmor", PFLM_GuiMaster.setArmor)).toString());				PFLM_ConfigData.handednessMode = Integer.valueOf((PFLM_Config.loadConfig(cfgfile, "handednessMode", PFLM_ConfigData.handednessMode)).toString());				PFLM_ConfigData.changeMode = Integer.valueOf((PFLM_Config.loadConfig(cfgfile, "changeMode", PFLM_ConfigData.changeMode)).toString());				PFLM_ConfigData.othersChangeMode = Integer.valueOf((PFLM_Config.loadConfig(cfgfile, "othersChangeMode", PFLM_ConfigData.othersChangeMode)).toString());				Modchu_Debug.mDebug("PFLM_Main loadConfig");				PFLM_Config.loadConfig(showModelList, cfgfile);				if (PFLM_ConfigData.handednessMode < -1) PFLM_ConfigData.handednessMode = -1;				if (PFLM_ConfigData.handednessMode > 1) PFLM_ConfigData.handednessMode = 1;			}		}	}	public static void saveParamater() {		// Gui設定項目をcfgファイルに保存		String k[] = {				"textureName", "textureArmorName", "maidColor", "ModelScale", "setModel",				"setColor", "setArmor", "handednessMode", "changeMode", "othersChangeMode"		};		String k1[] = {				""+PFLM_ConfigData.textureName, ""+PFLM_ConfigData.textureArmorName, ""+PFLM_ConfigData.maidColor, ""+PFLM_ConfigData.modelScale, ""+PFLM_GuiMaster.setModel,				""+PFLM_GuiMaster.setColor, ""+PFLM_GuiMaster.setArmor, ""+PFLM_ConfigData.handednessMode, ""+PFLM_ConfigData.changeMode, ""+PFLM_ConfigData.othersChangeMode		};		PFLM_Config.saveParamater(cfgfile, k, k1);	}	public static void writerTextureList() {		//textureListファイル 新規作成		String s[] = {				"autoUpdates=true",				"default", "ERYI_Aokise", "MMM_Aug", "b2color_Beverly2", "Cirno_chrno",				"chu_chu", "CV_DogAngel", "CV_DogAngel2", "e10color_Elsa", "e2color_Elsie" ,				"littleForces_ExtraArms", "CF_Kagami", "Rana_Kelo", "CF_long", "m1color_Mabel",				"Mahoro_mahoro", "naz_naz", "MaidCV_Petit", "x32_QB", "kimono_Shion",				"MMM_SR2", "suika_suika", "CV_taremimi", "Tei_tareusa", "CF_twinD",				"CV_usagi", "CV_Utsuho", "Manju_Yukkuri", "e11color_Elsa2", "b4color_Beverly3",				"CV_Angel", "CV_Tenshi" ,"CV_Yomu", "CV_ChibiNeko", "CV_Pawapro",				"moyu_SA", "littleMaidMob_bgs", "littleMaidMob_brs", "LittleMaidMob_ch", "littleMaidMob_dm",				"littleMaidMob_st", "littleMaidMob_MS", "littleMAidMob_MS1", "LittleMaidMob_NM", "LittleMaidMob_NM1",				"b3color_Beverly4", "e20colorQ_Evelyn3", "LittleVocal_VUD1.Aki_VUD1", "LittleVocal_VUD1.Aku_VUD1", "LittleVocal_VUD1.Fuyu_VUD1",				"LittleVocal_VUD1.Gumi_VUD1", "LittleVocal_VUD1.Haku_VUD1", "LittleVocal_VUD1.Haru_VUD1", "LittleVocal_VUD1.Ia_VUD1", "LittleVocal_VUD1.Kiku_VUD1",				"LittleVocal_VUD1.Lily_VUD1", "LittleVocal_VUD1.Luka_VUD1", "LittleVocal_VUD1.Mako_VUD1", "LittleVocal_VUD1.Meiko_VUD1", "LittleVocal_VUD1.Miki_VUD1",				"LittleVocal_VUD1.Miku_VUD1", "LittleVocal_VUD1.Momo_VUD1", "LittleVocal_VUD1.Natsu_VUD1", "LittleVocal_VUD1.Neru_VUD1", "LittleVocal_VUD1.Oto_VUD1",				"LittleVocal_VUD1.Rin_VUD1", "LittleVocal_VUD1.Rina_VUD1", "LittleVocal_VUD1.Ruko_VUD1", "LittleVocal_VUD1.Sara_VUD1", "LittleVocal_VUD1.Tei_VUD1",				"LittleVocal_VUD1.Teto_VUD1", "LittleVocal_VUD1.Uta_VUD1", "LittleVocal_VUD1.Yukari0_VUD1", "LittleVocal_VUD1.Yukari1_VUD1", "LittleVocal_VUD1.ZMiku_VUD1",				"LittleVocal_VUD1.Yukari1_VUD1.0_SR2", "VOICEROID.Yukari_Yukari", "VOICEROID.Yukari_Yukari", "VOICEROID.YukariS0_Yukari", "VOICEROID.YukariS1_Yukari",				"e11color_Elsa3", "e11under_Elsa3", "Catcher_Pawapro", "Batter_Pawapro", "b4under_Beverly4",				"kimono_pl_Shion", "Sword_NM", "Ar_NM", "x16_QB", "Hituji",				"Udonge_usagi", "neta_chu", "ColorVariation_chu", "NetaPetit_Petit", "CV_DressYukari",				"e12color_Elsa3", "b14color_Beverly5", "e14color_Elsa4", "e14under_Elsa4", "b15color_Beverly6",				"b15under_Beverly6", "default_Custom1", "e15color_Elsa5", "e15under_Elsa5", "b16color_Chloe2",				"b16under_Chloe2", "b16color_Beverly7", "b16under_Beverly7", "jamBAND.Kana_SA", "jamBAND.Kanon_SA",				"jamBAND.Maki_SA", "jamBAND.Rizumu_SA", "HiFM_Squirrel", "HiFM_Sheep", "HiFM_Rabbit",				"HiFM_Fox", "HiFM_Dog", "HiFM_Cat", "HiFM_Bear"		};		PFLM_Config.writerModelList(s, textureListfile, textureList);	}	public static void loadTextureList() {		// ModelList読み込み		if (cfgdir.exists()) {			if (!textureListfile.exists()) {				// textureListファイルが無い = 新規作成				writerTextureList();			} else {				// textureListファイルがある				boolean b = PFLM_Config.loadList(textureListfile, textureList, "PlayerFormLittleMaidtextureList.cfg");				if (!b) writerTextureList();			}		}	}	public static void writerOthersPlayerParamater() {		//GUIOthersPlayer設定ファイル書き込み		String s[] = {				"othersTextureName="+PFLM_ConfigData.othersTextureName, "othersTextureArmorName="+PFLM_ConfigData.othersTextureArmorName, "othersMaidColor="+PFLM_ConfigData.othersMaidColor,				"othersModelScale="+PFLM_ConfigData.othersModelScale		};		PFLM_Config.writerConfig(othersCfgfile, s);	}	public static void loadOthersPlayerParamater() {		// GuiOthersPlayer設定項目読み込み		Modchu_Debug.mDebug("loadOthersPlayerParamater");		if (cfgdir.exists()) {			if (!othersCfgfile.exists()) {				// コンフィグファイルが無い = 新規作成				writerOthersPlayerParamater();			} else {				// コンフィグファイルがある				PFLM_ConfigData.othersTextureName = (PFLM_Config.loadConfig(othersCfgfile, "othersTextureName", PFLM_ConfigData.othersTextureName)).toString();				PFLM_ConfigData.othersTextureArmorName = (PFLM_Config.loadConfig(othersCfgfile, "othersTextureArmorName", PFLM_ConfigData.othersTextureArmorName)).toString();				PFLM_ConfigData.othersMaidColor = Integer.valueOf((PFLM_Config.loadConfig(othersCfgfile, "othersMaidColor", PFLM_ConfigData.othersMaidColor)).toString());				PFLM_ConfigData.othersModelScale = Float.valueOf((PFLM_Config.loadConfig(othersCfgfile, "othersModelScale", PFLM_ConfigData.othersModelScale)).toString());				PFLM_ConfigData.othersChangeMode = Integer.valueOf((PFLM_Config.loadConfig(othersCfgfile, "changeMode", PFLM_ConfigData.othersChangeMode)).toString());				PFLM_ConfigData.othersHandednessMode = Integer.valueOf((PFLM_Config.loadConfig(othersCfgfile, "PFLM_ConfigData.othersHandednessMode", PFLM_ConfigData.othersHandednessMode)).toString());				PFLM_Config.loadConfigPlayerLocalData(playerLocalData, othersCfgfile);				if (PFLM_ConfigData.othersChangeMode > PFLM_GuiOthersPlayerMaster.othersPlayerMaxchangeMode) PFLM_ConfigData.othersChangeMode = 0;				if (PFLM_ConfigData.othersChangeMode < 0) PFLM_ConfigData.othersChangeMode = PFLM_GuiOthersPlayerMaster.othersPlayerMaxchangeMode;			}		}	}	public static void saveOthersPlayerParamater(boolean flag) {		// GuiOthersPlayer設定項目をcfgファイルに保存		String k[] = {				"othersTextureName", "othersTextureArmorName", "othersMaidColor", "othersModelScale", "changeMode",				"othersHandednessMode"		};		String k1[] = {				""+PFLM_ConfigData.othersTextureName, ""+PFLM_ConfigData.othersTextureArmorName, ""+PFLM_ConfigData.othersMaidColor, ""+PFLM_ConfigData.othersModelScale, ""+PFLM_ConfigData.othersChangeMode,				""+PFLM_ConfigData.othersHandednessMode		};		PFLM_Config.saveOthersPlayerParamater(PFLM_GuiOthersPlayerIndividualCustomizeMaster.playerName, playerLocalData, othersCfgfile, k, k1, flag);	}	public static void removeOthersPlayerParamater(String s) {		// GuiOthersPlayer設定から指定内容削除		PFLM_Config.removeOthersPlayerParamater(othersCfgfile, s);	}	public static void saveShortcutKeysPlayerParamater() {		// GuiShortcutKeys設定項目をcfgファイルに保存		if (!shortcutKeysCfgfile.exists()) {			// コンフィグファイルが無い = 新規作成			writerShortcutKeysParamater();		}		int m = 9;		String k[] = new String[PFLM_ConfigData.maxShortcutKeys * m];		String k1[] = new String [PFLM_ConfigData.maxShortcutKeys * m];		int j;		StringBuilder sb = new StringBuilder();		for(int i = 0; i < PFLM_ConfigData.maxShortcutKeys;i++) {			j = 0;			if (PFLM_ConfigData.shortcutKeysTextureName[i] != null) {} else PFLM_ConfigData.shortcutKeysTextureName[i] = "default";			if (PFLM_ConfigData.shortcutKeysTextureArmorName[i] != null) {} else PFLM_ConfigData.shortcutKeysTextureArmorName[i] = "default";			if (PFLM_ConfigData.shortcutKeysModelScale[i] != 0.0F) {} else PFLM_ConfigData.shortcutKeysModelScale[i] = 0.9375F;			k[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysTextureName[").append(i).append("]").toString();			k1[m * i + j] = PFLM_ConfigData.shortcutKeysTextureName[i];			j++;			sb.delete(0, sb.length());			k[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysTextureArmorName[").append(i).append("]").toString();			k1[m * i + j] = PFLM_ConfigData.shortcutKeysTextureArmorName[i];			j++;			sb.delete(0, sb.length());			k[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysMaidColor[").append(i).append("]").toString();			k1[m * i + j] = ""+PFLM_ConfigData.shortcutKeysMaidColor[i];			j++;			sb.delete(0, sb.length());			k[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysChangeMode[").append(i).append("]").toString();			k1[m * i + j] = ""+PFLM_ConfigData.shortcutKeysChangeMode[i];			j++;			sb.delete(0, sb.length());			k[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysModelScale[").append(i).append("]").toString();			k1[m * i + j] = ""+PFLM_ConfigData.shortcutKeysModelScale[i];			j++;			sb.delete(0, sb.length());			k[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysUse[").append(i).append("]").toString();			k1[m * i + j] = ""+PFLM_ConfigData.shortcutKeysUse[i];			j++;			sb.delete(0, sb.length());			k[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysPFLMModelsUse[").append(i).append("]").toString();			k1[m * i + j] = ""+PFLM_ConfigData.shortcutKeysPFLMModelsUse[i];			j++;			sb.delete(0, sb.length());			k[m * i + j] = sb.append("shortcutKeysCtrlUse[").append(i).append("]").toString();			k1[m * i + j] = ""+PFLM_ConfigData.shortcutKeysCtrlUse[i];			j++;			sb.delete(0, sb.length());			k[m * i + j] = sb.append("shortcutKeysShiftUse[").append(i).append("]").toString();			k1[m * i + j] = ""+PFLM_ConfigData.shortcutKeysShiftUse[i];			j++;			sb.delete(0, sb.length());		};		PFLM_Config.saveParamater(shortcutKeysCfgfile, k, k1);	}	public static void writerShortcutKeysParamater() {		//GUIShortcutKeys設定ファイル書き込み		int m = 9;		String s[] = new String [PFLM_ConfigData.maxShortcutKeys * m];		int j;		StringBuilder sb = new StringBuilder();		for(int i = 0; i < PFLM_ConfigData.maxShortcutKeys;i++) {			j = 0;			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysTextureName[").append(i).append("]=default").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysTextureArmorName[").append(i).append("]=default").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysMaidColor[").append(i).append("]=0").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysChangeMode[").append(i).append("]=0").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysModelScale[").append(i).append("]=0.9375").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysUse[").append(i).append("]=false").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("PFLM_ConfigData.shortcutKeysPFLMModelsUse[").append(i).append("]=false").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("shortcutKeysCtrlUse[").append(i).append("]=false").toString();			j++;			sb.delete(0, sb.length());			s[m * i + j] = sb.append("shortcutKeysShiftUse[").append(i).append("]=false").toString();			j++;			sb.delete(0, sb.length());		};		PFLM_Config.writerConfig(shortcutKeysCfgfile, s);	}	public static void loadShortcutKeysParamater() {		// GuiShortcutKeys設定項目読み込み		Modchu_Debug.mDebug("loadShortcutKeysParamater");		if (cfgdir.exists()) {			if (!shortcutKeysCfgfile.exists()) {				// コンフィグファイルが無い = 新規作成				//writerShortcutKeysParamater();			} else {				// コンフィグファイルがある				String s;				String k;				for(int i = 0; i < PFLM_ConfigData.maxShortcutKeys;i++) {					k = PFLM_ConfigData.shortcutKeysTextureName[i] != null ? PFLM_ConfigData.shortcutKeysTextureName[i] : "";					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("PFLM_ConfigData.shortcutKeysTextureName[").append(i).append("]").toString(), k).toString();					PFLM_ConfigData.shortcutKeysTextureName[i] = s != null ? s: "default";					k = PFLM_ConfigData.shortcutKeysTextureArmorName[i] != null ? PFLM_ConfigData.shortcutKeysTextureArmorName[i] : "";					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("PFLM_ConfigData.shortcutKeysTextureArmorName[").append(i).append("]").toString(), k).toString();					PFLM_ConfigData.shortcutKeysTextureArmorName[i] = s != null ? s: "default";					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("PFLM_ConfigData.shortcutKeysMaidColor[").append(i).append("]").toString(), PFLM_ConfigData.shortcutKeysMaidColor[i]).toString();					PFLM_ConfigData.shortcutKeysMaidColor[i] = s != null ? Integer.valueOf(s) : 0;					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("PFLM_ConfigData.shortcutKeysChangeMode[").append(i).append("]").toString(), PFLM_ConfigData.shortcutKeysChangeMode[i]).toString();					PFLM_ConfigData.shortcutKeysChangeMode[i] = s != null ? Integer.valueOf(s) : 0;					if (PFLM_ConfigData.shortcutKeysChangeMode[i] > PFLM_GuiKeyControlsMaster.changeModeMax) PFLM_ConfigData.shortcutKeysChangeMode[i] = 0;					if (PFLM_ConfigData.shortcutKeysChangeMode[i] < 0) PFLM_ConfigData.shortcutKeysChangeMode[i] = PFLM_GuiKeyControlsMaster.changeModeMax;					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("PFLM_ConfigData.shortcutKeysModelScale[").append(i).append("]").toString(), PFLM_ConfigData.shortcutKeysModelScale[i]).toString();					PFLM_ConfigData.shortcutKeysModelScale[i] = s != null ? Float.valueOf(s) : 0.9375F;					if (PFLM_ConfigData.shortcutKeysModelScale[i] > 10.0F) PFLM_ConfigData.shortcutKeysModelScale[i] = 10.0F;					if (PFLM_ConfigData.shortcutKeysModelScale[i] < 0.0F) PFLM_ConfigData.shortcutKeysModelScale[i] = 0.0F;					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("PFLM_ConfigData.shortcutKeysUse[").append(i).append("]").toString(), PFLM_ConfigData.shortcutKeysUse[i]).toString();					PFLM_ConfigData.shortcutKeysUse[i] = s != null ? Boolean.valueOf(s) : false;					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("PFLM_ConfigData.shortcutKeysPFLMModelsUse[").append(i).append("]").toString(), PFLM_ConfigData.shortcutKeysPFLMModelsUse[i]).toString();					PFLM_ConfigData.shortcutKeysPFLMModelsUse[i] = s != null ? Boolean.valueOf(s) : false;					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("shortcutKeysCtrlUse[").append(i).append("]").toString(), PFLM_ConfigData.shortcutKeysCtrlUse[i]).toString();					PFLM_ConfigData.shortcutKeysCtrlUse[i] = s != null ? Boolean.valueOf(s) : false;					s = PFLM_Config.loadConfig(shortcutKeysCfgfile, new StringBuilder().append("shortcutKeysShiftUse[").append(i).append("]").toString(), PFLM_ConfigData.shortcutKeysShiftUse[i]).toString();					PFLM_ConfigData.shortcutKeysShiftUse[i] = s != null ? Boolean.valueOf(s) : false;				}			}		}	}	public static void texturesNamberInit() {		//モデルリスト用テクスチャーパックナンバー作成		if (texturesNamberInitFlag) return;		texturesNamberInitFlag = true;		List<Object> textures = ModchuModel_Main.getTextureManagerTextures();		PFLM_ConfigData.texturesNamber = new int[16][textures.size()];		PFLM_ConfigData.texturesArmorNamber = new int[textures.size()];		for (int color = 0 ; color < 16 ; color++) {			for (int i2 = 0 ; i2 < textures.size() ; ++i2) {				PFLM_ConfigData.texturesNamber[color][i2] = -1;			}		}		String fileName = null;		String t = null;		String t1 = null;		int[] i1 = new int[16];		int i3 = 0;		Object ltb;		for (int i2 = 0 ; i2 < textures.size() ; ++i2) {			PFLM_ConfigData.texturesArmorNamber[i3] = -1;			ltb = textures.get(i2);			fileName = ModchuModel_Main.getTextureBoxFileName(ltb);			t1 = fileName != null ? fileName : t1;			if (ltb != null					&& t1 != null					&& !t1.isEmpty()) {				for (int color = 0 ; color < 16 ; color++) {					if (ModchuModel_Main.getTextureBoxHasColor(ltb, color)) {						//Modchu_Debug.mDebug("color="+color+":i1="+i1[color]+" t1="+t1+" t="+t);						PFLM_ConfigData.texturesNamber[color][i1[color]] = i2;						++i1[color];						t = t1;					}					PFLM_ConfigData.maxTexturesNamber[color] = i1[color];				}				if (ModchuModel_Main.getTextureBoxHasArmor(ltb)) {					PFLM_ConfigData.texturesArmorNamber[i3] = i2;					++i3;				}			}		}		PFLM_ConfigData.maxTexturesArmorNamber = i3;	}/*	public static void texturesArmorNamberInit() {		//モデルリスト用テクスチャーアーマーパックナンバー作成		if (texturesArmorNamberInitFlag) return;		texturesArmorNamberInitFlag = true;		List textures = ModchuModel_Main.getTextureManagerTextures();		texturesArmorNamber = new int[textures.size()];		int i3 = 0;		Object ltb;		for (int i2 = 0 ; i2 < textures.size() ; ++i2) {			texturesArmorNamber[i3] = -1;			ltb = textures.get(i2);			if (ltb != null) {				if (ModchuModel_Main.getTextureBoxHasArmor(ltb)) {					texturesArmorNamber[i3] = i2;					++i3;				}			}		}		maxTexturesArmorNamber = i3;	} */	public static int optiNameCheck(String s, int j) {		int i = j;		String s1 = "HD_MT_AA";		if (s.indexOf(s1) != -1) {			Modchu_Debug.lDebug(s + " Check ok.");			i = 3;			getIconWidthTerrain = 0;		} else {			s1 = "HD_U";			if (s.indexOf(s1) != -1) {				/*125//*/optiVersionName = "HD_U ";				Modchu_Debug.lDebug(s + " Check ok.");				i = 3;			} else {				s1 = "HD";				/*125//*/optiVersionName = "HD ";				if (s.indexOf(s1) != -1) {					Modchu_Debug.lDebug(s + " Check ok.");					i = 4;				} else {					Modchu_Debug.lDebug("No OptiFine.Name Chenk error.Name="+s);				}			}		}		return i;	}	private static void startVersionCheckThread() {		PFLM_ThreadVersionCheck var0 = new PFLM_ThreadVersionCheck();		var0.start();	}	public static boolean checkRelease(String s) {		if (s != null) {			if (s.length() > 1) {				String ck = s.substring(s.length() - 1);				String mck = pflm_main.getVersion();				String k = version;				mck = k.substring(k.length() - 1);				if (Modchu_Main.integerCheck(mck)) mck = "";				boolean check = Modchu_Main.integerCheck(k);				while(!check						&& k.length() > 1){					//Modchu_Debug.mDebug("checkRelease k="+k);					check = Modchu_Main.integerCheck(k.substring(0, k.length() - 1));					k = k.substring(0, k.length() - 1);				}				int m = Integer.valueOf(k);				//Modchu_Debug.mDebug("checkRelease m="+m+" mck="+mck);				if (Modchu_Main.integerCheck(ck)) ck = "";				check = Modchu_Main.integerCheck(s);				while(!check						&& s.length() > 1){					//Modchu_Debug.mDebug("checkRelease s="+s);					check = Modchu_Main.integerCheck(s.substring(0, s.length() - 1));					s = s.substring(0, s.length() - 1);				}				int i = Integer.valueOf(s);				Modchu_Debug.mDebug("m="+m+" mck="+mck+" i="+i+" ck="+ck);				if (i > m) {					return true;				}				if (i == m						&& ck.compareTo(mck) > 0) {					return true;				}				return false;			}		}		return false;	}	public static void setNewRelease(String s) {		newRelease = true;		newVersion = s;	}	public static boolean isPFLMModelsKeyDown() {		return Keyboard.isKeyDown(PFLMModelsKeyCode);	}	public static int getTextureListModelIndexOf(String s) {		Modchu_Debug.mDebug("getTextureListModelIndexOf s=" + s);		if (s != null) ;else return -1;		String s1 = null;		s = Modchu_Main.lastIndexProcessing(s, "_");		for(int i = 0; i < textureList.size(); i++) {			s1 = Modchu_Main.lastIndexProcessing(textureList.get(i), "_");			if (s1.equalsIgnoreCase(s)) {				return i;			}		}		return -1;	}}