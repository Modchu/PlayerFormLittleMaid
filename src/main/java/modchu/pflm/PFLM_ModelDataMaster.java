package modchu.pflm;import java.awt.Color;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.net.URL;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;import java.util.Random;import javax.imageio.ImageIO;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_EntityCapsHelper;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.Modchu_RenderEngine;import modchu.lib.characteristic.Modchu_AS;import modchu.lib.characteristic.Modchu_CastHelper;import modchu.lib.characteristic.Modchu_EntityPlayerDummy;import modchu.lib.characteristic.Modchu_IEntityCapsBase;import modchu.lib.characteristic.Modchu_ModelBaseDuoBase;import modchu.lib.characteristic.Modchu_ModelBaseSoloBase;import modchu.model.ModchuModel_Main;import modchu.model.ModchuModel_ModelDataBase;import modchu.model.ModchuModel_ModelDataMaster;import modchu.model.multimodel.base.MultiModel;import modchu.model.multimodel.base.MultiModelBaseBiped;public class PFLM_ModelDataMaster extends ModchuModel_ModelDataMaster {	public boolean initResetFlag = false;	public static final int skinMode_online										= 0;	public static final int skinMode_local 										= 1;	public static final int skinMode_offline 									= 3;	public static final int skinMode_Player										= 4;	public static final int skinMode_OthersSettingOffline 				= 5;	public static final int skinMode_PlayerOffline 							= 6;	public static final int skinMode_PlayerOnline 							= 7;	public static final int skinMode_PlayerLocalData						= 8;	public static final int skinMode_Random 									= 9;	public static final int skinMode_OthersIndividualSettingOffline 	= 10;	public Random rnd = new Random();	public Object steveTexture;	private int steveTextureWidth;	private int steveTextureHeight;	public boolean sendIDAllFlag = true;	public PFLM_ModelDataMaster() {		instance = this;		steveTexture = Modchu_Main.getMinecraftVersion() > 159 ? Modchu_Reflect.newInstance("ResourceLocation", new Class[]{ String.class }, new Object[]{ "textures/entity/steve.png" }) : "/mob/char.png";		File url;		BufferedImage bufferedimage = null;		if (Modchu_Main.getMinecraftVersion() > 159) {			Object textureManager = Modchu_AS.get(Modchu_AS.minecraftTextureManager);			Modchu_AS.set(Modchu_AS.textureManagerBindTexture, textureManager, steveTexture);		}		//Object texture = Modchu_AS.get(Modchu_AS.textureManagerGetTexture, textureManager, steveTexture);		Object iresource = Modchu_AS.get(Modchu_AS.resourceManagerGetResource, steveTexture);		InputStream inputstream = null;		if (iresource != null) {			inputstream = Modchu_AS.getInputStream(Modchu_AS.resourceGetInputStream, iresource);			if (inputstream != null) {				try {					bufferedimage = ImageIO.read(inputstream);				} catch (IOException e) {					e.printStackTrace();				}			}		}		steveTextureWidth = bufferedimage != null ? bufferedimage.getWidth() : 64;		steveTextureHeight = bufferedimage != null ? bufferedimage.getHeight() : 32;	}	@Override	public ModchuModel_ModelDataBase getPlayerData(Object entity) {		if (entityCheck(entity)); else return super.getPlayerData(entity);		if (entity != null); else {			Modchu_Debug.lDebug("PFLM_ModelDataMaster getPlayerData entity == null !! return.");			return null;		}		ModchuModel_ModelDataBase data = super.getPlayerData(entity);		if (data != null); else return null;		if (data.getCapsValueBoolean(data.caps_isPlayer)) {			entity = Modchu_Reflect.invokeMethod(data.getClass(), "getCapsValue", new Class[]{ int.class, Object[].class }, data, new Object[]{ Modchu_IEntityCapsBase.caps_Entity, null });			if (entity != null) {				Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);				if (!thePlayer.equals(entity)) Modchu_Reflect.setFieldObject(ModchuModel_ModelDataBase.class, "owner", data, thePlayer);			}		}		return data;	}	@Override	public ModchuModel_ModelDataBase newPlayerData(Object entity) {		if (!loadCheck()				| !entityCheck(entity)) return null;		PFLM_ModelData modelData = (PFLM_ModelData) newPlayerDataDefaultSetting(entity, new PFLM_ModelData());		return newPlayerData(entity, modelData);	}	@Override	public ModchuModel_ModelDataBase newPlayerData(Object entity, ModchuModel_ModelDataBase data) {		//Modchu_Debug.mDebug("PFLM_ModelDataMaster newPlayerData entity="+entity);		if (entity != null				&& loadCheck()); else return null;		if (!entityCheck(entity)				| (!entityPlayerCheck(entity)						&& !entityPlayerDummyCheck(entity))) {			return super.newPlayerData(entity, !(data instanceof PFLM_ModelData) ? data : null);		}		PFLM_ModelData modelData = null;		if (data != null && !(data instanceof PFLM_ModelData)) return null;		modelData = (PFLM_ModelData) data;		if (modelData != null); else modelData = (PFLM_ModelData) newPlayerDataDefaultSetting(entity, new PFLM_ModelData());		Modchu_Debug.lDebug("PFLM_ModelDataMaster newPlayerData start --------");		boolean isPlayer = isPlayerCheck(modelData, entity);		if (!isPlayer) {			// OtherPlayer			if (otherPlayerLoadPlayerData(entity, modelData)) {				Modchu_Debug.lDebug("PFLM_ModelDataMaster newPlayerData otherPlayer end. --------");				return checkModelData(modelData);			}		} else {			Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);			if (sendIDAllFlag) {				PFLM_PacketPlayerStateManager.addSendList(PFLM_Main.getPFLMFPacketConstant("packet_IDAll"), modelData, thePlayer);				sendIDAllFlag = false;			}			modelData.setCapsValue(modelData.caps_dominantArm, playerHandednessSetting());			PFLM_PacketPlayerStateManager.addSendList((byte) 0, modelData, thePlayer);			// Player Skin Random Mode			if (PFLM_ConfigData.changeMode == PFLM_GuiConstant.modeRandom) {				Modchu_Debug.lDebug("PFLM_ModelDataMaster newPlayerData Random end. --------");				return newPlayerDataRandom(entity, modelData);			}		}		// Player Skin Offline Mode		if ((isPlayer				&& PFLM_ConfigData.changeMode == PFLM_GuiConstant.modeOffline)				| (isSkinModeOffline(modelData.getCapsValueInt(modelData.caps_skinMode))				&& !(isPlayer				&& PFLM_ConfigData.changeMode == PFLM_GuiConstant.modeOnline))) {			Modchu_Debug.lDebug("PFLM_ModelDataMaster newPlayerData Offline end. --------");			return newPlayerDataOffline(entity, modelData);		}		if ((isPlayer				&& PFLM_ConfigData.changeMode == PFLM_GuiConstant.modeOnline)			| isSkinModeOnline(modelData.getCapsValueInt(modelData.caps_skinMode))) {			// OtherPlayer and Player Skin Online Mode			modelData = (PFLM_ModelData) newPlayerDataOnline(entity, modelData);		}		Modchu_Debug.lDebug("PFLM_ModelDataMaster newPlayerData Online end. --------");		return checkModelData(modelData);	}	private ModchuModel_ModelDataBase newPlayerDataOnline(Object entity, PFLM_ModelData modelData) {		String userName = getUserName(modelData, entity);		String debugS = userName+" : "+"newPlayerDataOnline";		Modchu_Debug.lDebug(debugS);		BufferedImage bufferedimage = getOnlineSkin(modelData, entity);		//Modchu_Debug.mDebug("newPlayerDataOnline 1");		modelData.setCapsValue(modelData.caps_initFlag, 2);		Modchu_Debug.mDebug("newPlayerDataOnline bufferedimage="+bufferedimage);		boolean isPlayer = isPlayerCheck(modelData, entity);		if (bufferedimage != null) {			//Modchu_Debug.mlDebug(""+entity.userName+" : "+"OnlineMode bufferedimage != null ?"+(bufferedimage != null));			textureBipedDefaultSetting(modelData, bufferedimage.getWidth() == bufferedimage.getHeight());			if (isPlayer) {				if (PFLM_ConfigData.changeMode == PFLM_GuiConstant.modeOnline) {					modelData.setCapsValue(modelData.caps_skinMode, skinMode_online);					Modchu_Debug.lDebug(debugS+"newPlayerDataOnline bufferedimage != null isPlayer skinMode_online set.");				}				if (!userName.startsWith("Player")						&& !userName.startsWith("User_")						&& modelData.getCapsValueInt(modelData.caps_initFlag) == 0						&& !initResetFlag) {					modelData.setCapsValue(modelData.caps_initFlag, 1);					modelData.setCapsValue(modelData.caps_freeVariable, "skinChar", true);					initResetFlag = true;					resetFlag = true;					Modchu_Debug.lDebug(debugS + "caps_initFlag return");					return modelData;				}			} else {				modelData.setCapsValue(modelData.caps_initFlag, 2);			}			modelData.setCapsValue(modelData.caps_freeVariable, "skinChar", false);			Modchu_Debug.mDebug("newPlayerDataOnline 2 set bufferedimage != null skinChar false");		} else {			Modchu_Debug.lDebug(debugS + "bufferedimage == null");			if (isPlayer) Modchu_Debug.lDebug(debugS + "GuichangeMode="+PFLM_GuiConstant.getChangeModeString(PFLM_ConfigData.changeMode));			//Modchu_Debug.mDebug(""+entity.userName+" : "+"er entity.skinUrl = "+entity.skinUrl);			int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);			Modchu_Debug.lDebug(debugS + "skinMode="+getSkinModeString(skinMode));			if (isPlayer) {				if (skinMode == skinMode_PlayerOnline						| skinMode == skinMode_online) {					modelData.setCapsValue(modelData.caps_freeVariable, "skinChar", true);					Modchu_Debug.lDebug(debugS + "isPlayer skinMode_char set 3");				} else {					Modchu_Debug.lDebug(debugS + "isPlayer skinMode_char no set");				}			} else {				if (skinMode == skinMode_Player) {					PFLM_ModelData modelData2 = (PFLM_ModelData) getPlayerData(Modchu_AS.get(Modchu_AS.minecraftThePlayer));					if (modelData2 != null) {						if (modelData2.getCapsValueBoolean(modelData.caps_freeVariable, "skinChar")) {							modelData2.setCapsValue(modelData.caps_freeVariable, "skinChar", true);							Modchu_Debug.lDebug(debugS + "!isPlayer skinMode_char set 4");						}					}				} else if (skinMode == skinMode_PlayerOnline						| skinMode == skinMode_online) {					modelData.setCapsValue(modelData.caps_freeVariable, "skinChar", true);					Modchu_Debug.lDebug(debugS + "!isPlayer skinMode_char set 5");				} else {					Modchu_Debug.lDebug(debugS + "!isPlayer skinMode_char no set");				}			}			if (modelData.getCapsValueBoolean(modelData.caps_freeVariable, "skinChar")) {				textureBipedDefaultSetting(modelData, getNewOnlineSkinFlag(modelData));				modelInit(entity, modelData, Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureName)));				modelArmorInit(entity, modelData, Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureArmorName)));				modelData.setCapsValue(modelData.caps_initFlag, 2);				return checkModelData(modelData);			}		}		Modchu_Debug.lDebug(debugS + "skinMode="+getSkinModeString(modelData.getCapsValueInt(modelData.caps_skinMode)));		return checkSkin(entity, bufferedimage, modelData);	}	private ModchuModel_ModelDataBase newPlayerDataOffline(Object entity, PFLM_ModelData modelData) {		String userName = getUserName(modelData, entity);		Modchu_Debug.lDebug(""+userName+" : "+"checkSkin skinMode_offline");		if (PFLM_ConfigData.textureName.equals("_Biped")) {			PFLM_ConfigData.textureName = PFLM_ConfigData.textureArmorName = "default";		}		modelData.setCapsValue(modelData.caps_maidColor, PFLM_ConfigData.maidColor);		modelData.setCapsValue(modelData.caps_skinMode, skinMode_offline);		modelData.setCapsValue(modelData.caps_textureName, PFLM_ConfigData.textureName);		modelData.setCapsValue(modelData.caps_textureArmorName, PFLM_ConfigData.textureArmorName);		modelInit(entity, modelData, Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureName)));		modelArmorInit(entity, modelData, Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureArmorName)));		modelData.setCapsValue(modelData.caps_freeVariable, "skinChar", false);		modelData.setCapsValue(modelData.caps_initFlag, 2);		return checkModelData(modelData);	}	private ModchuModel_ModelDataBase newPlayerDataRandom(Object entity, PFLM_ModelData modelData) {		String userName = getUserName(modelData, entity);		Modchu_Debug.lDebug(""+userName + " : "+"newPlayerData Player Random setting.");		skinMode_RandomSetting(entity, modelData);		modelData.setCapsValue(modelData.caps_freeVariable, "skinChar", false);		modelData.setCapsValue(modelData.caps_initFlag, 2);		return checkModelData(modelData);	}	private boolean otherPlayerLoadPlayerData(Object entity, PFLM_ModelData modelData) {		String userName = getUserName(modelData, entity);		String t[] = Modchu_CastHelper.StringArray(PFLM_Main.playerLocalData.get(userName));		PFLM_ModelData modelData2;		if (t != null) {			int skinMode = Modchu_CastHelper.Int(t[4]);			switch (skinMode) {			case PFLM_GuiConstant.modePlayer:				Modchu_Debug.lDebug(""+userName + " : "+"otherPlayerLoadPlayerData Individual modePlayer");				skinMode_PlayerSetting(entity, modelData);				break;			case PFLM_GuiConstant.modeOffline:				Modchu_Debug.lDebug(""+userName + " : "+"otherPlayerLoadPlayerData Individual modeOthersSettingOffline");				modelData.setCapsValue(modelData.caps_skinMode, skinMode_OthersIndividualSettingOffline);				String s2 = t[0];				modelData.setCapsValue(modelData.caps_maidColor, Modchu_CastHelper.Int(t[2]));				setResourceLocation(modelData, entity, 0, ModchuModel_Main.textureManagerGetTexture(s2, modelData.getCapsValueInt(modelData.caps_maidColor)));				setResourceLocation(modelData, entity, 0, ModchuModel_Main.textureManagerGetTexture(s2, modelData.getCapsValueInt(modelData.caps_maidColor)));				modelInit(entity, modelData, s2);				s2 = t[1];				modelData.setCapsValue(modelData.caps_textureName, s2);				modelData.setCapsValue(modelData.caps_textureArmorName, t[1]);				modelArmorInit(entity, modelData, s2);				modelData.setCapsValue(modelData.caps_dominantArm, Modchu_Main.integerCheck(t[5]) ? othersPlayerIndividualHandednessSetting(Modchu_CastHelper.Int(t[5])) : 0);				modelData.setCapsValue(modelData.caps_modelScale, Modchu_Main.floatCheck(t[3]) ? Modchu_CastHelper.Float(t[3]) : 0.0F);				break;			case PFLM_GuiConstant.modePlayerOffline:				Modchu_Debug.lDebug(""+userName + " : "+"otherPlayerLoadPlayerData Individual modePlayerOffline");				skinMode_PlayerOfflineSetting(entity, modelData);				break;			case PFLM_GuiConstant.modePlayerOnline:				Modchu_Debug.lDebug(""+userName + " : "+"otherPlayerLoadPlayerData Individual modePlayerOnline");				skinMode_PlayerOnlineSetting(entity, modelData);				break;			case PFLM_GuiConstant.modeRandom:				Modchu_Debug.lDebug(""+userName + " : "+"otherPlayerLoadPlayerData Individual modeRandom");				skinMode_RandomSetting(entity, modelData);				modelData.setCapsValue(modelData.caps_dominantArm, Modchu_Main.integerCheck(t[5]) ? othersPlayerIndividualHandednessSetting(Modchu_CastHelper.Int(t[5])) : 0);				modelData.setCapsValue(modelData.caps_modelScale, Modchu_CastHelper.Float(t[3]));				break;			case PFLM_GuiConstant.modeOnline:				Modchu_Debug.lDebug(""+userName + " : "+"otherPlayerLoadPlayerData Individual modefalse");				skinMode_FalseSetting(entity, modelData);				break;			}			modelData.setCapsValue(modelData.caps_initFlag, 2);			if (skinMode != skinMode_PlayerOnline					&& skinMode != skinMode_online					&& !(skinMode == skinMode_Player					&& PFLM_ConfigData.changeMode == PFLM_GuiConstant.modeOnline)) {				Modchu_Debug.lDebug(""+userName + " : "+"otherPlayerLoadPlayerData Individual !Player skinMode != Online return. skinMode="+(getSkinModeString(skinMode)));				return true;			}		} else {			switch (PFLM_ConfigData.othersChangeMode) {			case PFLM_GuiConstant.modePlayer:				Modchu_Debug.lDebug(""+userName + " : "+"otherPlayerLoadPlayerData OthersSetting modePlayer");				skinMode_PlayerSetting(entity, modelData);				break;			case PFLM_GuiConstant.modeOffline:				Modchu_Debug.lDebug(""+userName + " : "+"otherPlayerLoadPlayerData OthersSetting modeOthersSettingOffline");				modelData.setCapsValue(modelData.caps_skinMode, skinMode_OthersSettingOffline);				String s = PFLM_ConfigData.othersTextureName;				modelData.setCapsValue(modelData.caps_maidColor, PFLM_ConfigData.othersMaidColor);				modelInit(entity, modelData, s);				s = PFLM_ConfigData.othersTextureArmorName;				modelData.setCapsValue(modelData.caps_textureName, PFLM_ConfigData.othersTextureName);				modelData.setCapsValue(modelData.caps_textureArmorName, PFLM_ConfigData.othersTextureArmorName);				modelArmorInit(entity, modelData, s);				modelData.setCapsValue(modelData.caps_dominantArm, othersPlayerHandednessSetting());				modelData.setCapsValue(modelData.caps_modelScale, PFLM_ConfigData.othersModelScale);				//Modchu_Debug.mDebug(""+entityplayer.userName+" : "+"modelData handedness="+modelData.getCapsValueInt(modelData.caps_dominantArm));				break;			case PFLM_GuiConstant.modePlayerOffline:				Modchu_Debug.lDebug(""+userName + " : "+"otherPlayerLoadPlayerData OthersSetting modePlayerOffline");				skinMode_PlayerOfflineSetting(entity, modelData);				break;			case PFLM_GuiConstant.modePlayerOnline:				Modchu_Debug.lDebug(""+userName + " : "+"otherPlayerLoadPlayerData OthersSetting modePlayerOnline");				skinMode_PlayerOnlineSetting(entity, modelData);				break;			case PFLM_GuiConstant.modeRandom:				Modchu_Debug.lDebug(""+userName + " : "+"otherPlayerLoadPlayerData OthersSetting modeRandom");				skinMode_RandomSetting(entity, modelData);				modelData.setCapsValue(modelData.caps_dominantArm, othersPlayerHandednessSetting());				modelData.setCapsValue(modelData.caps_modelScale, PFLM_ConfigData.othersModelScale);				break;			case PFLM_GuiConstant.modeOnline:				Modchu_Debug.lDebug(""+userName + " : "+"otherPlayerLoadPlayerData OthersSetting modefalse");				skinMode_FalseSetting(entity, modelData);				break;			}			int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);			if (skinMode != skinMode_PlayerOnline					&& skinMode != skinMode_online					&& !(skinMode == skinMode_Player					&& PFLM_ConfigData.changeMode == PFLM_GuiConstant.modeOnline)) {				modelData.setCapsValue(modelData.caps_initFlag, 2);				Modchu_Debug.lDebug(""+userName + " : "+"otherPlayerLoadPlayerData !Player skinMode != Online return. skinMode="+(getSkinModeString(skinMode))+" PFLM_ConfigData.othersChangeMode="+PFLM_ConfigData.othersChangeMode);				return true;			}		}		return false;	}	@Override	public ModchuModel_ModelDataBase newPlayerDataDefaultSetting(Object entity, ModchuModel_ModelDataBase data) {		super.newPlayerDataDefaultSetting(entity, data);		if (!(data instanceof PFLM_ModelData)) return data;		data.setCapsValue(data.caps_skinMode, skinMode_offline);		data.setCapsValue(data.caps_EntityType, data.entityType_PFLM);		data.setCapsValue(data.caps_freeVariable, "skinChar", false);		Modchu_Debug.mDebug("newPlayerData 1 set skinChar false");		if (entityPlayerCheck(entity)) data.setCapsValue(data.caps_freeVariable, "showArmor", true);		Modchu_Reflect.setFieldObject(ModchuModel_ModelDataBase.class, "owner", data, entity);		((PFLM_ModelData) data).modelMain.setEntityCaps(data);		String userName = getUserName((PFLM_ModelData) data, entity);		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);		if (thePlayer != null); else return data;		data.setCapsValue(data.caps_isPlayer, userName != null ? userName == getUserName((PFLM_ModelData) data, thePlayer) : false);		data.setCapsValue(data.caps_tempLimbSwing, Modchu_AS.getFloat(Modchu_AS.entityLivingBaseLimbSwing, entity));		return data;	}	private boolean loadCheck() {		return Modchu_Main.initModsLoaded &&				PFLM_Main.initModsLoaded;	}	public BufferedImage getOnlineSkin(PFLM_ModelData modelData, Object entity) {		if (modelData != null); else return null;		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);;		BufferedImage bufferedimage = null;		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		boolean isPlayer = isPlayerCheck(modelData, entity);		String userName = getUserName(modelData, entity);		if ((isPlayer				&& PFLM_ConfigData.changeMode == PFLM_GuiConstant.modeOnline)				| (!isPlayer						&& (skinMode == skinMode_online						| skinMode == skinMode_PlayerOnline						| (skinMode == skinMode_Player						&& PFLM_ConfigData.changeMode == PFLM_GuiConstant.modeOnline)))) {			if (skinMode == skinMode_offline) modelData.setCapsValue(modelData.caps_skinMode, skinMode_online);			Modchu_Debug.lDebug(""+userName + " : "+"new model read userName = "+userName);			String skinUrl = getSkinUrl(modelData, entity);			Modchu_Debug.mlDebug(""+userName + " : "+"getOnlineSkin OnlineMode skinUrl="+skinUrl);			if (skinUrl != null					&& !skinUrl.isEmpty()) {				try {					URL url = new URL(skinUrl);					bufferedimage = ImageIO.read(url);					Modchu_Debug.mlDebug(""+userName + " : "+"getOnlineSkin OnlineMode.image ok.");				} catch (IOException ioexception) {					StringBuilder s1 = (new StringBuilder()).append("Failed to read a player texture from a URL for ").append(skinUrl);					Modchu_Debug.lDebug(s1.toString());					if (ioexception != null) {						Modchu_Debug.mlDebug("");						Modchu_Debug.mlDebug(ioexception.getMessage());					}				}			} else {				Modchu_Debug.lDebug(""+userName + " : "+"getOnlineSkin OnlineMode skinUrl == null !!");				Modchu_Debug.lDebug(""+userName + " : "+"getOnlineSkin skinMode="+getSkinModeString(skinMode));			}		} else {			Modchu_Debug.lDebug(""+userName + " : "+"getOnlineSkin else isPlayer="+isPlayer);			if (isPlayer) Modchu_Debug.lDebug(""+userName + " : "+"getOnlineSkin else PFLM_ConfigData.changeMode="+PFLM_ConfigData.changeMode);			Modchu_Debug.lDebug(""+userName + " : "+"getOnlineSkin else skinMode="+getSkinModeString(skinMode));		}		return bufferedimage;	}	public String getSkinUrl(PFLM_ModelData modelData, Object entity) {		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		Modchu_Debug.mDebug("getSkinUrl skinMode="+(getSkinModeString(skinMode)));		if (skinMode == skinMode_online				| skinMode == skinMode_PlayerOnline				| (skinMode == skinMode_Player				&& PFLM_ConfigData.changeMode == PFLM_GuiConstant.modeOnline));		else return null;		Class AbstractClientPlayer = Modchu_Reflect.loadClass("AbstractClientPlayer");		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);		String userName = getUserName(modelData, entity);		if (userName != null				 && !userName.isEmpty()); else return null;		return Modchu_CastHelper.String(Modchu_Main.getMinecraftVersion() < 179				&& Modchu_Main.getMinecraftVersion() > 159 ? Modchu_Reflect.invokeMethod(AbstractClientPlayer, "func_110300_d", "getSkinUrl", new Class[]{ String.class }, entity, new Object[]{ userName }) :					(new StringBuilder()).append("http://skins.minecraft.net/MinecraftSkins/").append(userName).append(".png").toString());	}	public String getUserName(Object entity) {		PFLM_ModelData modelData = (PFLM_ModelData) getPlayerData(entity);		return getUserName(modelData, entity);	}	public String getUserName(PFLM_ModelData modelData, Object entity) {		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);		String userName = Modchu_AS.getString(Modchu_AS.userName, entityPlayerCheck(entity) ? entity : thePlayer);		if (Modchu_Debug.debugPlayerName != null) {			userName = isPlayerCheck(modelData, entity) ? Modchu_Debug.debugPlayerName : skinMode == skinMode_PlayerOnline					| (skinMode == skinMode_Player					&& PFLM_ConfigData.changeMode == PFLM_GuiConstant.modeOnline) ? Modchu_Debug.debugPlayerName : userName;		} else {			userName = skinMode == skinMode_PlayerOnline					| (skinMode == skinMode_Player					&& PFLM_ConfigData.changeMode == PFLM_GuiConstant.modeOnline) ? Modchu_AS.getString(Modchu_AS.userName, thePlayer) : userName;		}		return userName;	}	public void modelInit(Object entity, String s) {		PFLM_ModelData modelData = (PFLM_ModelData) getPlayerData(entity);		modelInit(entity, modelData, s, false);	}	public void modelInit(Object entity, PFLM_ModelData modelData, String s) {		modelInit(entity, modelData, s, false);	}	public void modelInit(Object entity, PFLM_ModelData modelData, String s, boolean debug) {		if (debug) {			Modchu_Debug.mDebug("modelInit 1 s="+s);			Modchu_Debug.mDebug("modelInit 1 entity="+entity);		}		if (modelData != null				&& entity != null); else {			if (modelData != null); else Modchu_Debug.lDebug("modelInit modelData == null !!");			if (entity != null); else Modchu_Debug.lDebug("modelInit entity == null !!");			return;		}		Object[] option = null;		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		if (isSkinModeOnline(skinMode)) {			boolean newOnlineSkinFlag = getNewOnlineSkinFlag(modelData);			s = newOnlineSkinFlag ? "_Player" : "_Biped";			if (newOnlineSkinFlag) {				option = new Object[]{ getSlimFlag(entity) };			}		}		else if (s == null				| (s != null				&& s.isEmpty())				| (ModchuModel_Main.checkTexturePackege(s, modelData.getCapsValueInt(modelData.caps_maidColor)) == null)				&& (!isSkinModeOnline(skinMode)				&& !isSkinModePlayer(skinMode))) {			if (debug) Modchu_Debug.lDebug("modelInit textureNameDefaultSetting s="+s + " skinMode="+getSkinModeString(skinMode));			s = textureNameDefaultSetting(modelData, entity);		}		if (s == null				| (s != null				&& s.isEmpty())) {			if (!entityPlayerCheck(entity)) {				s = "default";				if (debug) Modchu_Debug.lDebug("modelInit s == null !! !entityPlayerCheck default");			}			else throw new RuntimeException("PFLM_RenderPlayerMaster textureName null error !!");		}		Object[] models = ModchuModel_Main.modelNewInstance(entity, s, false, true, option, debug);		if (debug) {			Modchu_Debug.mlDebug("modelInit 2 s="+s);			Modchu_Debug.mlDebug("modelInit 2 skinMode="+getSkinModeString(skinMode));		}		if (models != null				&& models[0] instanceof MultiModelBaseBiped) {			if (debug) Modchu_Debug.lDebug("modelInit models[0] != null ? "+(models[0] != null));		} else {			Modchu_Debug.systemLogDebug("modelInit models[0] !MultiModelBaseBiped !!", 2, null);			if (isPlayerCheck(modelData, entity)					&& PFLM_ConfigData.textureName.indexOf("_") > -1) {				if (debug) Modchu_Debug.lDebug("modelInit !MultiModelBaseBiped default setting.");				PFLM_ConfigData.textureName = "default";			}			if (Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureName)).indexOf("_") > -1) modelData.setCapsValue(modelData.caps_textureName, "default");			models = ModchuModel_Main.modelNewInstance(entity, Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureName)), false, true, option);			if (models != null); else {				if (debug) {					Modchu_Debug.lDebug("modelInit 2 default setting.");					Modchu_Debug.lDebug("modelInit 2 models = null !! textureName="+modelData.getCapsValue(modelData.caps_textureName));				}				if (isPlayerCheck(modelData, entity)) {					PFLM_ConfigData.textureName = "default";				}				modelData.setCapsValue(modelData.caps_textureName, "default");				models = ModchuModel_Main.modelNewInstance(entity, (Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureName))), false, true, option);				if (models != null) ;				else if (debug) Modchu_Debug.lDebug("modelInit 3 models = null !! textureName="+modelData.getCapsValue(modelData.caps_textureName));			}		}		Object o = models != null				&& models[0] != null ? models[0] : new MultiModel(0.0F);		if (o != null); else {			Modchu_Debug.systemLogDebug("modelInit set Model == null !!", 2, null);			throw new RuntimeException("modelInit set Model == null !!");		}		Modchu_Reflect.setFieldObject(Modchu_ModelBaseSoloBase.class, "model", modelData.modelMain, o);		boolean b = modelData.setCapsValue(modelData.caps_Entity, entity);		//Modchu_Debug.mlDebug("modelInit caps_Entity b="+b);		modelTextureReset(entity, modelData, s);		if (debug) {			if (models != null && models[0] != null) Modchu_Debug.lDebug("modelInit models[0]="+models[0]);			Modchu_Debug.lDebug("modelInit s="+s);			Modchu_Debug.lDebug("modelInit textureName="+modelData.getCapsValue(modelData.caps_textureName));			Modchu_Debug.lDebug("modelInit color="+modelData.getCapsValueInt(modelData.caps_maidColor));		}		modelData.setCapsValue(modelData.caps_changeModelFlag, true);		//Modchu_Debug.mlDebug("modelInit end.s="+s);	}	public boolean isPlayerCheck(PFLM_ModelData modelData, Object entity) {		return modelData.getCapsValueBoolean(modelData.caps_isPlayer)				| !entityPlayerCheck(entity);	}	public void modelArmorInit(Object entity, String s) {		PFLM_ModelData modelData = (PFLM_ModelData) getPlayerData(entity);		modelArmorInit(entity, modelData, s, false);	}	public void modelArmorInit(Object entity, String s, boolean debug) {		PFLM_ModelData modelData = (PFLM_ModelData) getPlayerData(entity);		modelArmorInit(entity, modelData, s, debug);	}	public void modelArmorInit(Object entity, PFLM_ModelData modelData, String s) {		modelArmorInit(entity, modelData, s, false);	}	public void modelArmorInit(Object entity, PFLM_ModelData modelData, String s, boolean debug) {		if (modelData != null); else return;		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		boolean isBiped = false;		if (s.equals("NULL")) {			Modchu_Reflect.setFieldObject(Modchu_ModelBaseDuoBase.class, "modelInner", modelData.modelFATT, null);			Modchu_Reflect.setFieldObject(Modchu_ModelBaseDuoBase.class, "modelOuter", modelData.modelFATT, null);			return;		}		if (modelData.modelMain != null				&& modelData.modelMain.model != null) {			isBiped = PFLM_Main.bipedCheck(modelData.modelMain.model);		}		if (!isBiped) s = ModchuModel_Main.textureNameCheck(s);		if (skinMode == skinMode_online				| skinMode == skinMode_PlayerOnline) {			s = getNewOnlineSkinFlag(modelData) ? "_Player" : "_Biped";		}		else if (isBiped				&& (s == null				| (s != null				&& s.isEmpty())				| s.equalsIgnoreCase("default")				| s.equalsIgnoreCase("erasearmor"))) {			s = "_Biped";		} else if (s == null				| (s != null && s.isEmpty())				| (ModchuModel_Main.checkTextureArmorPackege(s) == null)				&& (skinMode != skinMode_online				&& skinMode != skinMode_PlayerOnline				&& skinMode != skinMode_Player)) {			//if (debug) Modchu_Debug.mDebug("PFLM_ModelDataMaster textureArmorName null "+entityplayer.userName+" : "+"modelArmorInit s="+s+" modelData.getCapsValueInt(modelData.caps_skinMode)="+modelData.getCapsValueInt(modelData.caps_skinMode));			s = textureArmorNameDefaultSetting(modelData, entity);		}		if (s == null				| (s != null				&& s.isEmpty())) {			if (!entityPlayerCheck(entity)) s = "default";			else throw new RuntimeException("PFLM_ModelDataMaster textureArmorName null error !!");		}		Object[] option = null;		Object[] models = ModchuModel_Main.modelNewInstance(entity, s, false, true, option, debug);		if (models != null); else {			if (isPlayerCheck(modelData, entity)) PFLM_ConfigData.textureArmorName = "default";			modelData.setCapsValue(modelData.caps_textureArmorName, "default");			models = ModchuModel_Main.modelNewInstance(entity, PFLM_ConfigData.textureArmorName, true, true, option);		}		float[] f1 = ModchuModel_Main.getArmorModelsSize(models[0]);		if (debug) Modchu_Debug.mlDebug("modelArmorInit s="+s + " models[1] != null ? "+(models[1] != null));/*		if (models != null				&& models[1] != null); else {			models = ModchuModel_Main.modelNewInstance(isBiped ? "_Biped" : "default", false, option);			f1 = ModchuModel_Main.getArmorModelsSize(models[0]);		}		if (PFLM_Main.isSmartMoving) {		} else {			//Modchu_Debug.mDebug("PFLM_ModelDataMaster modelArmorInit isBiped="+isBiped);			if (models[1] != null); else models[1] = !isBiped ? new MultiModel(f1[0]) : getNewOnlineSkinFlag(modelData) ? new MultiModel_Player(f1[0], 0.0F, 64, 64, getSlimFlag(entity)) : new MultiModel_Biped(f1[0]);			if (models[2] != null); else models[2] = !isBiped ? new MultiModel(f1[1]) : getNewOnlineSkinFlag(modelData) ? new MultiModel_Player(f1[1], 0.0F, 64, 64, getSlimFlag(entity)) : new MultiModel_Biped(f1[1]);		}*/		Modchu_Reflect.setFieldObject(Modchu_ModelBaseDuoBase.class, "modelInner", modelData.modelFATT, models[1]);		Modchu_Reflect.setFieldObject(Modchu_ModelBaseDuoBase.class, "modelOuter", modelData.modelFATT, models[2]);		//modelTextureArmorReset(modelData, s);	}	public String textureNameDefaultSetting(PFLM_ModelData modelData, Object entity) {		String s = ModchuModel_Main.textureNameCheck(null);		if (isPlayerCheck(modelData, entity)				&& Modchu_AS.get(Modchu_AS.minecraftThePlayer) == entity) PFLM_ConfigData.textureName = s;		modelData.setCapsValue(modelData.caps_textureName, s);		return s;	}	public String textureArmorNameDefaultSetting(PFLM_ModelData modelData, Object entity) {		String s = ModchuModel_Main.textureNameCheck(null);		if (isPlayerCheck(modelData, entity)				&& Modchu_AS.get(Modchu_AS.minecraftThePlayer) == entity) PFLM_ConfigData.textureArmorName = s;		modelData.setCapsValue(modelData.caps_textureArmorName, s);		return s;	}	public void textureBipedDefaultSetting(PFLM_ModelData modelData) {		textureBipedDefaultSetting(modelData, false);	}	public void textureBipedDefaultSetting(PFLM_ModelData modelData, boolean b) {		String s = b ? "_Player" :"_Biped";		//if (isPlayerCheck(modelData, entity)) {		//PFLM_ConfigData.textureName = s;		//PFLM_ConfigData.textureArmorName = s;		//}		modelData.setCapsValue(modelData.caps_textureName, s);		modelData.setCapsValue(modelData.caps_textureArmorName, s);		Modchu_Debug.lDebug("textureBipedDefaultSetting textureName ="+Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureName)));	}	public void allModelTextureReset(Object entity) {		PFLM_ModelData modelData = (PFLM_ModelData) getPlayerData(entity);		allModelTextureReset(entity, modelData);	}	public void allModelTextureReset(Object entity, PFLM_ModelData modelData) {		modelTextureReset(entity, modelData);		//modelTextureArmorReset(modelData);	}	public void modelTextureReset(Object entity, PFLM_ModelData modelData) {		modelTextureReset(entity, modelData, Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureName)));	}	public void modelTextureReset(Object entity, PFLM_ModelData modelData, String s) {		//Modchu_Debug.mDebug("modelTextureReset s="+s+" entity="+entity);		Object o = null;		int version = Modchu_Main.getMinecraftVersion();		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		Class AbstractClientPlayer = Modchu_Reflect.loadClass("AbstractClientPlayer");		String userName = getUserName(modelData, entity);		if (skinMode == skinMode_online				&& !modelData.getCapsValueBoolean(modelData.caps_localFlag)) {			//Modchu_Debug.mDebug("modelTextureReset skinMode_online && localFlag return.");			return;		}		//Modchu_Debug.mDebug("modelTextureReset skinMode="+(getSkinModeString(skinMode)));		//Modchu_Debug.mDebug("modelTextureReset localFlag="+(modelData.getCapsValueBoolean(modelData.caps_localFlag)));		if (modelData.getCapsValueBoolean(modelData.caps_freeVariable, "skinChar")) {			o = steveTexture;		} else if (AbstractClientPlayer.isInstance(entity)				&& (version > 159						&& (isPlayerCheck(modelData, entity)								&& PFLM_ConfigData.changeMode == PFLM_GuiConstant.modeOnline)								&& skinMode != skinMode_local)								| (!isPlayerCheck(modelData, entity)										&& (skinMode == skinMode_online										| skinMode == skinMode_PlayerOnline										| (skinMode == skinMode_Player										&& PFLM_ConfigData.changeMode == PFLM_GuiConstant.modeOnline)))) {			Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);			o = Modchu_Reflect.invokeMethod(AbstractClientPlayer, "func_110311_f", "getLocationSkin", new Class[]{ String.class }, skinMode == skinMode_PlayerOnline					| skinMode == skinMode_Player ? thePlayer : entity, new Object[]{ userName });			if (!isPlayerCheck(modelData, entity)					&& (skinMode == skinMode_online					| skinMode == skinMode_PlayerOnline					| (skinMode == skinMode_Player					&& PFLM_ConfigData.changeMode == PFLM_GuiConstant.modeOnline))) {				o = Modchu_Reflect.invokeMethod(AbstractClientPlayer, "func_110306_p", "getLocationSkin", skinMode == skinMode_PlayerOnline						| skinMode == skinMode_Player ? thePlayer : entity);			}			//Modchu_Debug.lDebug(""+userName + " : "+"modelTextureReset o="+o + " skinMode="+getSkinModeString(skinMode));		} else {			o = ModchuModel_Main.textureManagerGetTexture(s, modelData.getCapsValueInt(modelData.caps_maidColor));			//Modchu_Debug.lDebug("modelTextureReset else o="+o);			//Modchu_Debug.lDebug("modelTextureReset else skinMode="+getSkinModeString(skinMode));			//Modchu_Debug.lDebug("modelTextureReset else entity.getClass()="+entity.getClass());			//Modchu_Debug.lDebug("modelTextureReset else s="+s+" maidColor="+modelData.getCapsValueInt(modelData.caps_maidColor));			//Modchu_Debug.mDebug(""+userName+" : "+"modelTextureReset entity == thePlayer ?"+(entity == thePlayer));		}		//Modchu_Debug.mDebug("modelTextureReset end o="+o);		setResourceLocation(modelData, entity, 0, o);	}	public int playerHandednessSetting() {		return PFLM_ConfigData.handednessMode == -1 ? rnd.nextInt(2) : PFLM_ConfigData.handednessMode;	}	public int othersPlayerHandednessSetting() {		return PFLM_ConfigData.othersHandednessMode == -1 ? rnd.nextInt(2) : PFLM_ConfigData.othersHandednessMode;	}	public int othersPlayerIndividualHandednessSetting(int i) {		return i == -1 ? rnd.nextInt(2) : i;	}	public PFLM_ModelData checkSkin(Object entity, BufferedImage bufferedimage, PFLM_ModelData modelData) {		String userName = Modchu_AS.getString(Modchu_AS.userName, entity);		if (bufferedimage == null) {			Modchu_Debug.lDebug(""+userName + " : "+"checkSkin bufferedimage == null");			String s = modelData.getCapsValueBoolean(modelData.caps_freeVariable, "skinChar")					&& getNewOnlineSkinFlag(modelData) ? "_Player" :"_Biped";			modelInit(entity, modelData, s);			modelArmorInit(entity, modelData, s);			modelData.setCapsValue(modelData.caps_initFlag, 2);			return checkModelData(modelData);		}		modelData.setCapsValue(modelData.caps_freeVariable, "bufferedimage", bufferedimage);		modelData.setCapsValue(modelData.caps_isActivated, true);		Object[] s = checkimage(bufferedimage);		boolean localflag = (Boolean) s[0];		boolean returnflag = (Boolean) s[5];		if (!returnflag) modelData.setCapsValue(modelData.caps_textureArmorName, Modchu_CastHelper.String(s[2]));		int maidcolor = (Integer) s[3];		//Object texture = s[1];		String textureName = Modchu_CastHelper.String(s[4]);		int handedness = (Integer) s[6];		float modelScale = (Float) s[7];		if (localflag) {			modelData.setCapsValue(modelData.caps_localFlag, true);			modelData.setCapsValue(modelData.caps_skinMode, skinMode_local);			Modchu_Debug.lDebug(""+userName + " : "+"localflag maidcolor = "+maidcolor);		} else {			localBindTextureSetting(modelData, bufferedimage, entity);		}		if (returnflag) {			Modchu_Debug.lDebug(""+userName + " : "+"returnflag");			String s1 = getNewOnlineSkinFlag(modelData) ? "_Player" :"_Biped";			modelInit(entity, modelData, s1);			modelArmorInit(entity, modelData, s1);			modelData.setCapsValue(modelData.caps_initFlag, 2);			return checkModelData(modelData);		}		if (isPlayerCheck(modelData, entity)) {			PFLM_ConfigData.textureName = textureName;			PFLM_ConfigData.maidColor = maidcolor;			PFLM_ConfigData.textureArmorName = Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureArmorName));		}		modelData.setCapsValue(modelData.caps_textureName, textureName);		modelData.setCapsValue(modelData.caps_maidColor, maidcolor);		Modchu_Debug.lDebug(""+userName + " : "+"checkSkin textureName = "+textureName);		bufferedimage.flush();		if (textureName != null) modelInit(entity, modelData, textureName);		Modchu_Debug.lDebug(""+userName + " : "+"checkSkin Armor = "+s[2]);		if (modelData.getCapsValue(modelData.caps_textureArmorName) != null) modelArmorInit(entity, modelData, Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureArmorName)));		Modchu_Debug.lDebug(""+userName + " : "+"modelData.textureName = "+textureName);		modelData.setCapsValue(modelData.caps_dominantArm, handedness);		modelData.setCapsValue((MultiModelBaseBiped) modelData.modelMain.model, modelData.caps_dominantArm, handedness);		Modchu_Debug.lDebug(""+userName + " : "+"localflag handedness = "+handedness + " Random=-1 Right=0 Left=1");		modelData.setCapsValue(modelData.caps_modelScale, modelScale);		Modchu_Debug.lDebug(""+userName + " : "+"localflag modelScale = "+modelScale);		if (isPlayerCheck(modelData, entity)) {			PFLM_ConfigData.handednessMode = handedness;			PFLM_ConfigData.modelScale = modelScale;		}		Modchu_Debug.lDebug(""+userName + " : "+"checkSkin ok.return");		modelData.setCapsValue(modelData.caps_initFlag, 2);		return checkModelData(modelData);	}	private void localBindTextureSetting(PFLM_ModelData modelData, BufferedImage bufferedimage, Object entity) {		modelData.setCapsValue(modelData.caps_localFlag, false);		Modchu_RenderEngine.instance.bindBufferedImage(getUserName(modelData, entity), bufferedimage);		setResourceLocation(modelData, entity, 0, bufferedimage);	}	public PFLM_ModelData checkModelData(PFLM_ModelData modelData) {		//ぬるぽ及び問題が無いかのチェック		int initFlag = modelData.getCapsValueInt(modelData.caps_initFlag);		if (initFlag < 2) {			Modchu_Debug.lDebug("------PFLM_ModelData init caps_initFlag < 2 return end. initFlag="+initFlag+" ------");			return modelData;		}		Modchu_Debug.lDebug("checkModelData userName="+Modchu_AS.getString(Modchu_AS.userName, modelData.getCapsValue(modelData.caps_Entity)));		Modchu_Debug.lDebug("checkModelData textureName="+modelData.getCapsValue(modelData.caps_textureName));		Modchu_Debug.lDebug("checkModelData textureArmorName="+modelData.getCapsValue(modelData.caps_textureArmorName));		Modchu_Debug.lDebug("checkModelData maidColor="+modelData.getCapsValueInt(modelData.caps_maidColor));		Modchu_Debug.lDebug("checkModelData modelScale="+modelData.getCapsValueFloat(modelData.caps_modelScale));		Modchu_Debug.lDebug("checkModelData skinMode="+getSkinModeString(modelData.getCapsValueInt(modelData.caps_skinMode)));		Modchu_Debug.lDebug("checkModelData modelData.modelMain="+modelData.modelMain);		Modchu_Debug.lDebug("checkModelData modelData.modelMain.model="+(modelData.modelMain != null ? modelData.modelMain.model : null));		Modchu_Debug.lDebug("checkModelData modelData.modelFATT="+modelData.modelFATT);		Modchu_Debug.lDebug("checkModelData modelData.modelFATT.modelInner="+(modelData.modelFATT != null ? modelData.modelFATT.modelInner : null));		Modchu_Debug.lDebug("checkModelData modelData.modelFATT.modelOuter="+(modelData.modelFATT != null ? modelData.modelFATT.modelOuter : null));		Modchu_Debug.lDebug("checkModelData getResourceLocation(0)="+getResourceLocation(modelData, null, 0));		boolean err = false;		LinkedList<String> list = new LinkedList();		list.add("checkModelData Error Reporting.");		if (modelData.modelMain == null) err = checkModelDataAddList(list, "checkModelData modelData.modelMain null !!");		else if (modelData.modelMain.model == null) err = checkModelDataAddList(list, "checkModelData modelData.modelMain.model null !!");		if (modelData.modelFATT == null) err = checkModelDataAddList(list, "checkModelData modelData.modelFATT null !!");/*		else {			if (modelData.modelFATT.modelInner == null) err = checkModelDataAddList(list, "checkModelData modelData.modelFATT.modelInner null !!");			if (modelData.modelFATT.modelOuter == null) err = checkModelDataAddList(list, "checkModelData modelData.modelFATT.modelOuter null !!");		}*/		if (getResourceLocation(modelData, null, 0) == null) err = checkModelDataAddList(list, "checkModelData ResourceLocation, 0 null !!");		if (err) {			list.add("checkModelData error textureName="+modelData.getCapsValue(modelData.caps_textureName));			list.add("checkModelData error textureArmorName="+modelData.getCapsValue(modelData.caps_textureArmorName));			list.add("checkModelData error color="+modelData.getCapsValue(modelData.caps_maidColor));			list.add("checkModelData error skinMode="+getSkinModeString(modelData.getCapsValueInt(modelData.caps_skinMode)));			for (String s : list) {				Modchu_Debug.lDebug(s);			}		} else {			Modchu_Debug.lDebug("checkModelData check ok.");		}		Modchu_Debug.lDebug("------PFLM_ModelData init end.------");		return modelData;	}	public String getSkinModeString(int i) {		String s = null;		switch (i) {		case 0:			s = "skinMode_online";			break;		case 1:			s = "skinMode_local";			break;		case 2:			s = "skinMode_char";			break;		case 3:			s = "skinMode_offline";			break;		case 4:			s = "skinMode_Player";			break;		case 5:			s = "skinMode_OthersSettingOffline";			break;		case 6:			s = "skinMode_PlayerOffline";			break;		case 7:			s = "skinMode_PlayerOnline";			break;		case 8:			s = "skinMode_PlayerLocalDat";			break;		case 9:			s = "skinMode_Random";			break;		case 10:			s = "skinMode_OthersIndividualSettingOffline";			break;		}		return s;	}	public boolean checkModelDataAddList(List list, String s) {		list.add(s);		return true;	}	public Object[] checkimage(BufferedImage bufferedimage) {		Object[] object = new Object[8];		// 0 localflag		object[0] = false;		// 1 Texture		object[1] = null;		// 2 modelArmorName		object[2] = "";		// 3 maidcolor		object[3] = 0;		// 4 TextureName		object[4] = "";		// 5 return flag		object[5] = false;		// 6 handedness		object[6] = 0;		// 7 modelScale		object[7] = 0.9375F;		int r = 0;		int g = 0;		int b = 0;		int a = 0;		int checkX = 0;		int checkY = 0;		int[] c1;		boolean checkPointUnder = false;		int imageWidth = bufferedimage.getWidth();		int imageHeight = bufferedimage.getHeight();		do {			checkX = imageWidth - 1;			checkY = 0;			c1 = checkImageColor(bufferedimage, checkX, checkY);			r = c1[0];			g = c1[1];			b = c1[2];			a = c1[3];			checkY = 1;			if (r != 255 | g != 0 | b != 0 | a != 255) {				Modchu_Debug.lDebug((new StringBuilder()).append("checkimage Out r255 g0 b0 a255.x=63,y=0 r=").append(r).append(" g=").append(g).append(" b=").append(b).append(" a=").append(a).toString());				checkPointUnder = true;				checkY = 31;				c1 = checkImageColor(bufferedimage, checkX, checkY);				r = c1[0];				g = c1[1];				b = c1[2];				a = c1[3];				if (r != 255 | g != 0 | b != 0 | a != 255) {					Modchu_Debug.lDebug((new StringBuilder()).append("checkimage Out r255 g0 b0 a255.x=").append(checkX).append(",y=").append(checkY).append(" r=").append(r).append(" g=").append(g).append(" b=").append(b).append(" a=").append(a).toString());					object[5] = true;					break;				}				checkY = 30;			}			c1 = checkImageColor(bufferedimage, checkX, checkY);			r = c1[0];			g = c1[1];			b = c1[2];			a = c1[3];			object[0] = false;			if (r != 255 | g != 255 | b != 0 | a != 255) {				if (r != 255 | g != 0 | b != 255 | a != 255) {					Modchu_Debug.lDebug((new StringBuilder()).append("checkimage Out r255 g0 b255 a255.x = 63,y = 1 r = ").append(r).append(" g = ").append(g).append(" b = ").append(b).append(" a = ").append(a).toString());					object[5] = true;					break;				} else {					Modchu_Debug.lDebug("checkimage localflag = true");					object[0] = true;				}			}			checkX = imageWidth - 2;			checkY = checkPointUnder ? imageHeight - 1 : 0;			c1 = checkImageColor(bufferedimage, checkX, checkY);			r = 255 - c1[0];			g = 255 - c1[1];			b = 255 - c1[2];			a = 255 - c1[3];			Modchu_Debug.mDebug("checkimage r="+r + " g="+g + " b="+b + " a="+a);			break;		} while (true);		if (!(Boolean) object[5]) {			if (g < PFLM_Main.textureList.size()) {				object[2] = PFLM_Main.textureList.get(g);				//Modchu_Debug.mDebug("object[2]="+object[2]);			}			object[3] = r;			if (b < PFLM_Main.textureList.size()) {				object[4] = PFLM_Main.textureList.get(b);				Modchu_Debug.mDebug("checkimage object[4]="+object[4] + " b="+b);				object[1] = ModchuModel_Main.textureManagerGetTexture(PFLM_Main.textureList.get(b), r);			}		}		checkX = imageWidth - 2;		checkY = checkPointUnder ? imageHeight - 2 : 1;		c1 = checkImageColor(bufferedimage, checkX, checkY);		object[6] = c1[0] == 255 ? 0 : c1[0] == 0 ? 1 : -1;		object[7] = (255 - c1[1]) * (0.9375F / 24F);		//Modchu_Debug.mDebug((new StringBuilder()).append("checkimage modelScale color c1[1] = ").append(c1[1]).toString());		b = c1[2];		a = c1[3];		return object;	}	public int[] checkImageColor(BufferedImage bufferedimage, int i, int j) {		Color color = new Color(bufferedimage.getRGB(i, j), true);		int[] i1 = new int[4];		i1[0] = color.getRed();		i1[1] = color.getGreen();		i1[2] = color.getBlue();		i1[3] = color.getAlpha();		return i1;	}	public void sitSleepResetCheck(PFLM_ModelData modelData, Object entity) {		if (!Modchu_EntityCapsHelper.getCapsValueBoolean(modelData, modelData.caps_isSitting)				&& !Modchu_EntityCapsHelper.getCapsValueBoolean(modelData, modelData.caps_isSleeping)) return;		float moveForward = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseMoveForward, entity);		float moveStrafing = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseMoveStrafing, entity);		float f1 = moveForward * moveForward + moveStrafing * moveStrafing;		float f2 = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseLimbSwing, entity) - Modchu_CastHelper.Float(modelData.getCapsValue(modelData.caps_tempLimbSwing));		boolean flag = Modchu_AS.getBoolean(Modchu_AS.entityLivingBaseIsJumping, entity)				| Modchu_AS.getBoolean(Modchu_AS.entityPlayerIsPlayerSleeping, entity);		if (Modchu_EntityCapsHelper.getCapsValueBoolean(modelData, modelData.caps_isSitting)				&& (flag						| f1 > 0.20000000000000001D						| f2 != 0.0F)) {			//Modchu_Debug.mDebug("isSitting 自動OFF flag="+flag+" f1="+f1+" f2="+f2);			modelData.modelMain.setCapsValue(modelData, modelData.caps_isRiding, false);			modelData.setCapsValue(modelData.caps_isSitting, false);		}		if (Modchu_EntityCapsHelper.getCapsValueBoolean(modelData, modelData.caps_isSleeping)) {			if (flag						| f1 > 0.20000000000000001F						| f2 != 0.0F) {				//Modchu_Debug.mDebug("isSleeping 自動OFF flag="+flag+" f1="+f1+" f2="+f2);				modelData.modelMain.setCapsValue(modelData, modelData.caps_isRiding, false);				modelData.setCapsValue(modelData.caps_isSleeping, false);			}// else {				//Modchu_Debug.mDebug("sitSleepResetCheck isSleeping else flag="+flag+" f1="+f1+" f2="+f2);				//Modchu_Debug.mDebug("sitSleepResetCheck isSleeping else entityLivingBaseIsJumping="+Modchu_AS.getBoolean(Modchu_AS.entityLivingBaseIsJumping, entity));			//}		}		if (Modchu_AS.getBoolean(Modchu_AS.entityIsRiding, entity)				&& (modelData.getCapsValueBoolean(modelData.caps_isSitting)						| modelData.getCapsValueBoolean(modelData.caps_isSleeping))) {			modelData.setCapsValue(modelData.caps_isSitting, false);			modelData.setCapsValue(modelData.caps_isSleeping, false);		}		modelData.setCapsValue(modelData.caps_tempLimbSwing, Modchu_AS.getFloat(Modchu_AS.entityLivingBaseLimbSwing, entity));	}	public void waitModeSetting(PFLM_ModelData modelData, Object entity, float f) {		Object o = modelData != null				&& modelData.modelMain != null				&& modelData.modelMain.model != null ? modelData.modelMain.model.getCapsValue(modelData, modelData.caps_onGround) : null;		if (o != null				&& o instanceof float[]); else return;		float[] onGrounds = (float[]) o;		//Modchu_Debug.mDebug("waitModeSetting 1 onGrounds="+onGrounds);		int i1 = Modchu_EntityCapsHelper.getCapsValueInt(null, modelData, modelData.caps_dominantArm);		//Modchu_Debug.dDebug("waitModeSetting "+onGrounds[i1]+" i1="+i1+" onGrounds[1]="+onGrounds[1]);		if (!Modchu_EntityCapsHelper.getCapsValueBoolean(modelData, modelData.caps_firstPerson)) {			//Modchu_Debug.mDebug("waitModeSetting 2 isPlayerCheck="+(isPlayerCheck(modelData, entity)));			if (PFLM_ConfigData.waitTime == 0					&& isPlayerCheck(modelData, entity)) {				if (!modelData.getCapsValueBoolean(modelData.caps_isWaitFSetFlag)) {					modelData.setCapsValue(modelData.caps_isWaitF, copyf(f));					modelData.setCapsValue(modelData.caps_isWaitFSetFlag, true);				}				if (PFLM_Main.isWait) {					//Modchu_Debug.mDebug("waitModeSetting 3");					//Modchu_Debug.mDebug("waitModeSetting f="+f+" isWaitF="+(modelData.getCapsValueFloat(modelData.caps_isWaitF)));					//Modchu_Debug.mDebug("waitModeSetting isWaitFSetFlag="+(modelData.getCapsValueBoolean(modelData.caps_isWaitFSetFlag)));					//Modchu_Debug.mDebug("waitModeSetting onGrounds[i1] > 0 ? "+(onGrounds[i1] > 0));					//Modchu_Debug.mDebug("waitModeSetting isWait="+(modelData.getCapsValueBoolean(modelData.caps_isWait)));					//Modchu_Debug.mDebug("waitModeSetting isSneak="+(modelData.modelMain.model.isSneak));					if (((f != modelData.getCapsValueFloat(modelData.caps_isWaitF)							&& modelData.getCapsValueBoolean(modelData.caps_isWaitFSetFlag))							| onGrounds[i1] > 0)							| (modelData.getCapsValueBoolean(modelData.caps_isWait)									&& modelData.modelMain.model.isSneak)) {						//Modchu_Debug.mDebug("waitModeSetting 4");						modelData.setCapsValue(modelData.caps_isWait, false);						PFLM_Main.isWait = false;						modelData.setCapsValue(modelData.caps_isWaitTime, 0);						modelData.setCapsValue(modelData.caps_isWaitF, copyf(f));						modelData.setCapsValue(modelData.caps_isWaitFSetFlag, true);					} else {						if ((f != modelData.getCapsValueFloat(modelData.caps_isWaitF)								| onGrounds[i1] > 0)								| (modelData.getCapsValueBoolean(modelData.caps_isWait)										&& modelData.modelMain.model.isSneak)) {							//Modchu_Debug.mDebug("waitModeSetting 5");							modelData.setCapsValue(modelData.caps_isWait, false);							PFLM_Main.isWait = false;							modelData.setCapsValue(modelData.caps_isWaitTime, 0);							modelData.setCapsValue(modelData.caps_isWaitF, copyf(f));						} else {							//Modchu_Debug.mDebug("waitModeSetting 6");							modelData.setCapsValue(modelData.caps_isWait, true);						}					}				}			} else {				int i = Modchu_EntityCapsHelper.getCapsValueBoolean(modelData, modelData.caps_isPlayer) ? PFLM_ConfigData.waitTime : PFLM_ConfigData.othersPlayerWaitTime;				if (!modelData.getCapsValueBoolean(modelData.caps_isWait)						&& !modelData.modelMain.model.isSneak && i > 0) {					modelData.setCapsValue(modelData.caps_isWaitTime, modelData.getCapsValueInt(modelData.caps_isWaitTime) + 1);					if (modelData.getCapsValueInt(modelData.caps_isWaitTime) > i) {						//Modchu_Debug.Debug("isWaitTime > i");						modelData.setCapsValue(modelData.caps_isWait, true);						if (isPlayerCheck(modelData, entity)) PFLM_Main.isWait = true;						modelData.setCapsValue(modelData.caps_isWaitTime, 0);						modelData.setCapsValue(modelData.caps_isWaitF, copyf(f));					}				}				if ((f != modelData.getCapsValueFloat(modelData.caps_isWaitF)						| onGrounds[i1] > 0)						| (modelData.getCapsValueBoolean(modelData.caps_isWait)								&& modelData.modelMain.model.isSneak)) {					//Modchu_Debug.Debug("f != isWaitF");					modelData.setCapsValue(modelData.caps_isWait, false);					if (Modchu_EntityCapsHelper.getCapsValueBoolean(modelData, modelData.caps_isPlayer)) PFLM_Main.isWait = false;					modelData.setCapsValue(modelData.caps_isWaitTime, 0);					modelData.setCapsValue(modelData.caps_isWaitF, copyf(f));				}			}		} else {			if (Modchu_EntityCapsHelper.getCapsValueBoolean(modelData, modelData.caps_isPlayer)) {				if (modelData.getCapsValueBoolean(modelData.caps_isWait)) {					//Modchu_Debug.Debug("firstPerson isWait false");					modelData.setCapsValue(modelData.caps_isWait, false);					if (isPlayerCheck(modelData, entity)) PFLM_Main.isWait = false;					modelData.setCapsValue(modelData.caps_isWaitTime, 0);					modelData.setCapsValue(modelData.caps_isWaitF, copyf(f));					if (PFLM_ConfigData.waitTime == 0) modelData.setCapsValue(modelData.caps_isWaitFSetFlag, true);				} else {					if (PFLM_ConfigData.waitTime == 0							&& !modelData.getCapsValueBoolean(modelData.caps_isWaitFSetFlag)) {						modelData.setCapsValue(modelData.caps_isWaitF, copyf(f));						modelData.setCapsValue(modelData.caps_isWaitFSetFlag, true);					}				}			}		}	}	public void skinMode_FalseSetting(Object entity, PFLM_ModelData modelData) {		modelData.setCapsValue(modelData.caps_skinMode, skinMode_online);	}	public void skinMode_PlayerSetting(Object entity, PFLM_ModelData modelData) {		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);		PFLM_ModelData modelData2 = (PFLM_ModelData) getPlayerData(thePlayer);		if (modelData2 != null) {			modelData.setCapsValue(modelData.caps_skinMode, skinMode_Player);			modelData.setCapsValue(modelData.caps_dominantArm, playerHandednessSetting());			modelData.setCapsValue(modelData.caps_modelScale, PFLM_ConfigData.modelScale);			modelData.setCapsValue(modelData.caps_textureName, modelData2.getCapsValue(modelData.caps_textureName));			modelData.setCapsValue(modelData.caps_textureArmorName, modelData2.getCapsValue(modelData.caps_textureArmorName));			modelData.setCapsValue(modelData.caps_maidColor, modelData2.getCapsValueInt(modelData.caps_maidColor));			if (modelData2.getCapsValueBoolean(modelData.caps_freeVariable, "skinChar")) {				modelData.setCapsValue(modelData.caps_freeVariable, "skinChar", true);				textureBipedDefaultSetting(modelData, getNewOnlineSkinFlag(modelData));			} else {				modelData.setCapsValue(modelData.caps_freeVariable, "skinChar", false);			}			modelInit(entity, modelData, Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureName)));			modelArmorInit(entity, modelData, Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureArmorName)));		}	}	public void skinMode_PlayerOnlineSetting(Object entity, PFLM_ModelData modelData) {		modelData.setCapsValue(modelData.caps_skinMode, skinMode_PlayerOnline);		modelData.setCapsValue(modelData.caps_dominantArm, playerHandednessSetting());		modelData.setCapsValue(modelData.caps_modelScale, PFLM_ConfigData.modelScale);	}	public void skinMode_PlayerOfflineSetting(Object entityplayer, PFLM_ModelData modelData) {/*		if (PFLM_ConfigData.textureName == null			| PFLM_ConfigData.textureName.isEmpty()) PFLM_ConfigData.textureName = "_Biped";		if (PFLM_ConfigData.textureArmorName == null			| PFLM_ConfigData.textureArmorName.isEmpty()) PFLM_ConfigData.textureArmorName = "_Biped";*/		modelData.setCapsValue(modelData.caps_maidColor, PFLM_ConfigData.maidColor);		//setResourceLocation(modelData, entityplayer, 0, Modchu_Main.textureManagerGetTexture(PFLM_ConfigData.textureName, modelData.getCapsValueInt(modelData.caps_maidColor)));		modelData.setCapsValue(modelData.caps_skinMode, skinMode_PlayerOffline);		modelData.setCapsValue(modelData.caps_dominantArm, playerHandednessSetting());		modelData.setCapsValue(modelData.caps_modelScale, PFLM_ConfigData.modelScale);		modelData.setCapsValue(modelData.caps_freeVariable, "skinChar", false);		String s1 = PFLM_ConfigData.textureName;		modelInit(entityplayer, modelData, s1);		modelData.setCapsValue(modelData.caps_textureName, s1);		s1 = PFLM_ConfigData.textureArmorName;		modelData.setCapsValue(modelData.caps_textureArmorName, PFLM_ConfigData.textureArmorName);		modelArmorInit(entityplayer, modelData, s1);	}	public void skinMode_RandomSetting(Object entity, PFLM_ModelData modelData) {		String s3 = null;		Object s4 = null;		int i = 0;		for (int i1 = 0; s4 == null && i1 < 50; i1++) {			i = rnd.nextInt(16);			int j = 0;			if (ModchuModel_Main.getTextureManagerTexturesSize() > 0) {				j = rnd.nextInt(ModchuModel_Main.getTextureManagerTexturesSize());				s3 = ModchuModel_Main.getPackege(i, j);			} else {				s3 = ModchuModel_Main.textureNameCheck(null);			}			modelData.setCapsValue(modelData.caps_maidColor, i);			s4 = ModchuModel_Main.textureManagerGetTexture(s3, i);			if (i1 == 49) return;		}		Modchu_Debug.lDebug("Random modelPackege="+s3);		modelData.setCapsValue(modelData.caps_skinMode, skinMode_Random);		//setResourceLocation(modelData, entityplayer, 0, s4);		//Modchu_Debug.mDebug("Random s4="+s4);		String s1 = PFLM_Main.getArmorName(s3);		modelData.setCapsValue(modelData.caps_textureName, s3);		modelData.setCapsValue(modelData.caps_textureArmorName, s1);		modelData.setCapsValue(modelData.caps_maidColor, i);		modelData.setCapsValue(modelData.caps_freeVariable, "skinChar", false);		modelInit(entity, modelData, s3);		modelArmorInit(entity, modelData, s1);	}	public void setHandedness(Object entity, int i) {		PFLM_ModelData modelData = (PFLM_ModelData) getPlayerData(entity);		if (i == -1) i = rnd.nextInt(2);		modelData.setCapsValue(modelData.caps_dominantArm, i);		if (modelData.modelMain != null				&& modelData.modelMain.model != null) modelData.modelMain.model.setCapsValue(modelData, modelData.caps_dominantArm, i);		if (isPlayerCheck(modelData, entity)) {			PFLM_Main.setFlipHorizontal(i == 0 ? false : true);			PFLM_Main.setLeftHandedness(i == 0 ? false : true);		}	}	public boolean getResetFlag() {		return resetFlag;	}	public void setResetFlag(boolean b) {		resetFlag = b;	}	public float copyf(float f) {		return f;	}	public Object getResourceLocation(Object entityOrModelData) {		ModchuModel_ModelDataBase modelData = (ModchuModel_ModelDataBase) (entityCheck(entityOrModelData) ? getPlayerData(entityOrModelData) : entityOrModelData instanceof ModchuModel_ModelDataBase ? entityOrModelData : null);		return getResourceLocation(modelData, entityCheck(entityOrModelData) ? entityOrModelData : modelData.getCapsValue(modelData.caps_Entity), 0);	}	public Object getResourceLocation(PFLM_ModelData modelData, Object entity) {		return getResourceLocation(modelData, entity, 0);	}	public Object getResourceLocation(Object entityOrModelData, int i) {		ModchuModel_ModelDataBase modelData = (ModchuModel_ModelDataBase) (entityCheck(entityOrModelData) ? getPlayerData(entityOrModelData) : entityOrModelData instanceof ModchuModel_ModelDataBase ? entityOrModelData : null);		return getResourceLocation(modelData, entityCheck(entityOrModelData) ? entityOrModelData : modelData.getCapsValue(modelData.caps_Entity), i);	}	public Object getResourceLocation(ModchuModel_ModelDataBase modelData, Object entity, int i) {		if (modelData != null); else return null;		if (modelData.getCapsValue(modelData.caps_ResourceLocation) != null); else {			modelData.setCapsValue(modelData.caps_ResourceLocation, new Object[3]);		}		return modelData.getCapsValue(modelData.caps_ResourceLocation, i);	}	public void setResourceLocation(Object entityOrModelData, Object resourceLocation) {		ModchuModel_ModelDataBase modelData = (ModchuModel_ModelDataBase) (entityCheck(entityOrModelData) ? getPlayerData(entityOrModelData) : entityOrModelData instanceof ModchuModel_ModelDataBase ? entityOrModelData : null);		if (modelData != null) setResourceLocation(modelData, entityCheck(entityOrModelData) ? entityOrModelData : modelData.getCapsValue(modelData.caps_Entity), 0, resourceLocation);		else {			Modchu_Debug.lDebug("PFLM_ModelDataMaster setResourceLocation 1 modelData == null error !! entityOrModelData="+entityOrModelData);		}	}	public void setResourceLocation(ModchuModel_ModelDataBase modelData, Object entity, Object resourceLocation) {		setResourceLocation(modelData, entity, 0, resourceLocation);	}	public void setResourceLocation(Object entityOrModelData, int i, Object resourceLocation) {		ModchuModel_ModelDataBase modelData = (ModchuModel_ModelDataBase) (entityCheck(entityOrModelData) ? getPlayerData(entityOrModelData) : entityOrModelData instanceof ModchuModel_ModelDataBase ? entityOrModelData : null);		if (modelData != null) setResourceLocation(modelData, entityCheck(entityOrModelData) ? entityOrModelData : modelData.getCapsValue(modelData.caps_Entity), i, resourceLocation);		else {			Modchu_Debug.lDebug("PFLM_ModelDataMaster setResourceLocation 2 modelData == null error !! entityOrModelData="+entityOrModelData);		}	}	public void setResourceLocation(ModchuModel_ModelDataBase modelData, Object entity, int i, Object resourceLocation) {		if (modelData != null); else {			Modchu_Debug.lDebug("PFLM_ModelDataMaster setResourceLocation 3 modelData == null error !! entity="+entity+" i="+i);			Modchu_Debug.lDebug("PFLM_ModelDataMaster setResourceLocation 3 modelData == null error !! resourceLocation="+resourceLocation);			return;		}		if (modelData.getCapsValue(modelData.caps_ResourceLocation) != null); else {			modelData.setCapsValue(modelData.caps_ResourceLocation, new Object[3]);		}		modelData.setCapsValue(modelData.caps_ResourceLocation, i, resourceLocation);	}	public boolean entityCheck(Object entity) {		return Modchu_Reflect.loadClass("Entity").isInstance(entity);	}	public boolean entityPlayerCheck(Object entity) {		return Modchu_Reflect.loadClass("EntityPlayer").isInstance(entity);	}	public boolean entityPlayerDummyCheck(Object entity) {		return entity instanceof Modchu_EntityPlayerDummy;	}	public boolean isSkinModeOffline(int skinMode) {		return skinMode == skinMode_offline				| skinMode == skinMode_PlayerOffline;	}	public boolean isSkinModeOnline(int skinMode) {		return skinMode == skinMode_online				| skinMode == skinMode_PlayerOnline;	}	public boolean isSkinModePlayer(int skinMode) {		return skinMode == skinMode_Player;	}	public boolean isSkinModeRandom(int skinMode) {		return skinMode == skinMode_Random;	}	public boolean getNewOnlineSkinFlag(PFLM_ModelData modelData) {		BufferedImage bufferedimage = Modchu_CastHelper.BufferedImage(modelData.getCapsValue(modelData.caps_freeVariable, "bufferedimage"));		return bufferedimage != null ? bufferedimage.getWidth() == bufferedimage.getHeight() : steveTextureWidth == steveTextureHeight;	}	public boolean getSlimFlag(Object abstractClientPlayer) {		String s = Modchu_Reflect.loadClass("AbstractClientPlayer").isInstance(abstractClientPlayer) ? Modchu_AS.getString(Modchu_AS.abstractClientPlayerGetSkinType, abstractClientPlayer) : null;		return s != null				&& !s.isEmpty() ? s.equals("slim") : false;	}	@Override	public void clearDataMap() {		super.clearDataMap();		sendIDAllFlag = true;	}}