package modchu.pflm;import java.awt.Color;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.net.URL;import java.util.ArrayList;import java.util.Random;import javax.imageio.ImageIO;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_AS;import modchu.lib.characteristic.Modchu_EntityPlayerDummy;import modchu.lib.characteristic.recompileonly.Modchu_CastHelper;import modchu.lib.replacepoint.Modchu_IModelCapsReplacePoint;import modchu.model.ModchuModel_Main;import modchu.model.ModchuModel_ModelCapsHelper;import modchu.model.ModchuModel_ModelDataBase;import modchu.model.ModchuModel_ModelDataMaster;import modchu.model.ModchuModel_RenderEngine;import modchu.model.multimodel.base.MultiModel;import modchu.model.multimodel.base.MultiModelBaseBiped;import modchu.model.multimodel.base.MultiModel_Biped;import modchu.model.replacepoint.ModchuModel_ModelBaseDuoReplacePoint;import modchu.model.replacepoint.ModchuModel_ModelBaseSoloReplacePoint;public class PFLM_ModelDataMaster extends ModchuModel_ModelDataMaster {	public boolean initResetFlag = false;	public static final int skinMode_online										= 0;	public static final int skinMode_local 										= 1;	public static final int skinMode_offline 									= 3;	public static final int skinMode_Player										= 4;	public static final int skinMode_OthersSettingOffline 				= 5;	public static final int skinMode_PlayerOffline 							= 6;	public static final int skinMode_PlayerOnline 							= 7;	public static final int skinMode_PlayerLocalData						= 8;	public static final int skinMode_Random 									= 9;	public static final int skinMode_OthersIndividualSettingOffline 	= 10;	public Random rnd = new Random();	public Object steveTexture;	private int steveTextureWidth;	private int steveTextureHeight;	public PFLM_ModelDataMaster() {		instance = this;		steveTexture = Modchu_Main.getMinecraftVersion() > 159 ? Modchu_Reflect.newInstance("ResourceLocation", new Class[]{ String.class }, new Object[]{ "textures/entity/steve.png" }) : "/mob/char.png";		File url;		BufferedImage bufferedimage = null;		if (Modchu_Main.getMinecraftVersion() > 159) {			Object textureManager = Modchu_AS.get(Modchu_AS.minecraftTextureManager);			Modchu_AS.set(Modchu_AS.textureManagerBindTexture, textureManager, steveTexture);		}		//Object texture = Modchu_AS.get(Modchu_AS.textureManagerGetTexture, textureManager, steveTexture);		Object iresource = Modchu_AS.get(Modchu_AS.resourceManagerGetResource, steveTexture);		InputStream inputstream = null;		if (iresource != null) {			inputstream = Modchu_AS.getInputStream(Modchu_AS.resourceGetInputStream, iresource);			if (inputstream != null) {				try {					bufferedimage = ImageIO.read(inputstream);				} catch (IOException e) {					e.printStackTrace();				}			}		}		steveTextureWidth = bufferedimage != null ? bufferedimage.getWidth() : 64;		steveTextureHeight = bufferedimage != null ? bufferedimage.getHeight() : 32;	}	@Override	public ModchuModel_ModelDataBase getPlayerData(Object entity) {		if (entityCheck(entity)) ;else return super.getPlayerData(entity);		if (entity != null) ;else {			Modchu_Debug.lDebug("PFLM_ModelDataMaster getPlayerData entity == null !! return.");			return null;		}		ModchuModel_ModelDataBase data = super.getPlayerData(entity);		if (data != null) ;else return null;		if (data.getCapsValueBoolean(data.caps_isPlayer)) {			entity = Modchu_Reflect.invokeMethod(data.getClass(), "getCapsValue", new Class[]{ int.class, Object[].class }, data, new Object[]{ Modchu_IModelCapsReplacePoint.caps_Entity, null });			if (entity != null) {				Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);				if (thePlayer.equals(entity)) Modchu_Reflect.setFieldObject(ModchuModel_ModelDataBase.class, "owner", data, thePlayer);			}		}		return data;	}	@Override	public ModchuModel_ModelDataBase loadPlayerData(Object entity) {		if (!loadCheck()				| !entityCheck(entity)) return null;		PFLM_ModelData modelData = (PFLM_ModelData) loadPlayerDataDefaultSetting(new PFLM_ModelData());		modelData.setRender(entityPlayerCheck(entity) ? PFLM_Main.renderPlayerInstance : PFLM_Main.renderPlayerDummyInstance);		return loadPlayerData(entity, modelData);	}	@Override	public ModchuModel_ModelDataBase loadPlayerData(Object entity, ModchuModel_ModelDataBase data) {		if (!loadCheck()) return null;		Modchu_Debug.mDebug("PFLM_ModelDataMaster loadPlayerData entity="+entity);		if (entity != null) ;else return null;		if (!entityCheck(entity)				| (!entityPlayerCheck(entity)						&& !entityPlayerDummyCheck(entity))) {			return super.loadPlayerData(entity, !(data instanceof PFLM_ModelData) ? data : null);		}		PFLM_ModelData modelData = null;		if (data != null && !(data instanceof PFLM_ModelData)) return null;		modelData = (PFLM_ModelData) data;		if (entityCheck(entity)) {			if (modelData != null) ;else modelData = (PFLM_ModelData) loadPlayerDataDefaultSetting(new PFLM_ModelData());			modelData.setRender(entityPlayerCheck(entity) ? PFLM_Main.renderPlayerInstance : PFLM_Main.renderPlayerDummyInstance);			modelData.setCapsValue(modelData.caps_EntityType, modelData.entityType_PFLM);		}		modelData.setCapsValue(modelData.caps_freeVariable, "skinChar", false);		Modchu_Debug.mDebug("loadPlayerData 1 set skinChar false");		if (entityPlayerCheck(entity)) modelData.setCapsValue(modelData.caps_freeVariable, "showArmor", true);		else {			modelData.modelMain.setEntityCaps(modelData);		}		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);;		if (thePlayer != null) ;else return null;		Modchu_Reflect.setFieldObject(ModchuModel_ModelDataBase.class, "owner", modelData, entity);		modelData.modelMain.setEntityCaps(modelData);		String username = Modchu_AS.getString(Modchu_AS.userName, entity);		modelData.setCapsValue(modelData.caps_isPlayer, username == Modchu_AS.getString(Modchu_AS.userName, thePlayer));		//if (!isPlayerCheck(modelData, entity)) Modchu_Debug.mDebug("@@@@@isPlayer false!!");		// 125deleteif (!PFLM_Main.gotchaNullCheck()) return null;		Modchu_Debug.lDebug("loadPlayerData start --------");		if (!isPlayerCheck(modelData, entity)) {			String t[] = (String[]) PFLM_Main.playerLocalData.get(username);			PFLM_ModelData modelData2;			if (t != null) {				switch (Modchu_CastHelper.Int(t[4])) {				case PFLM_GuiOthersPlayerIndividualCustomizeMaster.modePlayer:					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData Individual modePlayer");					skinMode_PlayerSetting(entity, modelData);					break;				case PFLM_GuiOthersPlayerIndividualCustomizeMaster.modeOffline:					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData Individual modeOthersSettingOffline");					modelData.setCapsValue(modelData.caps_skinMode, skinMode_OthersIndividualSettingOffline);					String s2 = t[0];					modelData.setCapsValue(modelData.caps_maidColor, Modchu_CastHelper.Int(t[2]));					setResourceLocation(modelData, entity, 0, ModchuModel_Main.textureManagerGetTexture(s2, modelData.getCapsValueInt(modelData.caps_maidColor)));					setResourceLocation(modelData, entity, 0, ModchuModel_Main.textureManagerGetTexture(s2, modelData.getCapsValueInt(modelData.caps_maidColor)));					modelInit(entity, modelData, s2);					s2 = t[1];					modelData.setCapsValue(modelData.caps_textureName, s2);					modelData.setCapsValue(modelData.caps_textureArmorName, t[1]);					modelArmorInit(entity, modelData, s2);					modelData.setCapsValue(modelData.caps_dominantArm, Modchu_Main.integerCheck(t[5]) ? othersPlayerIndividualHandednessSetting(Modchu_CastHelper.Int(t[5])) : 0);					modelData.setCapsValue(modelData.caps_modelScale, Modchu_Main.floatCheck(t[3]) ? Modchu_CastHelper.Float(t[3]) : 0.0F);					break;				case PFLM_GuiOthersPlayerIndividualCustomizeMaster.modePlayerOffline:					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData Individual modePlayerOffline");					skinMode_PlayerOfflineSetting(entity, modelData);					break;				case PFLM_GuiOthersPlayerIndividualCustomizeMaster.modePlayerOnline:					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData Individual modePlayerOnline");					skinMode_PlayerOnlineSetting(entity, modelData);					break;				case PFLM_GuiOthersPlayerIndividualCustomizeMaster.modeRandom:					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData Individual modeRandom");					skinMode_RandomSetting(entity, modelData);					modelData.setCapsValue(modelData.caps_dominantArm, Modchu_Main.integerCheck(t[5]) ? othersPlayerIndividualHandednessSetting(Modchu_CastHelper.Int(t[5])) : 0);					modelData.setCapsValue(modelData.caps_modelScale, Modchu_CastHelper.Float(t[3]));					break;				case PFLM_GuiOthersPlayerIndividualCustomizeMaster.modeOnline:					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData Individual modefalse");					skinMode_FalseSetting(entity, modelData);					break;				}			} else {				switch (PFLM_ConfigData.othersChangeMode) {				case PFLM_GuiOthersPlayerMaster.modePlayer:					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData OthersSetting modePlayer");					skinMode_PlayerSetting(entity, modelData);					break;				case PFLM_GuiOthersPlayerMaster.modeOffline:					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData OthersSetting modeOthersSettingOffline");					modelData.setCapsValue(modelData.caps_skinMode, skinMode_OthersSettingOffline);					String s = PFLM_ConfigData.othersTextureName;					modelData.setCapsValue(modelData.caps_maidColor, PFLM_ConfigData.othersMaidColor);					modelInit(entity, modelData, s);					s = PFLM_ConfigData.othersTextureArmorName;					modelData.setCapsValue(modelData.caps_textureName, PFLM_ConfigData.othersTextureName);					modelData.setCapsValue(modelData.caps_textureArmorName, PFLM_ConfigData.othersTextureArmorName);					modelArmorInit(entity, modelData, s);					modelData.setCapsValue(modelData.caps_dominantArm, othersPlayerHandednessSetting());					modelData.setCapsValue(modelData.caps_modelScale, PFLM_ConfigData.othersModelScale);					//Modchu_Debug.mDebug(""+entityplayer.username+" : "+"modelData handedness="+modelData.getCapsValueInt(modelData.caps_dominantArm));					break;				case PFLM_GuiOthersPlayerMaster.modePlayerOffline:					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData OthersSetting modePlayerOffline");					skinMode_PlayerOfflineSetting(entity, modelData);					break;				case PFLM_GuiOthersPlayerMaster.modePlayerOnline:					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData OthersSetting modePlayerOnline");					skinMode_PlayerOnlineSetting(entity, modelData);					break;				case PFLM_GuiOthersPlayerMaster.modeRandom:					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData OthersSetting modeRandom");					skinMode_RandomSetting(entity, modelData);					modelData.setCapsValue(modelData.caps_dominantArm, othersPlayerHandednessSetting());					modelData.setCapsValue(modelData.caps_modelScale, PFLM_ConfigData.othersModelScale);					break;				case PFLM_GuiOthersPlayerMaster.modeOnline:					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData OthersSetting modefalse");					skinMode_FalseSetting(entity, modelData);					break;				}			}			PFLM_PacketPlayerStateManager.addSendList(PFLM_Main.getPFLMFPacketConstant("packet_IDAll"), modelData, thePlayer);			int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);			if (skinMode != skinMode_PlayerOnline					&& skinMode != skinMode_online					&& !(skinMode == skinMode_Player					&& PFLM_ConfigData.changeMode == PFLM_GuiMaster.modeOnline)) {				modelData.setCapsValue(modelData.caps_initFlag, 2);				Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData !Player skinMode != Online return. skinMode="+(getSkinModeString(skinMode))+" PFLM_ConfigData.othersChangeMode="+PFLM_ConfigData.othersChangeMode);				return checkModelData(modelData);			}		} else {			modelData.setCapsValue(modelData.caps_dominantArm, playerHandednessSetting());			PFLM_PacketPlayerStateManager.addSendList((byte) 0, modelData, thePlayer);			if (PFLM_ConfigData.changeMode == PFLM_GuiMaster.modeRandom) {				skinMode_RandomSetting(entity, modelData);				modelData.setCapsValue(modelData.caps_initFlag, 2);				Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData Player Random setting return");				return checkModelData(modelData);			}		}		Modchu_Debug.mDebug("loadPlayerData getOnlineSkin 1");		BufferedImage bufferedimage = getOnlineSkin(modelData, entity);		Modchu_Debug.mDebug("loadPlayerData getOnlineSkin 2");		modelData.setCapsValue(modelData.caps_initFlag, 2);		Modchu_Debug.mDebug("loadPlayerData bufferedimage="+bufferedimage);		if (bufferedimage != null) {			//Modchu_Debug.mlDebug(""+entity.username+" : "+"OnlineMode bufferedimage != null ?"+(bufferedimage != null));			textureBipedDefaultSetting(modelData, bufferedimage.getWidth() == bufferedimage.getHeight());			String userName = getUserName(modelData, entity);			if (isPlayerCheck(modelData, entity)) {				if (PFLM_ConfigData.changeMode == PFLM_GuiMaster.modeOnline) {					modelData.setCapsValue(modelData.caps_skinMode, skinMode_online);					Modchu_Debug.lDebug(""+username + " : "+"OnlineMode bufferedimage != null isPlayer skinMode_online set.");				}				if (!userName.startsWith("Player")						&& !userName.startsWith("User_")						&& modelData.getCapsValueInt(modelData.caps_initFlag) == 0						&& !initResetFlag) {					modelData.setCapsValue(modelData.caps_initFlag, 1);					initResetFlag = true;					resetFlag = true;					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData caps_initFlag return");					return checkModelData(modelData);				}			}			modelData.setCapsValue(modelData.caps_freeVariable, "skinChar", false);			Modchu_Debug.mDebug("loadPlayerData 2 set bufferedimage != null skinChar false");		} else {			Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData bufferedimage == null");			if (isPlayerCheck(modelData, entity)) Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData GuichangeMode="+PFLM_GuiMaster.getChangeModeString(PFLM_ConfigData.changeMode));			//Modchu_Debug.mDebug(""+entity.username+" : "+"er entity.skinUrl = "+entity.skinUrl);			int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);			Modchu_Debug.lDebug(""+username + " : "+"skinMode="+getSkinModeString(skinMode));			if (isPlayerCheck(modelData, entity)) {				if (skinMode == skinMode_PlayerOnline						| skinMode == skinMode_online) {					modelData.setCapsValue(modelData.caps_freeVariable, "skinChar", true);					Modchu_Debug.mDebug("loadPlayerData 3 set skinChar true");					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData isPlayer skinMode_char set");				} else {					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData isPlayer skinMode_char no set");				}			} else {				if (skinMode == skinMode_Player) {					PFLM_ModelData modelData2 = (PFLM_ModelData) getPlayerData(thePlayer);					if (modelData2 != null) {						if (modelData2.getCapsValueBoolean(modelData.caps_freeVariable, "skinChar")) {							modelData2.setCapsValue(modelData.caps_freeVariable, "skinChar", true);							Modchu_Debug.mDebug("loadPlayerData 4 set skinChar true");							Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData !isPlayer skinMode_char set");						}					}				} else if (skinMode == skinMode_PlayerOnline						| skinMode == skinMode_online) {					modelData.setCapsValue(modelData.caps_freeVariable, "skinChar", true);					Modchu_Debug.mDebug("loadPlayerData 5 set skinChar true");					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData !isPlayer skinMode_char set");				} else {					Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData !isPlayer skinMode_char no set");				}			}			if (modelData.getCapsValueBoolean(modelData.caps_freeVariable, "skinChar")) {				textureBipedDefaultSetting(modelData, steveTextureWidth == steveTextureHeight);				modelInit(entity, modelData, (String) modelData.getCapsValue(modelData.caps_textureName));				modelArmorInit(entity, modelData, (String) modelData.getCapsValue(modelData.caps_textureArmorName));				modelData.setCapsValue(modelData.caps_isPlayer, username == Modchu_AS.getString(Modchu_AS.userName, thePlayer));				return checkModelData(modelData);			}/*			else {				//Modchu_Debug.mDebug(""+entity.username+" : "+"er offline only set.");				modelData.setCapsValue(modelData.caps_skinMode, skinMode_offline);				modelData.setCapsValue(modelData.caps_textureName, PFLM_ConfigData.textureName);				modelData.setCapsValue(modelData.caps_textureArmorName, PFLM_ConfigData.textureArmorName);			}*/		}		Modchu_Debug.lDebug(""+username + " : "+"loadPlayerData skinMode="+getSkinModeString(modelData.getCapsValueInt(modelData.caps_skinMode)));		return checkSkin(entity, bufferedimage, modelData);	}	@Override	public ModchuModel_ModelDataBase loadPlayerDataDefaultSetting(ModchuModel_ModelDataBase data) {		super.loadPlayerDataDefaultSetting(data);		data.setCapsValue(data.caps_skinMode, skinMode_offline);		return data;	}	private boolean loadCheck() {		if (!Modchu_Main.initModsLoadedFlag) {			return false;		}		return true;	}	public BufferedImage getOnlineSkin(PFLM_ModelData modelData, Object entity) {		if (modelData != null) ;else return null;		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);;		BufferedImage bufferedimage = null;		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		boolean isPlayer = isPlayerCheck(modelData, entity);		String username = Modchu_AS.getString(Modchu_AS.userName, entity);		if ((isPlayer				&& PFLM_ConfigData.changeMode == PFLM_GuiMaster.modeOnline)				| (!isPlayer						&& (skinMode == skinMode_online						| skinMode == skinMode_PlayerOnline						| (skinMode == skinMode_Player						&& PFLM_ConfigData.changeMode == PFLM_GuiMaster.modeOnline)))) {			if (skinMode == skinMode_offline) modelData.setCapsValue(modelData.caps_skinMode, skinMode_online);			Modchu_Debug.lDebug(""+username + " : "+"new model read username = "+username);			String skinUrl = getSkinUrl(modelData, entity);			Modchu_Debug.mlDebug(""+username + " : "+"getOnlineSkin OnlineMode skinUrl="+skinUrl);			if (skinUrl != null					&& !skinUrl.isEmpty()) {				try {					URL url = new URL(skinUrl);					bufferedimage = ImageIO.read(url);					Modchu_Debug.mlDebug(""+username + " : "+"getOnlineSkin OnlineMode.image ok.");				} catch (IOException ioexception) {					StringBuilder s1 = (new StringBuilder()).append("Failed to read a player texture from a URL for ").append(skinUrl);					Modchu_Debug.lDebug(s1.toString());					if (ioexception != null) {						Modchu_Debug.mlDebug("");						Modchu_Debug.mlDebug(ioexception.getMessage());					}				}			} else {				Modchu_Debug.lDebug(""+username + " : "+"getOnlineSkin OnlineMode skinUrl == null !!");				Modchu_Debug.lDebug(""+username + " : "+"getOnlineSkin skinMode="+getSkinModeString(skinMode));			}		} else {			Modchu_Debug.lDebug(""+username + " : "+"getOnlineSkin else isPlayer="+isPlayer);			if (isPlayer) Modchu_Debug.lDebug(""+username + " : "+"getOnlineSkin else PFLM_GuiMaster.modeOnline="+PFLM_GuiMaster.getChangeModeString(PFLM_GuiMaster.modeOnline));			Modchu_Debug.lDebug(""+username + " : "+"getOnlineSkin else skinMode="+getSkinModeString(skinMode));		}		return bufferedimage;	}	public String getSkinUrl(PFLM_ModelData modelData, Object entity) {		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		Modchu_Debug.mDebug("getSkinUrl skinMode="+(getSkinModeString(skinMode)));		if (skinMode == skinMode_online				| skinMode == skinMode_PlayerOnline				| (skinMode == skinMode_Player				&& PFLM_ConfigData.changeMode == PFLM_GuiMaster.modeOnline)) ;		else return null;		Class AbstractClientPlayer = Modchu_Reflect.loadClass("AbstractClientPlayer");		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);;		String userName = getUserName(modelData, entity);		if (userName != null				 && !userName.isEmpty()) ;else return null;		return Modchu_CastHelper.String(Modchu_Main.getMinecraftVersion() < 179				&& Modchu_Main.getMinecraftVersion() > 159 ? Modchu_Reflect.invokeMethod(AbstractClientPlayer, "func_110300_d", "getSkinUrl", new Class[]{ String.class }, entity, new Object[]{ userName }) :					(new StringBuilder()).append("http://skins.minecraft.net/MinecraftSkins/").append(userName).append(".png").toString());	}	public String getUserName(Object entity) {		PFLM_ModelData modelData = (PFLM_ModelData) getPlayerData(entity);		return getUserName(modelData, entity);	}	public String getUserName(PFLM_ModelData modelData, Object entity) {		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);;		String userName = null;		String username = Modchu_AS.getString(Modchu_AS.userName, entityPlayerCheck(entity) ? entity : thePlayer);		if (Modchu_Debug.debugPlayerName != null) {			userName = isPlayerCheck(modelData, entity) ? Modchu_Debug.debugPlayerName : skinMode == skinMode_PlayerOnline					| (skinMode == skinMode_Player					&& PFLM_ConfigData.changeMode == PFLM_GuiMaster.modeOnline) ? Modchu_Debug.debugPlayerName : username;		} else {			userName = skinMode == skinMode_PlayerOnline					| (skinMode == skinMode_Player					&& PFLM_ConfigData.changeMode == PFLM_GuiMaster.modeOnline) ? Modchu_AS.getString(Modchu_AS.userName, thePlayer) : username;		}		return userName;	}	public void modelInit(Object entity, String s) {		PFLM_ModelData modelData = (PFLM_ModelData) getPlayerData(entity);		modelInit(entity, modelData, s, false);	}	public void modelInit(Object entity, PFLM_ModelData modelData, String s) {		modelInit(entity, modelData, s, false);	}	public void modelInit(Object entity, PFLM_ModelData modelData, String s, boolean debug) {		//Modchu_Debug.mlDebug("modelInit s="+s);		if (modelData != null				&& entity != null) ;else {			if (modelData != null) ;else Modchu_Debug.mDebug("modelInit modelData == null !!");			if (entity != null) ;else Modchu_Debug.mDebug("modelInit entity == null !!");			return;		}		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		if (s == null				| (s != null				&& s.isEmpty())				| (ModchuModel_Main.checkTexturePackege(s, modelData.getCapsValueInt(modelData.caps_maidColor)) == null)				&& (skinMode != skinMode_online				&& skinMode != skinMode_PlayerOnline				&& skinMode != skinMode_Player)) {			Modchu_Debug.mDebug("modelInit textureNameDefaultSetting s="+s + " skinMode="+getSkinModeString(skinMode));			s = textureNameDefaultSetting(modelData, entity);		}		if (s == null				| (s != null				&& s.isEmpty())) {			if (!entityPlayerCheck(entity)) s = "default";			else throw new RuntimeException("PFLM_RenderPlayerMaster textureName null error !!");		}		Object[] models = ModchuModel_Main.modelNewInstance(entity, s, false, true);		if (debug) {			Modchu_Debug.mlDebug("modelInit s="+s);			Modchu_Debug.mlDebug("modelInit skinMode="+getSkinModeString(skinMode));		}		if (models != null				&& models[0] instanceof MultiModelBaseBiped) {			if (debug) Modchu_Debug.mlDebug("modelInit models[0] != null ? "+(models[0] != null));		} else {			if (debug) Modchu_Debug.mlDebug("modelInit !MultiModelBaseBiped");			if (isPlayerCheck(modelData, entity)					&& PFLM_ConfigData.textureName.indexOf("_") > -1) PFLM_ConfigData.textureName = "default";			if (((String) modelData.getCapsValue(modelData.caps_textureName)).indexOf("_") > -1) modelData.setCapsValue(modelData.caps_textureName, "default");			models = ModchuModel_Main.modelNewInstance(entity, ((String) modelData.getCapsValue(modelData.caps_textureName)), false, true);			if (models != null) ;			else {				if (debug) Modchu_Debug.mlDebug("modelInit 2 models = null !! textureName="+modelData.getCapsValue(modelData.caps_textureName));				if (isPlayerCheck(modelData, entity)) PFLM_ConfigData.textureName = "default";				modelData.setCapsValue(modelData.caps_textureName, "default");				models = ModchuModel_Main.modelNewInstance(entity, ((String) modelData.getCapsValue(modelData.caps_textureName)), false, true);				if (models != null) ;				else if (debug) Modchu_Debug.mlDebug("modelInit 3 models = null !! textureName="+modelData.getCapsValue(modelData.caps_textureName));			}		}		Object o = models != null				&& models[0] != null ? models[0] : new MultiModel(0.0F);		if (o != null) ;else {			throw new RuntimeException("modelInit set Model == null !!");		}		Modchu_Reflect.setFieldObject(ModchuModel_ModelBaseSoloReplacePoint.class, "model", modelData.modelMain, o);		modelData.setCapsValue(modelData.caps_Entity, entity);		modelTextureReset(entity, modelData, s);		if (debug) {			if (models != null && models[0] != null) Modchu_Debug.mlDebug("modelInit models[0]="+models[0]);			Modchu_Debug.mlDebug("modelInit s="+s);			Modchu_Debug.mlDebug("modelInit textureName="+modelData.getCapsValue(modelData.caps_textureName));			Modchu_Debug.mlDebug("modelInit color="+modelData.getCapsValueInt(modelData.caps_maidColor));		}		modelData.setCapsValue(modelData.caps_changeModelFlag, true);		//Modchu_Debug.mlDebug("modelInit end.s="+s);	}	public boolean isPlayerCheck(PFLM_ModelData modelData, Object entity) {		return modelData.getCapsValueBoolean(modelData.caps_isPlayer)				| !entityPlayerCheck(entity);	}	public void modelArmorInit(Object entity, String s) {		PFLM_ModelData modelData = (PFLM_ModelData) getPlayerData(entity);		modelArmorInit(entity, modelData, s, false);	}	public void modelArmorInit(Object entity, PFLM_ModelData modelData, String s) {		modelArmorInit(entity, modelData, s, false);	}	public void modelArmorInit(Object entity, PFLM_ModelData modelData, String s, boolean debug) {		if (modelData != null) ;else return;		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		boolean isBiped = false;		if (modelData.modelMain != null				&& modelData.modelMain.model != null) {			isBiped = PFLM_Main.bipedCheck(modelData.modelMain.model);		}		if (!isBiped) s = ModchuModel_Main.textureNameCheck(s);		if (s == null				| (s != null && s.isEmpty())				| (ModchuModel_Main.checkTextureArmorPackege(s) == null)				&& (skinMode != skinMode_online				&& skinMode != skinMode_PlayerOnline				&& skinMode != skinMode_Player)) {			//Modchu_Debug.mDebug(""+entityplayer.username+" : "+"modelArmorInit s="+s+" modelData.getCapsValueInt(modelData.caps_skinMode)="+modelData.getCapsValueInt(modelData.caps_skinMode));			s = textureArmorNameDefaultSetting(modelData, entity);		}		if (s == null				| (s != null				&& s.isEmpty())) {			if (!entityPlayerCheck(entity)) s = "default";			else throw new RuntimeException("PFLM_RenderPlayerMaster textureArmorName null error !!");		}		if (isBiped				&& (s == null				| (s != null				&& s.isEmpty())				| s.equalsIgnoreCase("default")				| s.equalsIgnoreCase("erasearmor"))) s = "_Biped";		Object[] models = ModchuModel_Main.modelNewInstance(entity, s, false, true);		if (models != null) ;else {			if (isPlayerCheck(modelData, entity)) PFLM_ConfigData.textureArmorName = "default";			modelData.setCapsValue(modelData.caps_textureArmorName, "default");			models = ModchuModel_Main.modelNewInstance(entity, PFLM_ConfigData.textureArmorName, true, true);		}		float[] f1 = ModchuModel_Main.getArmorModelsSize(models[0]);		if (debug) Modchu_Debug.mlDebug("modelArmorInit s="+s + " models[1] != null ? "+(models[1] != null));		if (models != null				&& models[1] != null) ;else {			models = ModchuModel_Main.modelNewInstance(isBiped ? "_Biped" : null, false);			f1 = ModchuModel_Main.getArmorModelsSize(models[0]);		}		if (PFLM_Main.isSmartMoving) {			Modchu_Reflect.setFieldObject(ModchuModel_ModelBaseDuoReplacePoint.class, "modelInner", modelData.modelFATT, models[1]);			Modchu_Reflect.setFieldObject(ModchuModel_ModelBaseDuoReplacePoint.class, "modelOuter", modelData.modelFATT, models[2]);		} else {			Modchu_Reflect.setFieldObject(ModchuModel_ModelBaseDuoReplacePoint.class, "modelInner", modelData.modelFATT, models != null && models[1] != null ? models[1] : !isBiped ? new MultiModel(f1[0]) : new MultiModel_Biped(f1[0]));			Modchu_Reflect.setFieldObject(ModchuModel_ModelBaseDuoReplacePoint.class, "modelOuter", modelData.modelFATT, models != null && models[2] != null ? models[2] : !isBiped ? new MultiModel(f1[1]) : new MultiModel_Biped(f1[1]));		}		//modelTextureArmorReset(modelData, s);	}	public String textureNameDefaultSetting(PFLM_ModelData modelData, Object entity) {		String s = ModchuModel_Main.textureNameCheck(null);		if (isPlayerCheck(modelData, entity)) PFLM_ConfigData.textureName = s;		modelData.setCapsValue(modelData.caps_textureName, s);		return s;	}	public String textureArmorNameDefaultSetting(PFLM_ModelData modelData, Object entity) {		String s = ModchuModel_Main.textureNameCheck(null);		if (isPlayerCheck(modelData, entity)) PFLM_ConfigData.textureArmorName = s;		modelData.setCapsValue(modelData.caps_textureArmorName, s);		return s;	}	public void textureBipedDefaultSetting(PFLM_ModelData modelData) {		textureBipedDefaultSetting(modelData, false);	}	public void textureBipedDefaultSetting(PFLM_ModelData modelData, boolean b) {		String s = b ? "_Biped64" :"_Biped";		//if (isPlayerCheck(modelData, entity)) {		//PFLM_ConfigData.textureName = s;		//PFLM_ConfigData.textureArmorName = s;		//}		modelData.setCapsValue(modelData.caps_textureName, s);		modelData.setCapsValue(modelData.caps_textureArmorName, s);		Modchu_Debug.lDebug("textureBipedDefaultSetting textureName ="+(String) modelData.getCapsValue(modelData.caps_textureName));	}	public void allModelTextureReset(Object entity) {		PFLM_ModelData modelData = (PFLM_ModelData) getPlayerData(entity);		allModelTextureReset(entity, modelData);	}	public void allModelTextureReset(Object entity, PFLM_ModelData modelData) {		modelTextureReset(entity, modelData);		//modelTextureArmorReset(modelData);	}	public void modelTextureReset(Object entity, PFLM_ModelData modelData) {		modelTextureReset(entity, modelData, (String) modelData.getCapsValue(modelData.caps_textureName));	}	public void modelTextureReset(Object entity, PFLM_ModelData modelData, String s) {		//Modchu_Debug.mDebug("modelTextureReset s="+s+" entity="+entity);		Object o = null;		int version = Modchu_Main.getMinecraftVersion();		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		Class AbstractClientPlayer = Modchu_Reflect.loadClass("AbstractClientPlayer");		String username = entityPlayerCheck(entity) ? Modchu_AS.getString(Modchu_AS.userName, entity) : null;		if (skinMode == skinMode_online				&& !modelData.getCapsValueBoolean(modelData.caps_localFlag)) {			//Modchu_Debug.mDebug("modelTextureReset skinMode_online && localFlag return.");			return;		}		//Modchu_Debug.mDebug("modelTextureReset skinMode="+(getSkinModeString(skinMode)));		//Modchu_Debug.mDebug("modelTextureReset localFlag="+(modelData.getCapsValueBoolean(modelData.caps_localFlag)));		if (modelData.getCapsValueBoolean(modelData.caps_freeVariable, "skinChar")) {			o = steveTexture;		} else if (AbstractClientPlayer.isInstance(entity)				&& (version > 159						&& (isPlayerCheck(modelData, entity)								&& PFLM_ConfigData.changeMode == PFLM_GuiMaster.modeOnline)								&& skinMode != skinMode_local)								| (!isPlayerCheck(modelData, entity)										&& (skinMode == skinMode_online										| skinMode == skinMode_PlayerOnline										| (skinMode == skinMode_Player										&& PFLM_ConfigData.changeMode == PFLM_GuiMaster.modeOnline)))) {			Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);;			String userName = getUserName(modelData, entity);			o = Modchu_Reflect.invokeMethod(AbstractClientPlayer, "func_110311_f", "getLocationSkin", new Class[]{ String.class }, skinMode == skinMode_PlayerOnline					| skinMode == skinMode_Player ? thePlayer : entity, new Object[]{ userName });			if (!isPlayerCheck(modelData, entity)					&& (skinMode == skinMode_online					| skinMode == skinMode_PlayerOnline					| (skinMode == skinMode_Player					&& PFLM_ConfigData.changeMode == PFLM_GuiMaster.modeOnline))) {				o = Modchu_Reflect.invokeMethod(AbstractClientPlayer, "func_110306_p", "getLocationSkin", skinMode == skinMode_PlayerOnline						| skinMode == skinMode_Player ? thePlayer : entity);			}			//Modchu_Debug.lDebug(""+username + " : "+"modelTextureReset o="+o + " skinMode="+getSkinModeString(skinMode));		} else {			o = ModchuModel_Main.textureManagerGetTexture(s, modelData.getCapsValueInt(modelData.caps_maidColor));			//Modchu_Debug.lDebug("modelTextureReset else o="+o);			//Modchu_Debug.lDebug("modelTextureReset else skinMode="+getSkinModeString(skinMode));			//Modchu_Debug.lDebug("modelTextureReset else entity.getClass()="+entity.getClass());			//Modchu_Debug.lDebug("modelTextureReset else s="+s+" maidColor="+modelData.getCapsValueInt(modelData.caps_maidColor));			//Modchu_Debug.mDebug(""+username+" : "+"modelTextureReset entity == thePlayer ?"+(entity == thePlayer));		}		//Modchu_Debug.mDebug("modelTextureReset end o="+o);		setResourceLocation(modelData, entity, 0, o);	}	public int playerHandednessSetting() {		return PFLM_ConfigData.handednessMode == -1 ? rnd.nextInt(2) : PFLM_ConfigData.handednessMode;	}	public int othersPlayerHandednessSetting() {		return PFLM_ConfigData.othersHandednessMode == -1 ? rnd.nextInt(2) : PFLM_ConfigData.othersHandednessMode;	}	public int othersPlayerIndividualHandednessSetting(int i) {		return i == -1 ? rnd.nextInt(2) : i;	}	public PFLM_ModelData checkSkin(Object entity, BufferedImage bufferedimage, PFLM_ModelData modelData) {		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);;		String username = Modchu_AS.getString(Modchu_AS.userName, entity);		modelData.setCapsValue(modelData.caps_isPlayer, username == Modchu_AS.getString(Modchu_AS.userName, thePlayer));		if (isPlayerCheck(modelData, entity)				&& PFLM_ConfigData.changeMode == PFLM_GuiMaster.modeOffline				| modelData.getCapsValueInt(modelData.caps_skinMode) == skinMode_offline) {			//Modchu_Debug.lDebug(""+entityplayer.username+" : "+"checkSkin skinMode_offline");			if (PFLM_ConfigData.textureName.equals("_Biped")) {				PFLM_ConfigData.textureName = PFLM_ConfigData.textureArmorName = "default";			}			modelData.setCapsValue(modelData.caps_maidColor, PFLM_ConfigData.maidColor);			modelData.setCapsValue(modelData.caps_skinMode, skinMode_offline);			modelData.setCapsValue(modelData.caps_textureName, PFLM_ConfigData.textureName);			modelData.setCapsValue(modelData.caps_textureArmorName, PFLM_ConfigData.textureArmorName);			modelInit(entity, modelData, (String) modelData.getCapsValue(modelData.caps_textureName));			modelArmorInit(entity, modelData, (String) modelData.getCapsValue(modelData.caps_textureArmorName));			return checkModelData(modelData);		}		if (bufferedimage == null) {			Modchu_Debug.lDebug(""+username + " : "+"checkSkin bufferedimage == null");			//modelData.setCapsValue(modelData.caps_skinMode, skinMode_char);			textureBipedDefaultSetting(modelData, modelData.getCapsValueBoolean(modelData.caps_freeVariable, "skinChar")					&& steveTextureWidth == steveTextureHeight);			modelInit(entity, modelData, (String) modelData.getCapsValue(modelData.caps_textureName));			modelArmorInit(entity, modelData, (String) modelData.getCapsValue(modelData.caps_textureArmorName));			return checkModelData(modelData);		}		if (!entityPlayerCheck(entity)) {			modelData.setCapsValue(modelData.caps_freeVariable, "bufferedimage", bufferedimage);		}		modelData.setCapsValue(modelData.caps_isActivated, true);		Object[] s = checkimage(bufferedimage);		boolean localflag = (Boolean) s[0];		boolean returnflag = (Boolean) s[5];		if (!returnflag) modelData.setCapsValue(modelData.caps_textureArmorName, (String) s[2]);		int maidcolor = (Integer) s[3];		//Object texture = s[1];		String textureName = (String) s[4];		int handedness = (Integer) s[6];		float modelScale = (Float) s[7];		if (localflag) {			modelData.setCapsValue(modelData.caps_localFlag, true);			modelData.setCapsValue(modelData.caps_skinMode, skinMode_local);			Modchu_Debug.lDebug(""+username + " : "+"localflag maidcolor = "+maidcolor);		} else {			localBindTextureSetting(modelData, bufferedimage, entity);		}		if (returnflag) {			Modchu_Debug.lDebug(""+username + " : "+"returnflag");			textureBipedDefaultSetting(modelData, bufferedimage.getWidth() == bufferedimage.getHeight());			modelInit(entity, modelData, (String) modelData.getCapsValue(modelData.caps_textureName), true);			modelArmorInit(entity, modelData, (String) modelData.getCapsValue(modelData.caps_textureArmorName));			if (bufferedimage.getWidth() != 64					| bufferedimage.getHeight() != 32) localBindTextureSetting(modelData, bufferedimage, entity);			return checkModelData(modelData);		}		if (isPlayerCheck(modelData, entity)) {			PFLM_ConfigData.textureName = textureName;			PFLM_ConfigData.maidColor = maidcolor;			PFLM_ConfigData.textureArmorName = (String) modelData.getCapsValue(modelData.caps_textureArmorName);		}		modelData.setCapsValue(modelData.caps_textureName, textureName);		modelData.setCapsValue(modelData.caps_maidColor, maidcolor);		Modchu_Debug.lDebug(""+username + " : "+"checkSkin textureName = "+textureName);		bufferedimage.flush();		if (textureName != null) modelInit(entity, modelData, textureName);		Modchu_Debug.lDebug(""+username + " : "+"checkSkin Armor = "+s[2]);		if (modelData.getCapsValue(modelData.caps_textureArmorName) != null) modelArmorInit(entity, modelData, (String) modelData.getCapsValue(modelData.caps_textureArmorName));		Modchu_Debug.lDebug(""+username + " : "+"modelData.textureName = "+textureName);		modelData.setCapsValue(modelData.caps_dominantArm, handedness);		modelData.setCapsValue((MultiModelBaseBiped) modelData.modelMain.model, modelData.caps_dominantArm, handedness);		Modchu_Debug.lDebug(""+username + " : "+"localflag handedness = "+handedness + " Random=-1 Right=0 Left=1");		modelData.setCapsValue(modelData.caps_modelScale, modelScale);		Modchu_Debug.lDebug(""+username + " : "+"localflag modelScale = "+modelScale);		if (isPlayerCheck(modelData, entity)) {			PFLM_ConfigData.handednessMode = handedness;			PFLM_ConfigData.modelScale = modelScale;		}		Modchu_Debug.lDebug(""+username + " : "+"checkSkin ok.return");		return checkModelData(modelData);	}	private void localBindTextureSetting(PFLM_ModelData modelData, BufferedImage bufferedimage, Object entity) {		modelData.setCapsValue(modelData.caps_localFlag, false);		ModchuModel_RenderEngine.instance.bindBufferedImage(PFLM_RenderMasterBase.localBindTextureName, bufferedimage);		setResourceLocation(modelData, entity, 0, bufferedimage);	}	public PFLM_ModelData checkModelData(PFLM_ModelData modelData) {		//ぬるぽ及び問題が無いかのチェック		Modchu_Debug.mlDebug("checkModelData username="+Modchu_AS.getString(Modchu_AS.userName, modelData.getCapsValue(modelData.caps_Entity)));		Modchu_Debug.mlDebug("checkModelData textureName="+modelData.getCapsValue(modelData.caps_textureName));		Modchu_Debug.mlDebug("checkModelData textureArmorName="+modelData.getCapsValue(modelData.caps_textureArmorName));		Modchu_Debug.mlDebug("checkModelData maidColor="+modelData.getCapsValueInt(modelData.caps_maidColor));		Modchu_Debug.mlDebug("checkModelData modelScale="+modelData.getCapsValueFloat(modelData.caps_modelScale));		Modchu_Debug.mlDebug("checkModelData skinMode="+getSkinModeString(modelData.getCapsValueInt(modelData.caps_skinMode)));		Modchu_Debug.mlDebug("checkModelData modelData.modelMain="+modelData.modelMain);		Modchu_Debug.mlDebug("checkModelData modelData.modelMain.model="+(modelData.modelMain != null ? modelData.modelMain.model : null));		Modchu_Debug.mlDebug("checkModelData modelData.modelFATT="+modelData.modelFATT);		Modchu_Debug.mlDebug("checkModelData modelData.modelFATT.modelInner="+(modelData.modelFATT != null ? modelData.modelFATT.modelInner : null));		Modchu_Debug.mlDebug("checkModelData modelData.modelFATT.modelOuter="+(modelData.modelFATT != null ? modelData.modelFATT.modelOuter : null));		Modchu_Debug.mlDebug("checkModelData getResourceLocation(0)="+getResourceLocation(modelData, null, 0));		boolean err = false;		ArrayList<String> list = new ArrayList();		list.add("checkModelData Error Reporting.");		if (modelData.modelMain == null) err = checkModelDataAddList(list, "checkModelData modelData.modelMain null !!");		else if (modelData.modelMain.model == null) err = checkModelDataAddList(list, "checkModelData modelData.modelMain.model null !!");		if (modelData.modelFATT == null) err = checkModelDataAddList(list, "checkModelData modelData.modelFATT null !!");		else {			if (modelData.modelFATT.modelInner == null) err = checkModelDataAddList(list, "checkModelData modelData.modelFATT.modelInner null !!");			if (modelData.modelFATT.modelOuter == null) err = checkModelDataAddList(list, "checkModelData modelData.modelFATT.modelOuter null !!");		}		if (getResourceLocation(modelData, null, 0) == null) err = checkModelDataAddList(list, "checkModelData ResourceLocation, 0 null !!");		if (err) {			list.add("checkModelData error textureName="+modelData.getCapsValue(modelData.caps_textureName));			list.add("checkModelData error textureArmorName="+modelData.getCapsValue(modelData.caps_textureArmorName));			list.add("checkModelData error color="+modelData.getCapsValue(modelData.caps_maidColor));			list.add("checkModelData error skinMode="+getSkinModeString(modelData.getCapsValueInt(modelData.caps_skinMode)));			for (int i = 0; i < list.size(); i++) {				Modchu_Debug.lDebug(list.get(i));			}		} else {			Modchu_Debug.lDebug("checkModelData check ok.");		}		Modchu_Debug.lDebug("------PFLM_ModelData init end.------");		return modelData;	}	public String getSkinModeString(int i) {		String s = null;		switch (i) {		case 0:			s = "skinMode_online";			break;		case 1:			s = "skinMode_local";			break;		case 2:			s = "skinMode_char";			break;		case 3:			s = "skinMode_offline";			break;		case 4:			s = "skinMode_Player";			break;		case 5:			s = "skinMode_OthersSettingOffline";			break;		case 6:			s = "skinMode_PlayerOffline";			break;		case 7:			s = "skinMode_PlayerOnline";			break;		case 8:			s = "skinMode_PlayerLocalDat";			break;		case 9:			s = "skinMode_Random";			break;		case 10:			s = "skinMode_OthersIndividualSettingOffline";			break;		}		return s;	}	public boolean checkModelDataAddList(ArrayList list, String s) {		list.add(s);		return true;	}	public Object[] checkimage(BufferedImage bufferedimage) {		Object[] object = new Object[8];		// 0 localflag		object[0] = false;		// 1 Texture		object[1] = null;		// 2 modelArmorName		object[2] = "";		// 3 maidcolor		object[3] = 0;		// 4 TextureName		object[4] = "";		// 5 return flag		object[5] = false;		// 6 handedness		object[6] = 0;		// 7 modelScale		object[7] = 0.9375F;		int r = 0;		int g = 0;		int b = 0;		int a = 0;		int checkX = 0;		int checkY = 0;		int[] c1;		boolean checkPointUnder = false;		int imageWidth = bufferedimage.getWidth();		int imageHeight = bufferedimage.getHeight();		do {			checkX = imageWidth - 1;			checkY = 0;			c1 = checkImageColor(bufferedimage, checkX, checkY);			r = c1[0];			g = c1[1];			b = c1[2];			a = c1[3];			checkY = 1;			if (r != 255 | g != 0 | b != 0 | a != 255) {				Modchu_Debug.lDebug((new StringBuilder()).append("checkimage Out r255 g0 b0 a255.x=63,y=0 r=").append(r).append(" g=").append(g).append(" b=").append(b).append(" a=").append(a).toString());				checkPointUnder = true;				checkY = 31;				c1 = checkImageColor(bufferedimage, checkX, checkY);				r = c1[0];				g = c1[1];				b = c1[2];				a = c1[3];				if (r != 255 | g != 0 | b != 0 | a != 255) {					Modchu_Debug.lDebug((new StringBuilder()).append("checkimage Out r255 g0 b0 a255.x=").append(checkX).append(",y=").append(checkY).append(" r=").append(r).append(" g=").append(g).append(" b=").append(b).append(" a=").append(a).toString());					object[5] = true;					break;				}				checkY = 30;			}			c1 = checkImageColor(bufferedimage, checkX, checkY);			r = c1[0];			g = c1[1];			b = c1[2];			a = c1[3];			object[0] = false;			if (r != 255 | g != 255 | b != 0 | a != 255) {				if (r != 255 | g != 0 | b != 255 | a != 255) {					Modchu_Debug.lDebug((new StringBuilder()).append("checkimage Out r255 g0 b255 a255.x = 63,y = 1 r = ").append(r).append(" g = ").append(g).append(" b = ").append(b).append(" a = ").append(a).toString());					object[5] = true;					break;				} else {					Modchu_Debug.lDebug("checkimage localflag = true");					object[0] = true;				}			}			checkX = imageWidth - 2;			checkY = checkPointUnder ? imageHeight - 1 : 0;			c1 = checkImageColor(bufferedimage, checkX, checkY);			r = 255 - c1[0];			g = 255 - c1[1];			b = 255 - c1[2];			a = 255 - c1[3];			Modchu_Debug.mDebug("checkimage r="+r + " g="+g + " b="+b + " a="+a);			break;		} while (true);		if (!(Boolean) object[5]) {			if (g < PFLM_Main.textureList.size()) {				object[2] = PFLM_Main.textureList.get(g);				//Modchu_Debug.mDebug("object[2]="+object[2]);			}			object[3] = r;			if (b < PFLM_Main.textureList.size()) {				object[4] = PFLM_Main.textureList.get(b);				Modchu_Debug.mDebug("checkimage object[4]="+object[4] + " b="+b);				object[1] = ModchuModel_Main.textureManagerGetTexture(PFLM_Main.textureList.get(b), r);			}		}		checkX = imageWidth - 2;		checkY = checkPointUnder ? imageHeight - 2 : 1;		c1 = checkImageColor(bufferedimage, checkX, checkY);		object[6] = c1[0] == 255 ? 0 : c1[0] == 0 ? 1 : -1;		object[7] = (255 - c1[1]) * (0.9375F / 24F);		//Modchu_Debug.mDebug((new StringBuilder()).append("checkimage modelScale color c1[1] = ").append(c1[1]).toString());		b = c1[2];		a = c1[3];		return object;	}	public int[] checkImageColor(BufferedImage bufferedimage, int i, int j) {		Color color = new Color(bufferedimage.getRGB(i, j), true);		int[] i1 = new int[4];		i1[0] = color.getRed();		i1[1] = color.getGreen();		i1[2] = color.getBlue();		i1[3] = color.getAlpha();		return i1;	}	public void sitSleepResetCheck(PFLM_ModelData modelData, Object entity) {		if (!ModchuModel_ModelCapsHelper.getCapsValueBoolean(modelData, modelData.caps_isSitting)				&& !ModchuModel_ModelCapsHelper.getCapsValueBoolean(modelData, modelData.caps_isSleeping)) return;		float moveForward = (Float) Modchu_Reflect.getFieldObject(entity.getClass(), "field_70701_bs", "moveForward", entity);		float moveStrafing = (Float) Modchu_Reflect.getFieldObject(entity.getClass(), "field_70702_br", "moveStrafing", entity);		float f1 = moveForward * moveForward + moveStrafing * moveStrafing;		float f2 = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseLimbSwing, entity) - ModchuModel_ModelCapsHelper.getCapsValueFloat(modelData, modelData.caps_tempLimbSwing);		if (Modchu_AS.getBoolean(Modchu_AS.entityLivingBaseIsJumping, entity)				| Modchu_AS.getBoolean(Modchu_AS.entityPlayerIsPlayerSleeping, entity)				| ((ModchuModel_ModelCapsHelper.getCapsValueBoolean(modelData, modelData.caps_isSitting)						&& (f1 > 0.20000000000000001D								| f2 != 0.0F)))								| ((ModchuModel_ModelCapsHelper.getCapsValueBoolean(modelData, modelData.caps_isSleeping)										&& (f1 > 0.0F												| f2 != 0.0F)))) {			//Modchu_Debug.mDebug("Sitting 自動OFF");			modelData.modelMain.setCapsValue(modelData.caps_isRiding, false);			modelData.setCapsValue(modelData.caps_isSitting, false);			modelData.setCapsValue(modelData.caps_isSleeping, false);		}		if (Modchu_AS.getBoolean(Modchu_AS.entityIsRiding, entity)				&& (modelData.getCapsValueBoolean(modelData.caps_isSitting)						| modelData.getCapsValueBoolean(modelData.caps_isSleeping))) {			modelData.setCapsValue(modelData.caps_isSitting, false);			modelData.setCapsValue(modelData.caps_isSleeping, false);		}		modelData.setCapsValue(modelData.caps_tempLimbSwing, Modchu_AS.getFloat(Modchu_AS.entityLivingBaseLimbSwing, entity));	}	public void waitModeSetting(PFLM_ModelData modelData, Object entity, float f) {		Object o = modelData != null				&& modelData.modelMain != null				&& modelData.modelMain.model != null ? modelData.modelMain.model.getCapsValue(modelData.caps_onGround) : null;		if (o != null				&& o instanceof float[]) ;else return;		float[] onGrounds = (float[]) o;		int i1 = ModchuModel_ModelCapsHelper.getCapsValueInt(modelData, modelData.caps_dominantArm);		//Modchu_Debug.dDebug("waitModeSetting "+onGrounds[i1]+" i1="+i1+" onGrounds[1]="+onGrounds[1]);		if (!ModchuModel_ModelCapsHelper.getCapsValueBoolean(modelData, modelData.caps_firstPerson)) {			if (PFLM_ConfigData.waitTime == 0					&& isPlayerCheck(modelData, entity)) {				if (PFLM_Main.isWait) {					if (((f != modelData.getCapsValueFloat(modelData.caps_isWaitF)							&& modelData.getCapsValueBoolean(modelData.caps_isWaitFSetFlag))							| onGrounds[i1] > 0)							| (modelData.getCapsValueBoolean(modelData.caps_isWait)									&& modelData.modelMain.model.isSneak)) {						modelData.setCapsValue(modelData.caps_isWait, false);						PFLM_Main.isWait = false;						modelData.setCapsValue(modelData.caps_isWaitTime, 0);						modelData.setCapsValue(modelData.caps_isWaitF, copyf(f));						modelData.setCapsValue(modelData.caps_isWaitFSetFlag, true);					} else {						if ((f != modelData.getCapsValueFloat(modelData.caps_isWaitF)								| onGrounds[i1] > 0)								| (modelData.getCapsValueBoolean(modelData.caps_isWait)										&& modelData.modelMain.model.isSneak)) {							//Modchu_Debug.mDebug("f != isWaitF");							modelData.setCapsValue(modelData.caps_isWait, false);							PFLM_Main.isWait = false;							modelData.setCapsValue(modelData.caps_isWaitTime, 0);							modelData.setCapsValue(modelData.caps_isWaitF, copyf(f));						}						if (!modelData.getCapsValueBoolean(modelData.caps_isWaitFSetFlag)) {							modelData.setCapsValue(modelData.caps_isWaitF, copyf(f));							modelData.setCapsValue(modelData.caps_isWaitFSetFlag, true);						}					}				}			} else {				int i = ModchuModel_ModelCapsHelper.getCapsValueBoolean(modelData, modelData.caps_isPlayer) ? PFLM_ConfigData.waitTime : PFLM_ConfigData.othersPlayerWaitTime;				if (!modelData.getCapsValueBoolean(modelData.caps_isWait) && !modelData.modelMain.model.isSneak && i > 0) {					modelData.setCapsValue(modelData.caps_isWaitTime, modelData.getCapsValueInt(modelData.caps_isWaitTime) + 1);					if (modelData.getCapsValueInt(modelData.caps_isWaitTime) > i) {						//Modchu_Debug.Debug("isWaitTime > i");						modelData.setCapsValue(modelData.caps_isWait, true);						if (isPlayerCheck(modelData, entity)) PFLM_Main.isWait = true;						modelData.setCapsValue(modelData.caps_isWaitTime, 0);						modelData.setCapsValue(modelData.caps_isWaitF, copyf(f));					}				}				if ((f != modelData.getCapsValueFloat(modelData.caps_isWaitF)						| onGrounds[i1] > 0)						| (modelData.getCapsValueBoolean(modelData.caps_isWait)								&& modelData.modelMain.model.isSneak)) {					//Modchu_Debug.Debug("f != isWaitF");					modelData.setCapsValue(modelData.caps_isWait, false);					if (ModchuModel_ModelCapsHelper.getCapsValueBoolean(modelData, modelData.caps_isPlayer)) PFLM_Main.isWait = false;					modelData.setCapsValue(modelData.caps_isWaitTime, 0);					modelData.setCapsValue(modelData.caps_isWaitF, copyf(f));				}			}		} else {			if (ModchuModel_ModelCapsHelper.getCapsValueBoolean(modelData, modelData.caps_isPlayer)) {				if (modelData.getCapsValueBoolean(modelData.caps_isWait)) {					//Modchu_Debug.Debug("firstPerson isWait false");					modelData.setCapsValue(modelData.caps_isWait, false);					if (isPlayerCheck(modelData, entity)) PFLM_Main.isWait = false;					modelData.setCapsValue(modelData.caps_isWaitTime, 0);					modelData.setCapsValue(modelData.caps_isWaitF, copyf(f));					if (PFLM_ConfigData.waitTime == 0) modelData.setCapsValue(modelData.caps_isWaitFSetFlag, true);				} else {					if (PFLM_ConfigData.waitTime == 0							&& !modelData.getCapsValueBoolean(modelData.caps_isWaitFSetFlag)) {						modelData.setCapsValue(modelData.caps_isWaitF, copyf(f));						modelData.setCapsValue(modelData.caps_isWaitFSetFlag, true);					}				}			}		}	}	public void skinMode_FalseSetting(Object entity, PFLM_ModelData modelData) {		modelData.setCapsValue(modelData.caps_skinMode, skinMode_online);	}	public void skinMode_PlayerSetting(Object entity, PFLM_ModelData modelData) {		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);		PFLM_ModelData modelData2 = (PFLM_ModelData) getPlayerData(thePlayer);		if (modelData2 != null) {			modelData.setCapsValue(modelData.caps_skinMode, skinMode_Player);			modelData.setCapsValue(modelData.caps_dominantArm, playerHandednessSetting());			modelData.setCapsValue(modelData.caps_modelScale, PFLM_ConfigData.modelScale);			modelData.setCapsValue(modelData.caps_textureName, modelData2.getCapsValue(modelData.caps_textureName));			modelData.setCapsValue(modelData.caps_textureArmorName, modelData2.getCapsValue(modelData.caps_textureArmorName));			modelData.setCapsValue(modelData.caps_maidColor, modelData2.getCapsValueInt(modelData.caps_maidColor));			if (modelData2.getCapsValueBoolean(modelData.caps_freeVariable, "skinChar")) {				textureBipedDefaultSetting(modelData, steveTextureWidth == steveTextureHeight);			}			modelInit(entity, modelData, (String) modelData.getCapsValue(modelData.caps_textureName));			modelArmorInit(entity, modelData, (String) modelData.getCapsValue(modelData.caps_textureArmorName));		}	}	public void skinMode_PlayerOnlineSetting(Object entity, PFLM_ModelData modelData) {		modelData.setCapsValue(modelData.caps_skinMode, skinMode_PlayerOnline);		modelData.setCapsValue(modelData.caps_dominantArm, playerHandednessSetting());		modelData.setCapsValue(modelData.caps_modelScale, PFLM_ConfigData.modelScale);	}	public void skinMode_PlayerOfflineSetting(Object entityplayer, PFLM_ModelData modelData) {/*		if (PFLM_ConfigData.textureName == null			| PFLM_ConfigData.textureName.isEmpty()) PFLM_ConfigData.textureName = "_Biped";		if (PFLM_ConfigData.textureArmorName == null			| PFLM_ConfigData.textureArmorName.isEmpty()) PFLM_ConfigData.textureArmorName = "_Biped";*/		modelData.setCapsValue(modelData.caps_maidColor, PFLM_ConfigData.maidColor);		//setResourceLocation(modelData, entityplayer, 0, Modchu_Main.textureManagerGetTexture(PFLM_ConfigData.textureName, modelData.getCapsValueInt(modelData.caps_maidColor)));		modelData.setCapsValue(modelData.caps_skinMode, skinMode_PlayerOffline);		modelData.setCapsValue(modelData.caps_dominantArm, playerHandednessSetting());		modelData.setCapsValue(modelData.caps_modelScale, PFLM_ConfigData.modelScale);		String s1 = PFLM_ConfigData.textureName;		modelInit(entityplayer, modelData, s1);		modelData.setCapsValue(modelData.caps_textureName, s1);		s1 = PFLM_ConfigData.textureArmorName;		modelData.setCapsValue(modelData.caps_textureArmorName, PFLM_ConfigData.textureArmorName);		modelArmorInit(entityplayer, modelData, s1);	}	public void skinMode_RandomSetting(Object entity, PFLM_ModelData modelData) {		String s3 = null;		Object s4 = null;		int i = 0;		for (int i1 = 0; s4 == null && i1 < 50; i1++) {			i = rnd.nextInt(16);			int j = 0;			if (ModchuModel_Main.getTextureManagerTexturesSize() > 0) {				j = rnd.nextInt(ModchuModel_Main.getTextureManagerTexturesSize());				s3 = ModchuModel_Main.getPackege(i, j);			} else {				s3 = ModchuModel_Main.textureNameCheck(null);			}			modelData.setCapsValue(modelData.caps_maidColor, i);			s4 = ModchuModel_Main.textureManagerGetTexture(s3, i);			if (i1 == 49) return;		}		Modchu_Debug.lDebug("Random modelPackege="+s3);		modelData.setCapsValue(modelData.caps_skinMode, skinMode_Random);		//setResourceLocation(modelData, entityplayer, 0, s4);		//Modchu_Debug.mDebug("Random s4="+s4);		String s1 = PFLM_Main.getArmorName(s3);		modelData.setCapsValue(modelData.caps_textureName, s3);		modelData.setCapsValue(modelData.caps_textureArmorName, s1);		modelData.setCapsValue(modelData.caps_maidColor, i);		modelInit(entity, modelData, s3);		modelArmorInit(entity, modelData, s1);	}	public void setHandedness(Object entity, int i) {		PFLM_ModelData modelData = (PFLM_ModelData) getPlayerData(entity);		if (i == -1) i = rnd.nextInt(2);		modelData.setCapsValue(modelData.caps_dominantArm, i);		if (modelData.modelMain != null				&& modelData.modelMain.model != null) modelData.modelMain.model.setCapsValue(modelData.caps_dominantArm, i);		if (isPlayerCheck(modelData, entity)) {			PFLM_Main.setFlipHorizontal(i == 0 ? false : true);			PFLM_Main.setLeftHandedness(i == 0 ? false : true);		}	}	public boolean getResetFlag() {		return resetFlag;	}	public void setResetFlag(boolean b) {		resetFlag = b;	}	public float copyf(float f) {		return f;	}	public Object getResourceLocation(Object entity) {		PFLM_ModelData modelData = (PFLM_ModelData) getPlayerData(entity);		return getResourceLocation(modelData, entity, 0);	}	public Object getResourceLocation(PFLM_ModelData modelData, Object entity) {		return getResourceLocation(modelData, entity, 0);	}	public Object getResourceLocation(Object entity, int i) {		ModchuModel_ModelDataBase modelData = getPlayerData(entity);		return getResourceLocation(modelData, entity, i);	}	public Object getResourceLocation(ModchuModel_ModelDataBase modelData, Object entity, int i) {		if (modelData != null) ;else return null;		if (modelData.getCapsValue(modelData.caps_ResourceLocation) != null) ;else {			modelData.setCapsValue(modelData.caps_ResourceLocation, new Object[3]);		}		return modelData.getCapsValue(modelData.caps_ResourceLocation, i);	}	public void setResourceLocation(Object entity, Object resourceLocation) {		ModchuModel_ModelDataBase modelData = getPlayerData(entity);		setResourceLocation(modelData, entity, 0, resourceLocation);	}	public void setResourceLocation(ModchuModel_ModelDataBase modelData, Object entity, Object resourceLocation) {		setResourceLocation(modelData, entity, 0, resourceLocation);	}	public void setResourceLocation(Object entity, int i, Object resourceLocation) {		ModchuModel_ModelDataBase modelData = getPlayerData(entity);		setResourceLocation(modelData, entity, i, resourceLocation);	}	public void setResourceLocation(ModchuModel_ModelDataBase modelData, Object entity, int i, Object resourceLocation) {		if (modelData.getCapsValue(modelData.caps_ResourceLocation) != null) ;else {			modelData.setCapsValue(modelData.caps_ResourceLocation, new Object[3]);		}		modelData.setCapsValue(modelData.caps_ResourceLocation, i, resourceLocation);	}	private boolean entityCheck(Object entity) {		return Modchu_Reflect.loadClass("Entity").isInstance(entity);	}	private boolean entityPlayerCheck(Object entity) {		return Modchu_Reflect.loadClass("EntityPlayer").isInstance(entity);	}	private boolean entityPlayerDummyCheck(Object entity) {		return entity instanceof Modchu_EntityPlayerDummy;	}}