package modchu.pflm;import java.io.File;import java.lang.reflect.Field;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.concurrent.ConcurrentHashMap;import org.lwjgl.opengl.GL11;import modchu.lib.Modchu_AS;import modchu.lib.Modchu_CastHelper;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_GuiTextFieldMaster;import modchu.lib.Modchu_IGuiSlot;import modchu.lib.Modchu_Main;import modchu.model.ModchuModel_CustomModel;import modchu.model.ModchuModel_ModelRenderer;import modchu.model.ModchuModel_TextureBoxBase;import modchu.model.ModchuModel_TextureManagerBase;import modchu.model.multimodel.base.MultiModelCustom;public class PFLM_GuiCustomModel extends PFLM_GuiModelViewMaster {	private final File cfgdir = new File(Modchu_AS.getFile(Modchu_AS.minecraftMcDataDir), "/config/CustomModel/");	private Modchu_IGuiSlot partsSlot;	private Modchu_IGuiSlot partsDetailSlot;	private Modchu_IGuiSlot addChildNameSlot;	private Modchu_IGuiSlot textureNameSlot;	private Modchu_GuiTextFieldMaster[] inputStringBox;	private int editBoxCount;	private int editBoxType;	private int[] editInt;	private float[] editFloat;	private int textureNameSlotSelected;	private ModchuModel_CustomModel customModel;	private static List addButtonList = new LinkedList();	private static ArrayList<String> textureNameList = new ArrayList<String>();	private static ArrayList<String> modelRendererNameList = new ArrayList<String>();	private static LinkedList<String> partsDetailSlotDrawString = new LinkedList<String>();	private static int maidColor;	private static int partsSlotSelected;	private static int partsDetailSlotSelected;	private static int addChildNameSlotSelected;	private static int partsDetailSlotDrawStringInitNunmer;	private static int customNumber;	private static float modelScale;	private static float editBoxSizeY;	private static float editBoxSizeX;	private static boolean isEdit;	private static boolean partsDetailSlotDrawStringInitFlag;	private static boolean editBoxInitFlag;	private static String textureName;	private static String textureArmorName;	public PFLM_GuiCustomModel(HashMap<String, Object> map) {		super(map);		if (modelScale == 0.0F) modelScale = 0.9375F;		partsSlotSelected = -1;		partsDetailSlotSelected = -1;		addChildNameSlotSelected = -1;		partsDetailSlotDrawStringInitNunmer = -1;		customNumber = 1;		drawEntitySetFlag = true;		isEdit = false;		partsDetailSlotDrawStringInitFlag = false;		editBoxInitFlag = false;		addButtonList.clear();		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		customModel = ((MultiModelCustom) modelData.models[0]).customModel;		setTextureValue();		reLoadModel(drawEntity, false, false);		PFLM_Main.changeColor(drawEntity);	}	@Override	public void initGui() {		List buttonList = Modchu_AS.getList(Modchu_AS.guiScreenButtonList, base);		int width = Modchu_AS.getInt(Modchu_AS.guiScreenWidth, base);		int height = Modchu_AS.getInt(Modchu_AS.guiScreenHeight, base);		buttonList.clear();		buttonList.addAll(addButtonList);		int x = width / 2;		int y = height / 2;		buttonList.add(newInstanceButton(200, width - 160, 10, 60, 15, "Save"));		buttonList.add(newInstanceButton(201, width - 100, 10, 60, 15, "Return"));		buttonList.add(newInstanceButton(205, width - 100, 35, 60, 15, "DeleteBox"));		buttonList.add(newInstanceButton(204, width - 160, 35, 60, 15, "AddBox"));		buttonList.add(newInstanceButton(202, 10, 10, 60, 15, "AddParts"));		buttonList.add(newInstanceButton(203, 70, 10, 60, 15, "Delete"));		if (partsSlot != null); else {			partsSlot = (Modchu_IGuiSlot) Modchu_Main.newModchuCharacteristicObject("Modchu_GuiSlot", PFLM_GuiSlot.class, this, 100, 15, 30, 30, 0);		}		if (partsDetailSlot != null); else {			partsDetailSlot = (Modchu_IGuiSlot) Modchu_Main.newModchuCharacteristicObject("Modchu_GuiSlot", PFLM_GuiSlot.class, this, 200, 15, width - 160, 60, 1);		}	}	@Override	public void updateScreen() {		try {			Thread.sleep(10L);		} catch (InterruptedException e) {		}	}	@Override	public void actionPerformed(Object guibutton) {		if (!Modchu_AS.getBoolean(Modchu_AS.guiButtonEnabled, guibutton)) {			return;		}		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		int id = Modchu_AS.getInt(Modchu_AS.guiButtonID, guibutton);		//Save		if(id == 200) {			File file = new File(cfgdir, (new StringBuilder()).append("CustomModel_").append(customNumber).append(".cfg").toString());			customModel.save(file);			Modchu_AS.set(Modchu_AS.minecraftDisplayGuiScreen, (Object[]) null);			//mc.displayGuiScreen(null);			return;		}		//Return		if(id == 201) {			Modchu_AS.set(Modchu_AS.minecraftDisplayGuiScreen, Modchu_Main.newModchuCharacteristicObject("Modchu_GuiModelView", PFLM_GuiMaster.class, popWorld));			//mc.displayGuiScreen(new PFLM_Gui(popWorld));			return;		}		//addParts		if(id == 202) {			customModel.addParts("newParts");		}		//delete		if(id == 203) {			customModel.deleteParts(partsSlotSelected);			Modchu_Debug.mDebug("customModel.partsMap.size()="+customModel.partsMap.size());			if (customModel.partsMap.size() == 0) {				partsDetailSlotDrawString.clear();				//partsDetailSlot = null;				initGui();			}		}		if(id == 202				| id == 203) {			isEdit = false;			editBoxInitFlag = false;			addChildNameSlot = null;			inputStringBox = null;			allPartsReInitSetting();			return;		}		//addBox		if(id == 204) {			customModel.addBox(partsSlotSelected);		}		//deleteBox		if(id == 205) {			customModel.deleteBox(partsSlotSelected);		}		if(id == 204				| id == 205) {			isEdit = false;			editBoxInitFlag = false;			addChildNameSlot = null;			inputStringBox = null;			//saveTempCustomModel();			return;		}		//BoxType		if(id > 999				&& id < 1999) {			int i1 = id - 1000;			ModchuModel_ModelRenderer modelRenderer = (ModchuModel_ModelRenderer) Modchu_Main.getMapValue(customModel.partsMap, i1);			byte boxType = (byte)(Modchu_CastHelper.Byte(modelRenderer.getFreeVariable("boxType")) + 1);			if (boxType > customModel.maxboxType) boxType = (byte) 0;			modelRenderer.setFreeVariable("boxType", boxType);			editBoxInitFlag = false;			addChildNameSlot = null;			inputStringBox = null;			saveTempCustomModel();		}		//partsSlot.actionPerformed(guibutton);	}	private void allPartsReInitSetting() {		customModel.init(null, 0.0F, 0.0F);	}	private void saveTempCustomModel() {		allPartsReInitSetting();	}	@Override	public void drawScreen(int i, int j, float f) {		base.superDrawDefaultBackground();		if (partsSlot != null) Modchu_AS.set("Gui", "drawScreen", partsSlot, i, j, f);		if (partsDetailSlot != null) Modchu_AS.set("Gui", "drawScreen", partsDetailSlot, i, j, f);		if (addChildNameSlot != null) Modchu_AS.set("Gui", "drawScreen", addChildNameSlot, i, j, f);		if (textureNameSlot != null) Modchu_AS.set("Gui", "drawScreen", textureNameSlot, i, j, f);		if (inputStringBox != null) {			for(int i1 = 0; i1 < inputStringBox.length; i1++) {				if (inputStringBox[i1] != null) {					inputStringBox[i1].drawTextBox();				}			}		}		if (textureNameSlot != null) Modchu_AS.set("GuiSlot", "clickDecision", textureNameSlot, i, j, f);		if (addChildNameSlot != null) Modchu_AS.set("GuiSlot", "clickDecision", addChildNameSlot, i, j, f);		if (partsDetailSlot != null) Modchu_AS.set("GuiSlot", "clickDecision", partsDetailSlot, i, j, f);		if (partsSlot != null) Modchu_AS.set("GuiSlot", "clickDecision", partsSlot, i, j, f);		//GL11.glPushMatrix();		//GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);		//GL11.glShadeModel(GL11.GL_FLAT);		//GL11.glEnable(GL11.GL_ALPHA_TEST);		//GL11.glDisable(GL11.GL_BLEND);		//GL11.glDisable(GL11.GL_LIGHTING);		//GL11.glDisable(GL11.GL_FOG);		//GL11.glDisable(32826 /*GL_RESCALE_NORMAL_EXT*/);		//GL11.glDisable(2903 /*GL_COLOR_MATERIAL*/);		base.superDrawScreen(i, j, f);		drawGuiContainerBackgroundLayer(f, i, j);		//GL11.glPopMatrix();	}	@Override	public void drawGuiContainerBackgroundLayer(float f, int i, int j) {		int width = Modchu_AS.getInt(Modchu_AS.guiScreenWidth, base);		int height = Modchu_AS.getInt(Modchu_AS.guiScreenHeight, base);		drawString("CustomModel Setting", width / 2 - 50, 10, 0xffffff);		StringBuilder s = (new StringBuilder()).append("Edit Custom Number : ");		s = s.append(customNumber);		drawString(s.toString(), width / 2 - 80, 20, 0xffffff);		if (drawEntitySetFlag) {			setTextureValue();			reLoadModel(drawEntity, false, false);			drawEntitySetFlag = false;		}		drawMobModel(i, j, width / 2 - 10, height / 2 + 50, -90, -50, 50F, 0.0F, -30F, -30F, -30F, -90F, true);	}	public void drawEditScreen(int showSelectionBoxLeft, int showSelectionBoxTop) {		//GL11.glPushMatrix();		int width = Modchu_AS.getInt(Modchu_AS.guiScreenWidth, base);		int height = Modchu_AS.getInt(Modchu_AS.guiScreenHeight, base);		showSelectionBoxTop = showSelectionBoxTop - 10;		editBoxSizeX = 160F;		editBoxSizeY = height - showSelectionBoxTop;		GL11.glDisable(GL11.GL_TEXTURE_2D);		Object tessellator = Modchu_AS.get(Modchu_AS.tessellatorInstance);		if (Modchu_Main.getMinecraftVersion() > 180) {			Modchu_AS.set(Modchu_AS.tessellatorStartDrawingQuads, tessellator, 7, Modchu_AS.get("DefaultVertexFormats", "field_181705_e"));		} else {			Modchu_AS.set(Modchu_AS.tessellatorStartDrawingQuads, tessellator);		}		Modchu_AS.set(Modchu_AS.tessellatorSetColorRGBA_I, tessellator, 0x22666666, 255);		Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)showSelectionBoxLeft, (double)showSelectionBoxTop + editBoxSizeY, 0.0D, 0.0D, 1.0D);		Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)showSelectionBoxLeft + editBoxSizeX, (double)showSelectionBoxTop + editBoxSizeY, 0.0D, 1.0D, 1.0D);		Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)showSelectionBoxLeft + editBoxSizeX, (double)showSelectionBoxTop, 0.0D, 1.0D, 0.0D);		Modchu_AS.set(Modchu_AS.tessellatorAddVertexWithUV, tessellator, (double)showSelectionBoxLeft, (double)showSelectionBoxTop, 0.0D, 0.0D, 0.0D);		Modchu_AS.set(Modchu_AS.tessellatorDraw, tessellator);		GL11.glEnable(GL11.GL_TEXTURE_2D);		editDrawString(showSelectionBoxLeft, showSelectionBoxTop);		//GL11.glPopMatrix();	}	private void editBoxSetting(int showSelectionBoxLeft, int showSelectionBoxTop) {		inputStringBox[0].xPos = showSelectionBoxLeft + 32;		inputStringBox[0].yPos = showSelectionBoxTop + 5;		inputStringBox[1].xPos = showSelectionBoxLeft + 100;		inputStringBox[1].yPos = showSelectionBoxTop + 5;		int j = 9;		int k = 0;		boolean flag = false;		Object guiButton;		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		if (customModel.partsMap != null				&& !customModel.partsMap.isEmpty()) {			int i = 0;			for (Entry<String, ModchuModel_ModelRenderer> en : customModel.partsMap.entrySet()) {				String key = en.getKey();				ModchuModel_ModelRenderer modelRenderer = en.getValue();				guiButton = addButtonList.get(i);				Modchu_AS.set("GuiButton", "xPosition", guiButton, showSelectionBoxLeft + 60);				Modchu_AS.set("GuiButton", "yPosition", guiButton, showSelectionBoxTop + 63 + k);				inputStringBox[j].xPos = showSelectionBoxLeft + 22;				inputStringBox[j].yPos = showSelectionBoxTop + 45 + k;				inputStringBox[j + 1].xPos = showSelectionBoxLeft + 90;				inputStringBox[j + 1].yPos = showSelectionBoxTop + 45 + k;				inputStringBox[j + 2].xPos = showSelectionBoxLeft + 22;				inputStringBox[j + 2].yPos = showSelectionBoxTop + 93 + k;				inputStringBox[j + 3].xPos = showSelectionBoxLeft + 22;				inputStringBox[j + 3].yPos = showSelectionBoxTop + 108 + k;				inputStringBox[j + 4].xPos = showSelectionBoxLeft + 22;				inputStringBox[j + 4].yPos = showSelectionBoxTop + 123 + k;				inputStringBox[j + 5].xPos = showSelectionBoxLeft + 90;				inputStringBox[j + 5].yPos = showSelectionBoxTop + 93 + k;				inputStringBox[j + 6].xPos = showSelectionBoxLeft + 90;				inputStringBox[j + 6].yPos = showSelectionBoxTop + 108 + k;				inputStringBox[j + 7].xPos = showSelectionBoxLeft + 90;				inputStringBox[j + 7].yPos = showSelectionBoxTop + 123 + k;				flag = i + 1 != modelRenderer.cubeList.size();				byte boxType = Modchu_CastHelper.Byte(modelRenderer.getFreeVariable("boxType"));				if (boxType != 2) {					inputStringBox[j + 8].xPos = showSelectionBoxLeft + 22;					inputStringBox[j + 8].yPos = showSelectionBoxTop + 150 + k;					inputStringBox[j + 9].xPos = showSelectionBoxLeft + 90;					inputStringBox[j + 9].yPos = showSelectionBoxTop + 150 + k;					j = j + 10;				} else {					j = j + 8;				}				if (flag) k += 145;				i++;			}		} else {			k = -15;		}		inputStringBox[2].xPos = showSelectionBoxLeft + 22;		inputStringBox[2].yPos = showSelectionBoxTop + 182 + k;		inputStringBox[3].xPos = showSelectionBoxLeft + 22;		inputStringBox[3].yPos = showSelectionBoxTop + 197 + k;		inputStringBox[4].xPos = showSelectionBoxLeft + 22;		inputStringBox[4].yPos = showSelectionBoxTop + 212 + k;		inputStringBox[5].xPos = showSelectionBoxLeft + 22;		inputStringBox[5].yPos = showSelectionBoxTop + 245 + k;		inputStringBox[6].xPos = showSelectionBoxLeft + 90;		inputStringBox[6].yPos = showSelectionBoxTop + 245 + k;		inputStringBox[7].xPos = showSelectionBoxLeft + 22;		inputStringBox[7].yPos = showSelectionBoxTop + 285 + k;		inputStringBox[8].xPos = showSelectionBoxLeft + 90;		inputStringBox[8].yPos = showSelectionBoxTop + 285 + k;	}	private void editDrawString(int showSelectionBoxLeft, int showSelectionBoxTop) {		StringBuilder s = null;		String s0 = null;		//TextureWidth Height		drawString("TextureSize", showSelectionBoxLeft + 5, showSelectionBoxTop + 2, 0xffffff);		drawString("Width", showSelectionBoxLeft + 5, showSelectionBoxTop + 17, 0xffffff);		drawString("Height", showSelectionBoxLeft + 68, showSelectionBoxTop + 17, 0xffffff);		//Box Plate Ball		int k = 0;		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		int i1 = 0;		for (Entry<String, ModchuModel_ModelRenderer> en : customModel.partsMap.entrySet()) {			String key = en.getKey();			ModchuModel_ModelRenderer modelRenderer = en.getValue();			byte boxType = Modchu_CastHelper.Byte(modelRenderer.getFreeVariable("boxType"));			k = i1 * 145;			s = new StringBuilder().append("Box Number ").append(i1);			drawString(s.toString(), showSelectionBoxLeft + 5, showSelectionBoxTop + 35 + k, 0xffffff);			drawString("TextureOffset", showSelectionBoxLeft + 5, showSelectionBoxTop + 45 + k, 0xffffff);			drawString("X", showSelectionBoxLeft + 10, showSelectionBoxTop + 57 + k, 0xffffff);			drawString("Y", showSelectionBoxLeft + 80, showSelectionBoxTop + 57 + k, 0xffffff);			s = new StringBuilder().append("BoxType : ");			drawString(s.toString(), showSelectionBoxLeft + 5, showSelectionBoxTop + 72 + k, 0xffffff);			switch(boxType) {			case 0:				s0 = "addBox";				break;			case 1:				s0 = "addPlate";				break;			case 2:				s0 = "addBall";				break;			}			drawString(s0, showSelectionBoxLeft + 5, showSelectionBoxTop + 82 + k, 0xffffff);			drawString("point", showSelectionBoxLeft + 22, showSelectionBoxTop + 92 + k, 0xffffff);			drawString("size", showSelectionBoxLeft + 90, showSelectionBoxTop + 92 + k, 0xffffff);			drawString("X", showSelectionBoxLeft + 9, showSelectionBoxTop + 105 + k, 0xffffff);			drawString("Y", showSelectionBoxLeft + 9, showSelectionBoxTop + 120 + k, 0xffffff);			drawString("Z", showSelectionBoxLeft + 9, showSelectionBoxTop + 135 + k, 0xffffff);			drawString("X", showSelectionBoxLeft + 78, showSelectionBoxTop + 105 + k, 0xffffff);			drawString("Y", showSelectionBoxLeft + 78, showSelectionBoxTop + 120 + k, 0xffffff);			drawString("Z", showSelectionBoxLeft + 78, showSelectionBoxTop + 135 + k, 0xffffff);			if (boxType != 2) {				s = new StringBuilder().append("ScaleFactor  Correction");				drawString(s.toString(), showSelectionBoxLeft, showSelectionBoxTop + 150 + k, 0xffffff);			}			k = k + 15;			i1++;		}		ModchuModel_ModelRenderer modelRenderer = (ModchuModel_ModelRenderer) Modchu_Main.getMapValue(customModel.partsMap, partsSlotSelected);		if (modelRenderer.cubeList.size() > 0) showSelectionBoxTop += k;		//RotateAngleX Y Z		drawString("X", showSelectionBoxLeft + 9, showSelectionBoxTop + 178, 0xffffff);		drawString("Y", showSelectionBoxLeft + 9, showSelectionBoxTop + 193, 0xffffff);		drawString("Z", showSelectionBoxLeft + 9, showSelectionBoxTop + 205, 0xffffff);		s = (new StringBuilder()).append("RotateAngle");		drawString(s.toString(), showSelectionBoxLeft, showSelectionBoxTop + 165, 0xffffff);		//Type		drawString("Texture", showSelectionBoxLeft + 80, showSelectionBoxTop + 220, 0xffffff);		drawString("ColorFixity", showSelectionBoxLeft + 80, showSelectionBoxTop + 230, 0xffffff);		drawString("Factor", showSelectionBoxLeft + 90, showSelectionBoxTop + 270, 0xffffff);		drawString("Correction", showSelectionBoxLeft + 10, showSelectionBoxTop + 270, 0xffffff);		s = (new StringBuilder()).append("Type");		drawString(s.toString(), showSelectionBoxLeft + 10, showSelectionBoxTop + 230, 0xffffff);		s = (new StringBuilder()).append("Move");		drawString(s.toString(), showSelectionBoxLeft + 90, showSelectionBoxTop + 260, 0xffffff);		drawString(s.toString(), showSelectionBoxLeft + 10, showSelectionBoxTop + 260, 0xffffff);		//addChildName		s = (new StringBuilder()).append("addChildName");		drawString(s.toString(), showSelectionBoxLeft + 10, showSelectionBoxTop + 300, 0x55ffff);		//getTextureName()		s = (new StringBuilder()).append("textureName");		drawString(s.toString(), showSelectionBoxLeft + 10, showSelectionBoxTop + 535, 0x55ffff);	}	private void editBoxInit(int showSelectionBoxLeft, int showSelectionBoxTop) {		Modchu_Debug.mDebug("editBoxInit");		addChildNameSlot = null;		textureNameSlot = null;		inputStringBox = null;		addButtonList.clear();		//TextureWidth TextureHeight		int inputStringBoxCount = 0;		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		ModchuModel_ModelRenderer modelRenderer = (ModchuModel_ModelRenderer) Modchu_Main.getMapValue(customModel.partsMap, partsSlotSelected);		inputStringBox = new Modchu_GuiTextFieldMaster[11 + (getPartsBoxNumberMax() * 10)];		inputStringBoxCount = 0;		inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 32, 12);		inputStringBox[inputStringBoxCount].setText(""+modelRenderer.textureWidth);		inputStringBoxCount++;		inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 32, 12);		inputStringBox[inputStringBoxCount].setText(""+modelRenderer.textureHeight);		inputStringBoxCount++;		//RotateAngleX Y Z		inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 45, 12);		inputStringBox[inputStringBoxCount].setText(""+modelRenderer.rotateAngleX);		inputStringBoxCount++;		inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 45, 12);		inputStringBox[inputStringBoxCount].setText(""+modelRenderer.rotateAngleY);		inputStringBoxCount++;		inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 45, 12);		inputStringBox[inputStringBoxCount].setText(""+modelRenderer.rotateAngleZ);		inputStringBoxCount++;		//addChildName		addChildNameSlot = (Modchu_IGuiSlot) Modchu_Main.newModchuCharacteristicObject("Modchu_GuiSlot", PFLM_GuiSlot.class, this, 100, 15, showSelectionBoxLeft + 10, showSelectionBoxTop + 5, 2);		if (customModel.cfgMainModelTextureName != null) {			ConcurrentHashMap<String, Field> modelRendererMap = PFLM_Config.getConfigModelRendererMap(customModel.mainModel, customModel.cfgMainModelTextureName, 0);			String s;			if (modelRendererMap != null					&& !modelRendererMap.isEmpty()) {				Iterator<Entry<String, Field>> iterator = modelRendererMap.entrySet().iterator();				Entry<String, Field> entry;				modelRendererNameList.clear();				while(iterator.hasNext()) {					entry = iterator.next();					s = entry.getKey();					modelRendererNameListSetting(s);				}			}			for (Entry<String, ModchuModel_ModelRenderer> en : customModel.partsMap.entrySet()) {				s = en.getKey();				modelRendererNameListSetting(s);			}			ArrayList list = Modchu_CastHelper.ArrayList(modelRenderer.getFreeVariable("partsAddChildList"));			if (list != null					&& !list.isEmpty()) {				String addChildName = (String) list.get(0);				for (int i1 = 0; i1 < modelRendererNameList.size(); i1++) {					if (addChildName.equals(modelRendererNameList.get(i1))) {						//Modchu_Debug.mDebug("addChildName="+addChildName+" modelRendererNameList.get(i1)="+modelRendererNameList.get(i1));						addChildNameSlotSelected = i1;					}				}			}		}		//Type		byte partsType = Modchu_CastHelper.Byte(modelRenderer.getFreeVariable("partsType"));		int partsTextureColor = Modchu_CastHelper.Int(modelRenderer.getFreeVariable("partsTextureColor"));		float partsTypeFactor = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("partsTypeFactor"));		float partsTypCorrection = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("partsTypCorrection"));		inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 32, 12);		inputStringBox[inputStringBoxCount].setText(""+partsType);		inputStringBoxCount++;		inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 32, 12);		inputStringBox[inputStringBoxCount].setText(""+partsTextureColor);		inputStringBoxCount++;		inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 32, 12);		inputStringBox[inputStringBoxCount].setText(""+partsTypeFactor);		inputStringBoxCount++;		inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 32, 12);		inputStringBox[inputStringBoxCount].setText(""+partsTypCorrection);		inputStringBoxCount++;		//Box Plate Ball		for (int i = 0; i < modelRenderer.cubeList.size() ;i++) {			float[] partsBoxData = Modchu_CastHelper.FloatArray(modelRenderer.getFreeVariable("partsBoxData"+i));			byte boxType = Modchu_CastHelper.Byte(modelRenderer.getFreeVariable("boxType"));			addButtonList.add(newInstanceButton(1000 + i, 0, 0, 60, 13, "change"));			//partsTextureOffsetX Y			inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 32, 12);			inputStringBox[inputStringBoxCount].setText(""+modelRenderer.textureOffsetX);			inputStringBoxCount++;			inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 32, 12);			inputStringBox[inputStringBoxCount].setText(""+modelRenderer.textureOffsetY);			inputStringBoxCount++;			inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 45, 12);			inputStringBox[inputStringBoxCount].setText(""+partsBoxData[0]);			inputStringBoxCount++;			inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 45, 12);			inputStringBox[inputStringBoxCount].setText(""+partsBoxData[1]);			inputStringBoxCount++;			inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 45, 12);			inputStringBox[inputStringBoxCount].setText(""+partsBoxData[2]);			inputStringBoxCount++;			inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 32, 12);			inputStringBox[inputStringBoxCount].setText(""+partsBoxData[3]);			inputStringBoxCount++;			inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 32, 12);			inputStringBox[inputStringBoxCount].setText(""+partsBoxData[4]);			inputStringBoxCount++;			inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 32, 12);			inputStringBox[inputStringBoxCount].setText(""+partsBoxData[5]);			inputStringBoxCount++;			if (partsBoxData.length > 6) {				inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 32, 12);				inputStringBox[inputStringBoxCount].setText(""+partsBoxData[6]);				inputStringBoxCount++;			}			if (partsBoxData.length > 7) {				inputStringBox[inputStringBoxCount] = newInputStringBox(0, 0, 32, 12);				inputStringBox[inputStringBoxCount].setText(""+partsBoxData[7]);				inputStringBoxCount++;			}		}		//getTextureName()		textureNameSlot = (Modchu_IGuiSlot) Modchu_Main.newModchuCharacteristicObject("Modchu_GuiSlot", PFLM_GuiSlot.class, this, 100, 15, showSelectionBoxLeft + 10, showSelectionBoxTop + 5, 3);		Map<String, ModchuModel_TextureBoxBase> textures = ModchuModel_TextureManagerBase.instance.textures;		Object ltb = null;		String s = null;		String s1 = null;		for (Entry<String, ModchuModel_ModelRenderer> en : customModel.partsMap.entrySet()) {			String key = en.getKey();			if (modelRenderer.equals(en.getValue())) s1 = key;		}		for (int i1 = 0; i1 < textures.size(); i1++) {			ltb = ModchuModel_TextureManagerBase.instance.getTextureManagerTextures(i1);			s = ModchuModel_TextureManagerBase.instance.getTextureBoxFileName(ltb);			textureNameList.add(s);			if (s.equals(s1)) textureNameSlotSelected = i1;		}		initGui();	}	private int getPartsBoxNumberMax() {		int i = 0;		for (Entry<String, ModchuModel_ModelRenderer> en : customModel.partsMap.entrySet()) {			ModchuModel_ModelRenderer modelRenderer = en.getValue();			if (i > modelRenderer.cubeList.size()) i = modelRenderer.cubeList.size();		}		return i;	}	private boolean updateEditString(String s, int i) {		if (s != null) ;else return false;		boolean b = false;		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		ModchuModel_ModelRenderer modelRenderer = (ModchuModel_ModelRenderer) Modchu_Main.getMapValue(customModel.partsMap, partsSlotSelected);		switch(i) {		case 0:			if (Modchu_Main.integerCheckReturnInt(s) > 0) {				int i2 = inputStringBoxIntegerCheck(i, s, 0);				modelRenderer.textureWidth = i2;				b = true;			}			break;		case 1:			if (Modchu_Main.integerCheckReturnInt(s) > 0) {				int i2 = inputStringBoxIntegerCheck(i, s, 0);				modelRenderer.textureHeight = i2;				b = true;			}			break;		case 2:			if (Modchu_Main.floatCheck(s)) {				float f = Float.valueOf(s);				f = inputStringBoxFloatMinCheck(i, f);				f = inputStringBoxFloatMaxCheck(i, f);				modelRenderer.rotateAngleX = f;				b = true;			}			break;		case 3:			if (Modchu_Main.floatCheck(s)) {				float f = Float.valueOf(s);				f = inputStringBoxFloatMinCheck(i, f);				f = inputStringBoxFloatMaxCheck(i, f);				modelRenderer.rotateAngleY = f;				b = true;			}			break;		case 4:			if (Modchu_Main.floatCheck(s)) {				float f = Float.valueOf(s);				f = inputStringBoxFloatMinCheck(i, f);				f = inputStringBoxFloatMaxCheck(i, f);				modelRenderer.rotateAngleZ = f;				b = true;			}			break;		case 5:			if (Modchu_Main.integerCheckReturnInt(s) > 0) {				int i2 = Integer.valueOf(s);				i2 = inputStringBoxIntegerMinCheck(i, i2);				if (i2 >= customModel.maxTypeMode) i2 = customModel.maxTypeMode - 1;				s = ""+i2;				if (Modchu_Main.byteCheck(s)) modelRenderer.setFreeVariable("partsType", Byte.valueOf(s));				b = true;			}			break;		case 6:			if (Modchu_Main.integerCheckReturnInt(s) > 0) {				int i2 = Integer.valueOf(s);				i2 = i2 & 0xf;				s = ""+i2;				modelRenderer.setFreeVariable("partsTextureColor", Byte.valueOf(s));				b = true;			}			break;		case 7:			if (Modchu_Main.floatCheck(s)) {				float f = Float.valueOf(s);				//f = inputStringBoxFloatMinCheck(i, f);				f = inputStringBoxFloatMaxCheck(i, f);				modelRenderer.setFreeVariable("partsTypeFactor", f);				b = true;			}			break;		case 8:			if (Modchu_Main.floatCheck(s)) {				float f = Float.valueOf(s);				//f = inputStringBoxFloatMinCheck(i, f);				f = inputStringBoxFloatMaxCheck(i, f);				modelRenderer.setFreeVariable("partsTypeCorrection", f);				b = true;			}			break;		}		if (i > 8) {			int j = i - 9;			int i1 = j / 10;			j = j % 10;			switch(j) {			case 0:				if (Modchu_Main.integerCheckReturnInt(s) > 0) {					int i2 = inputStringBoxIntegerCheck(i, s, 1);					modelRenderer.textureOffsetX = i2;					b = true;				}				break;			case 1:				if (Modchu_Main.integerCheckReturnInt(s) > 0) {					int i2 = inputStringBoxIntegerCheck(i, s, 1);					modelRenderer.textureOffsetY = i2;					b = true;				}				break;			case 2:				if (Modchu_Main.floatCheck(s)) {					float f = Float.valueOf(s);					f = inputStringBoxFloatMinCheck(i, f);					f = inputStringBoxFloatMaxCheck(i, f);					float[] partsBoxData = Modchu_CastHelper.FloatArray(modelRenderer.getFreeVariable("partsBoxData"+i1));					partsBoxData[0] = f;					modelRenderer.setFreeVariable("partsBoxData"+i1, partsBoxData);					b = true;				}				break;			case 3:				if (Modchu_Main.floatCheck(s)) {					float f = Float.valueOf(s);					f = inputStringBoxFloatMinCheck(i, f);					f = inputStringBoxFloatMaxCheck(i, f);					float[] partsBoxData = Modchu_CastHelper.FloatArray(modelRenderer.getFreeVariable("partsBoxData"+i1));					partsBoxData[1] = f;					modelRenderer.setFreeVariable("partsBoxData"+i1, partsBoxData);					b = true;				}				break;			case 4:				if (Modchu_Main.floatCheck(s)) {					float f = Float.valueOf(s);					f = inputStringBoxFloatMinCheck(i, f);					f = inputStringBoxFloatMaxCheck(i, f);					float[] partsBoxData = Modchu_CastHelper.FloatArray(modelRenderer.getFreeVariable("partsBoxData"+i1));					partsBoxData[2] = f;					modelRenderer.setFreeVariable("partsBoxData"+i1, partsBoxData);					b = true;				}				break;			case 5:				if (Modchu_Main.integerCheckReturnInt(s) > 0) {					int i2 = inputStringBoxIntegerCheck(i, s, 0);					float[] partsBoxData = Modchu_CastHelper.FloatArray(modelRenderer.getFreeVariable("partsBoxData"+i1));					partsBoxData[3] = i2;					modelRenderer.setFreeVariable("partsBoxData"+i1, partsBoxData);					b = true;				}				break;			case 6:				if (Modchu_Main.integerCheckReturnInt(s) > 0) {					int i2 = inputStringBoxIntegerCheck(i, s, 0);					float[] partsBoxData = Modchu_CastHelper.FloatArray(modelRenderer.getFreeVariable("partsBoxData"+i1));					partsBoxData[4] = i2;					modelRenderer.setFreeVariable("partsBoxData"+i1, partsBoxData);					b = true;				}				break;			case 7:				if (Modchu_Main.integerCheckReturnInt(s) > 0) {					int i2 = inputStringBoxIntegerCheck(i, s, 0);					float[] partsBoxData = Modchu_CastHelper.FloatArray(modelRenderer.getFreeVariable("partsBoxData"+i1));					partsBoxData[5] = i2;					modelRenderer.setFreeVariable("partsBoxData"+i1, partsBoxData);					b = true;				}				break;			case 8:				if (Modchu_Main.floatCheck(s)) {					float f = Float.valueOf(s);					//f = inputStringBoxFloatMinCheck(i, f);					f = inputStringBoxFloatMaxCheck(i, f);					float[] partsBoxData = Modchu_CastHelper.FloatArray(modelRenderer.getFreeVariable("partsBoxData"+i1));					partsBoxData[6] = f;					modelRenderer.setFreeVariable("partsBoxData"+i1, partsBoxData);					b = true;				}				break;			case 9:				if (Modchu_Main.floatCheck(s)) {					float f = Float.valueOf(s);					//f = inputStringBoxFloatMinCheck(i, f);					f = inputStringBoxFloatMaxCheck(i, f);					float[] partsBoxData = Modchu_CastHelper.FloatArray(modelRenderer.getFreeVariable("partsBoxData"+i1));					partsBoxData[7] = f;					modelRenderer.setFreeVariable("partsBoxData"+i1, partsBoxData);					b = true;				}				break;			}		}		Modchu_Debug.mDebug("updateEditString s="+s+" i="+i);		return b;	}	private int inputStringBoxIntegerCheck(int i, String s, int j) {		int i2;		if (Modchu_Main.integerCheckReturnInt(s) == 2) {			long l = Long.valueOf(s);			i2 = l < 0 ? Integer.MIN_VALUE : Integer.MAX_VALUE;			inputStringBox[i].setText(""+i2);		} else {			i2 = Integer.valueOf(s);			if (j < 1) i2 = inputStringBoxIntegerMinCheck(i, i2);			if (j < 2) i2 = inputStringBoxIntegerMaxCheck(i, i2);		}		return i2;	}	private int inputStringBoxIntegerMinCheck(int i, int i2) {		if (i2 < 0) {			i2 = 0;			inputStringBox[i].setText("0");		}		return i2;	}	private int inputStringBoxIntegerMaxCheck(int i, int i2) {		if (i2 > Integer.MAX_VALUE) {			i2 = Integer.MAX_VALUE;			inputStringBox[i].setText(""+Integer.MAX_VALUE);			Modchu_Debug.mDebug("inputStringBoxIntegerMaxCheck inputStringBox[i].getText()="+inputStringBox[i].getText());		}		return i2;	}	private float inputStringBoxFloatMinCheck(int i, float f) {		if (f < Float.MIN_EXPONENT) {			f = Float.MIN_EXPONENT;			inputStringBox[i].setText(""+Float.MIN_EXPONENT);		}		return f;	}	private float inputStringBoxFloatMaxCheck(int i, float f) {		if (f > Float.MAX_EXPONENT) {			f = Float.MAX_EXPONENT;			inputStringBox[i].setText(""+Float.MAX_EXPONENT);		}		return f;	}	private void modelRendererNameListSetting(String s) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		boolean b;		if (!modelRendererNameList.contains(s)) {			b = false;			String key = (String) Modchu_Main.getMapKey(customModel.partsMap, partsSlotSelected);			if (key != null) ;else b = true;			if (!b					&& !key.equals(s)) b = true;			if (b) modelRendererNameList.add(s);		}	}	private Modchu_GuiTextFieldMaster newInputStringBox(int i, int i1, int i2, int i3) {		Modchu_GuiTextFieldMaster guiTextField = (Modchu_GuiTextFieldMaster) Modchu_Main.newModchuCharacteristicObject("Modchu_GuiTextFieldMaster", base.getFontRenderer(), i, i1, i2, i3);		guiTextField.setTextColor(0x02ffffff);		guiTextField.setDisabledTextColour(-1);		//PFLM_GuiTextField.setEnableBackgroundDrawing(false);		guiTextField.setMaxStringLength(30);		guiTextField.setEnabled(true);		return guiTextField;	}	private float getEditBoxX() {		int width = Modchu_AS.getInt(Modchu_AS.guiScreenWidth, base);		return (float)width - 200;	}	private float getEditBoxY() {		return 60F;	}	private float floatPlus(float f, float f1, float f2, float f3, int i) {		f = f * i;		int i1 = (int) f;		if (Modchu_AS.getBoolean(Modchu_AS.isCtrlKeyDown)) {			i1 = i1 + (int)(f2 * i);		} else {			if (Modchu_AS.getBoolean(Modchu_AS.isShiftKeyDown)) {				i1 = i1 + (int)(f3 * i);			} else {				i1 = i1 + (int)(f1 * i);			}		}		f = (float)i1 / (float)i;		return f;	}	@Override	public void keyTyped(char par1, int par2) {		boolean b = false;		boolean updateFlag = false;		if (inputStringBox != null) {			String s = null;			for(int i1 = 0; i1 < inputStringBox.length; i1++) {				if (inputStringBox[i1] != null) {					if (inputStringBox[i1].textboxKeyTyped(par1, par2)) {						s = inputStringBox[i1].getText();						if (updateEditString(s, i1)) updateFlag = true;						b = true;					}				}			}		}		if (updateFlag) saveTempCustomModel();		if (!b) super.keyTyped(par1, par2);	}	@Override	public void mouseClicked(int par1, int par2, int par3) {		super.mouseClicked(par1, par2, par3);		if (inputStringBox != null) {			for(int i = 0; i < inputStringBox.length; i++) {				if (inputStringBox[i] != null) inputStringBox[i].mouseClicked(par1, par2, par3);			}		}	}	@Override	public void setTextureValue() {		if (getTextureName() != null				&& !getTextureName().isEmpty()) ;else setTextureName("default_Custom1");		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		modelData.setCapsValue(modelData.caps_textureName, getTextureName());		modelData.setCapsValue(modelData.caps_maidColor, getColor());		setTextureArmorPackege(2);		modelData.setCapsValue(modelData.caps_textureArmorName, getTextureArmorName());	}	@Override	public void setTextureArmorPackege(int i) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		modelData.setCapsValue(modelData.caps_textureArmorName, modelData.getCapsValue(modelData.caps_textureName));		String s = ModchuModel_TextureManagerBase.instance.getArmorName((String)modelData.getCapsValue(modelData.caps_textureArmorName), i);		modelData.setCapsValue(modelData.caps_textureArmorName, s);	}	public int getTop(int guiNumber) {		switch(guiNumber) {		case 0:			return 30;		case 1:			return 60;		case 2:		case 3:			return (int) getEditBoxY();		}		return 0;	}	public int getBottom(int guiNumber) {		int height = Modchu_AS.getInt(Modchu_AS.guiScreenHeight, base);		switch(guiNumber) {		case 0:			return height - 30;		case 1:			return height - 10;		case 2:		case 3:			return height;		}		return 0;	}	public int getGuiSlotSize(int guiNumber) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		if (modelData != null				&& ((MultiModelCustom) modelData.models[0]) != null				&& customModel != null) {			if (guiNumber == 0					&& customModel.partsMap != null) {				return customModel.partsMap.size();			}			else if (guiNumber == 1) {				int k = 0;				ModchuModel_ModelRenderer modelRenderer = (ModchuModel_ModelRenderer) Modchu_Main.getMapValue(customModel.partsMap, partsSlotSelected);				if (partsSlotSelected > -1						&& modelRenderer.cubeList.size() > 0)					k += modelRenderer.cubeList.size() * 5;				return partsSlotSelected > -1 ? 55 + k : -1;			}			else if (guiNumber == 2) {				if (modelRendererNameList != null						&& !modelRendererNameList.isEmpty()) return modelRendererNameList.size();			}			else if (guiNumber == 3) {				if (textureNameList != null						&& !textureNameList.isEmpty()) return textureNameList.size();			}		}		return -1;	}	public int getGuiSlotContentHeight(int guiNumber) {		return getGuiSlotSize(guiNumber) * 15;	}	public void guiSlotElementClicked(int guiNumber, int i, boolean flag) {		//flag = true 左ダブルクリック		//Edit中クリックロック		//if (isEdit				//&& guiNumber < 2) return;		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		switch(guiNumber) {		case 0:			if (partsSlotSelected != i) {				partsSlotSelected = i;				editBoxInitFlag = false;			}			break;		case 1:			break;		case 2:			if (addChildNameSlotSelected != i				&& modelRendererNameList.size() < addChildNameSlotSelected) {				String s = modelRendererNameList.get(addChildNameSlotSelected);				ModchuModel_ModelRenderer modelRenderer = (ModchuModel_ModelRenderer) Modchu_Main.getMapValue(customModel.partsMap, partsSlotSelected);				ModchuModel_ModelRenderer modelRenderer2 = getModelRenderer(s, customModel.cfgMainModelTextureName, customModel.mainModel, 0);				if (modelRenderer2 != null) {					if (modelRenderer2.childModels != null) modelRenderer2.childModels.remove(modelRenderer);				}				addChildNameSlotSelected = i;				s = modelRendererNameList.get(addChildNameSlotSelected);				modelRenderer2 = getModelRenderer(s, customModel.cfgMainModelTextureName, customModel.mainModel, 0);				if (modelRenderer2 != null) {					modelRenderer2.addChild(modelRenderer);				}			}			break;		case 3:			if (textureNameSlotSelected != i) {				textureNameSlotSelected = i;				if (textureNameList != null) {					String s = textureNameList.get(i);					Modchu_Debug.mDebug("textureNameSlotSelected="+textureNameSlotSelected+" s="+s);					// TODO					//if (s != null) customModel.partsTextureNameMap.put(partsSlotSelected, s);				}			}			break;		}	}	private ModchuModel_ModelRenderer getModelRenderer(String s, String s2, Object model, int i) {		ModchuModel_ModelRenderer modelRenderer = null;		ConcurrentHashMap<String, Field> modelRendererMap = PFLM_Config.getConfigModelRendererMap(model, s2, 0);		if (modelRendererMap != null				&& modelRendererMap.containsKey(s)) {			PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);			Field f = modelRendererMap.get(s);			try {				modelRenderer = (ModchuModel_ModelRenderer) f.get(customModel.mainModel);			} catch (Exception e) {			}		}		return modelRenderer;	}	public void outOfRangeClick(int guiNumber, int mouse_x, int mouse_y, boolean flag) {		switch(guiNumber) {		case 0:			//partsSlotSelected = -1;			break;		case 1:			//if (flag) {				//partsDetailSlotSelected = -1;				//isEdit = false;			//}			break;		case 2:			//addChildNameSlotSelected = -1;			break;		case 3:			//textureNameSlotSelected = -1;			break;		}	}	public boolean guiSlotIsSelected(int guiNumber, int i) {		int i1 = -1;		switch(guiNumber) {		case 0:			i1 = partsSlotSelected;			break;		case 1:			//i1 = partsDetailSlotSelected;			break;		case 2:			i1 = addChildNameSlotSelected;			break;		case 3:			i1 = textureNameSlotSelected;			break;		}		if (i == i1) {			return true;		}		return false;	}	public void guiSlotDrawSlot(int guiNumber, int i, int showSelectionBoxLeft, int showSelectionBoxRight, int showSelectionBoxTop, int showSelectionBoxBottom, Object tessellator) {		//Modchu_Debug.mDebug("guiSlotDrawSlot guiNumber="+guiNumber);		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		if (modelData != null				&& ((MultiModelCustom) modelData.models[0]) != null				&& customModel != null); else return;		ModchuModel_ModelRenderer modelRenderer = (ModchuModel_ModelRenderer) Modchu_Main.getMapValue(customModel.partsMap, partsSlotSelected);		String key = (String) Modchu_Main.getMapKey(customModel.partsMap, partsSlotSelected);		int k = 0;		if (partsSlotSelected > -1				&& modelRenderer.cubeList.size() > 0)			k += modelRenderer.cubeList.size() * 145 - 145;		if (guiNumber == 0				&& key != null				&& i > -1) {			String s0 = key;			drawString(base.getFontRenderer(), s0, showSelectionBoxLeft + 5, showSelectionBoxTop + 2, 0xffffff);		}		else if (guiNumber == 1				&& i > -1) {			int amountScrolled = Modchu_AS.getInt("GuiSlot", "amountScrolled", partsDetailSlot);			if (partsSlotSelected > -1					&& i == amountScrolled) {				showSelectionBoxTop = -amountScrolled * 15 + showSelectionBoxTop;				//Modchu_Debug.mDebug("i="+i+" partsDetailSlot.amountScrolled="+partsDetailSlot.amountScrolled+" showSelectionBoxTop="+showSelectionBoxTop);				if (!editBoxInitFlag) {					editBoxInitFlag = true;					editBoxInit(showSelectionBoxLeft, showSelectionBoxTop);				}				editBoxSetting(showSelectionBoxLeft, showSelectionBoxTop);				drawEditScreen(showSelectionBoxLeft, showSelectionBoxTop);			}		}		else if (guiNumber == 2) {			int amountScrolled = Modchu_AS.getInt("GuiSlot", "amountScrolled", partsDetailSlot);			Modchu_AS.set("GuiSlot", "slotPosX", addChildNameSlot, (int) getEditBoxX() + 50);			Modchu_AS.set("GuiSlot", "slotPosY", addChildNameSlot, -amountScrolled * 15 + 380 + k);			Modchu_AS.set("GuiSlot", "scrollBarY", addChildNameSlot, -amountScrolled * 15 + 330 + k);			//Modchu_Debug.mDebug("addChildNameSlot.slotPosY="+addChildNameSlot.slotPosY);			String s0 = null;			if (modelRendererNameList != null					&& !modelRendererNameList.isEmpty()					&& i > -1) {				s0 = modelRendererNameList.get(i);				drawString(base.getFontRenderer(), s0, showSelectionBoxLeft + 5, showSelectionBoxTop + 2, 0xffffff);			}		}		else if (guiNumber == 3) {			k += (modelRenderer.cubeList.size() + 1) * 50;			int amountScrolled = Modchu_AS.getInt("GuiSlot", "amountScrolled", partsDetailSlot);			Modchu_AS.set("GuiSlot", "slotPosX", textureNameSlot, (int) getEditBoxX() + 50);			Modchu_AS.set("GuiSlot", "slotPosY", textureNameSlot, -amountScrolled * 15 + 510 + k);			Modchu_AS.set("GuiSlot", "scrollBarY", textureNameSlot, -amountScrolled * 15 + 460 + k);			String s0 = null;			if (textureNameList != null					&& !textureNameList.isEmpty()					&& i > -1) {				s0 = textureNameList.get(i);				drawString(base.getFontRenderer(), s0, showSelectionBoxLeft + 5, showSelectionBoxTop + 2, 0xffffff);			}		}	}	private String[] getPartsDetailSlotData(String t, String t1) {		String[] s = new String[3];		String s1 = null;		String s2 = null;		int i = t.lastIndexOf(t1);		if(i > -1) {			s1 = t.substring(0, i);			s[2] = t.substring(i + 1);			i = s1.lastIndexOf(t1);			if(i > -1) {				s[0] = s1.substring(0, i);				s[1] = s1.substring(i + 1);			}			else s[1] = s[2];		}		else s[0] = t;		return s;	}	public int getSlotScrollBarX(int guiNumber) {		int width = Modchu_AS.getInt(Modchu_AS.guiScreenWidth, base);		switch(guiNumber) {		case 0:			return 15;		case 1:			return width - 15;		case 2:		case 3:			return (int) getEditBoxX() + 42;		}		return 0;	}	public int getSlotScrollBarSizeX(int guiNumber) {		return 6;	}	public int getLimitSelectedDisplayCount(int guiNumber) {		switch(guiNumber) {		case 2:		case 3:			return 10;		}		return -1;	}	@Override	public String getTextureName() {		return textureName;	}	@Override	public void setTextureName(String s) {		textureName = s;	}	@Override	public String getTextureArmorName() {		return textureArmorName;	}	@Override	public void setTextureArmorName(String s) {		textureArmorName = s;	}	@Override	public int getColor() {		return maidColor ;	}	@Override	public void setColor(int i) {		maidColor = i & 0xf;	}	@Override	public float getScale() {		return 0.0F;	}	@Override	public void setScale(float f) {	}	public void memoryRelease() {	}	@Override	public void modelChange() {	}}