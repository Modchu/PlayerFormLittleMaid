package modchu.pflm;import java.lang.reflect.Method;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_AS;import modchu.lib.characteristic.Modchu_CastHelper;import modchu.lib.replacepoint.Modchu_ModelBaseNihilReplacePoint;import modchu.model.ModchuModel_Main;import modchu.model.ModchuModel_ModelCapsHelper;import modchu.model.multimodel.MultiModelBaseBiped;import org.lwjgl.opengl.GL11;public class PFLM_RenderPlayerMaster extends PFLM_RenderMasterBase {	public String[] armorFilename;	private boolean checkGlEnableWrapper = true;	private boolean checkGlDisableWrapper = true;	public boolean isSizeMultiplier = false;	private Method sizeMultiplier;	public Object pflm_RenderPlayerSmart;//-@-125	public Object pflm_RenderRenderSmart;//@-@125// b173deleteprivate RenderBlocks renderBlocks;	public PFLM_RenderPlayerMaster(Object render) {		super(render);		Modchu_Debug.lDebug("PFLM_RenderPlayerMaster init 1");		sizeMultiplier = Modchu_Reflect.getMethod("Entity", "getSizeMultiplier", -1);		isSizeMultiplier = PFLM_Main.isGulliver = sizeMultiplier != null;		if (PFLM_Main.isSmartMoving) {			//Modchu_Debug.mDebug("PFLM_RenderPlayerMaster() isSmartMoving");			pflm_RenderPlayerSmart = Modchu_Reflect.newInstance("PFLM_RenderPlayerSmart", new Class[]{ PFLM_RenderPlayerMaster.class }, new Object[]{ parentRender });//-@-125			pflm_RenderRenderSmart = Modchu_Reflect.newInstance("PFLM_RenderRenderSmart", new Class[]{ PFLM_RenderPlayerMaster.class }, new Object[]{ parentRender });//@-@125		}		if (PFLM_Main.isShaders) {			if (Modchu_Reflect.getMethod("Shaders", "setEntityHurtFlash", new Class[]{ int.class, int.class }) != null					&& Modchu_Reflect.getFieldObject("Shaders", "useEntityHurtFlash") != null) {				shadersHurtFlashFlag = true;			}		}		// b173deleterenderBlocks = new RenderBlocks();		Modchu_Debug.lDebug("PFLM_RenderPlayerMaster init end.");	}	@Override	public Object getArmorItemStack(Object entity, int i) {		return Modchu_AS.get(Modchu_AS.entityPlayerInventoryPlayerArmorItemInSlot, entity, i);	}	@Override	public int shouldRenderPass(Object entity, int i, float f) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);		setRenderPassModel(modelData.modelFATT);		Object t = null;		if (i < 4				&& modelData.modelFATT.modelOuter != null) {			if (modelData.modelFATT.textureOuter == null) return -1;			t = modelData.modelFATT.textureOuter[i];			if (t == null) {				return -1;			} else {				return 1;			}		}		if (i < 8				&& modelData.modelFATT.modelInner != null) {			if (modelData.modelFATT.textureInner == null) return -1;			t = modelData.modelFATT.textureInner[i - 4];			if (t == null) {				return -1;			} else {				return 1;			}		} else {			return -1;		}	}	@Override	public void preRenderCallback(Object entity, float par2) {		renderScale(entity, par2);	}	@Override	public float renderScale(Object entity, float f) {		if (isSizeMultiplier) {			float f2 = 0.9375F * (Float) Modchu_Reflect.invoke(sizeMultiplier, entity);			GL11.glScalef(f2, f2, f2);			return f2;		}		if (!PFLM_ConfigData.useScaleChange) {			superPreRenderCallback(entity, f);			return 0.9375F;		}		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) ;		else return 0.9375F;		float f1 = modelData.getCapsValueBoolean(modelData.caps_isPlayer) ? PFLM_ConfigData.modelScale : modelData.getCapsValueFloat(modelData.caps_modelScale);		if (f1 == 0.0F) f1 = ((MultiModelBaseBiped) modelData.modelMain.model).getModelScale(modelData);		if (PFLM_Main.oldRender) GL11.glScalef(f1, f1, f1);		//Modchu_Debug.lDebug("renderPlayerScale f1="+f1);		return f1;	}	@Override	public void doRender(Object entity, double d, double d1, double d2, float f, float f1) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) ;else return;		doRenderSetting(entity, modelData);		boolean isPlayer = modelData.getCapsValueBoolean(modelData.caps_isPlayer);		if (!isPlayer) PFLM_ModelDataMaster.instance.sitSleepResetCheck(modelData, entity);		if (PFLM_Main.isSmartMoving) {			Modchu_Reflect.invokeMethod("PFLM_RenderPlayerSmart", "renderPlayer", new Class[]{ Modchu_Reflect.loadClass("EntityPlayer"), double.class, double.class, double.class, float.class, float.class, PFLM_ModelData.class }, pflm_RenderPlayerSmart, new Object[]{ entity, d, d1, d2, f, f1, modelData });//-@-125			Modchu_Reflect.invokeMethod("PFLM_RenderRenderSmart", "renderPlayer", new Class[]{ Modchu_Reflect.loadClass("EntityPlayer"), double.class, double.class, double.class, float.class, float.class, PFLM_ModelData.class }, pflm_RenderRenderSmart, new Object[]{ entity, d, d1, d2, f, f1, modelData });//@-@125		}		float prevLimbSwingAmount = Modchu_AS.getFloat(Modchu_AS.entityLivingBasePrevLimbSwingAmount, entity);		float f8 = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseLimbSwing, entity) - prevLimbSwingAmount * (1.0F - f1);		PFLM_ModelDataMaster.instance.waitModeSetting(modelData, f8);		if (isPlayer) {			modelData.modelMain.setCapsValue(modelData.caps_isWait, PFLM_Main.isWait);			//Modchu_Debug.mDebug("isPlayer setCapsValue caps_isWait="+(modelData.modelMain.getCapsValue(modelData.caps_isWait)));		} else {			modelData.modelMain.setCapsValue(modelData.caps_isWait, modelData.getCapsValue(modelData.caps_isWait));			//Modchu_Debug.mDebug("!isPlayer setCapsValue caps_isWait="+(modelData.modelMain.getCapsValue(modelData.caps_isWait)));		}		modelData.setCapsValue(modelData.caps_isOpenInv, d == 0.0D && d1 == 0.0D && d2 == 0.0D && f == 0.0F && f1 == 1.0F);		Object itemstack = Modchu_AS.get(Modchu_AS.entityPlayerInventoryGetCurrentItem, entity);		modelData.modelMain.setCapsValue(modelData.caps_heldItemLeft, 0);		modelData.modelMain.setCapsValue(modelData.caps_heldItemRight, 0);//-@-b173		modelData.modelMain.setCapsValue(modelData.caps_aimedBow, false);		if (itemstack != null				&& Modchu_AS.getInt(Modchu_AS.entityPlayerGetItemInUseCount, entity) > 0) {			Enum enumaction = Modchu_AS.getEnum(Modchu_AS.itemStackGetItemUseAction, itemstack);			Enum enumactionBlock = Modchu_AS.getEnum(Modchu_AS.enumactionBlock);			Enum enumactionBow = Modchu_AS.getEnum(Modchu_AS.enumactionBow);			if (enumaction == enumactionBlock) {				if (modelData.modelMain.model.isItemHolder(modelData)) {					modelData.modelMain.setCapsValue(modelData.caps_heldItemLeft, 3);					modelData.modelMain.setCapsValue(modelData.caps_heldItemRight, 3);				}			} else if (enumaction == enumactionBow) {				modelData.modelMain.setCapsValue(modelData.caps_aimedBow, true);			}		}//@-@b173		if (Modchu_Main.getMinecraftVersion() > 159) {			if (Modchu_Main.mmmLibVersion > 499) {				int i2 = Modchu_AS.getInt(Modchu_AS.entityGetBrightnessForRender, entity, f);				boolean b = false;				b = Modchu_Reflect.setFieldObject(Modchu_ModelBaseNihilReplacePoint.class, "lighting", modelData.modelMain, i2, 1);				b = Modchu_Reflect.setFieldObject(Modchu_ModelBaseNihilReplacePoint.class, "lighting", modelData.modelFATT, i2, 1);			}			setRenderCount(modelData.modelFATT, 0);		}		if (isSizeMultiplier) {			modelData.setCapsValue(modelData.caps_freeVariable, "isGliding", (Boolean) Modchu_Reflect.invokeMethod(entity.getClass(), "isGliding", entity));			modelData.setCapsValue(modelData.caps_freeVariable, "isRafting", (Boolean) Modchu_Reflect.invokeMethod(entity.getClass(), "isRafting", entity));			modelData.setCapsValue(modelData.caps_freeVariable, "doesUmbrella", (Boolean) Modchu_Reflect.invokeMethod(entity.getClass(), "doesUmbrella", entity));		}		d1 = doRenderSettingY(entity, modelData, d1);		if (modelData.modelMain.model != null) {			if (!PFLM_Main.oldRender) {				Modchu_AS.set(Modchu_AS.renderMainModel, parentRender, modelData.modelMain);				superDoRenderLiving(entity, d, d1, d2, f, f1);			} else oldDoRenderLivingPFLM(modelData, entity, d, d1, d2, f, f1);		}	}	public double doRenderSettingY(Object entity, PFLM_ModelData modelData, double d1) {/*		if (PFLM_ConfigData.isModelSize//-@-125				&& (Boolean) Modchu_Reflect.invokeMethod("Minecraft", "isSingleplayer", mc)//@-@125				// 125delete&& thePlayer.worldObj.isRemote				&& !entityplayer.isRiding()) {			//d1 = d1 - (double)((MultiModelBaseBiped) modelData.modelMain.model).getyOffset();			d1 = d1 - (double)entityplayer.yOffset;		}		else*/		int version = Modchu_Main.getMinecraftVersion();		boolean oldRender = PFLM_Main.oldRender;		boolean isAether = PFLM_Main.isAether;		if (oldRender) {			d1 -= oldRender					&& isAether ? 0.82D : (double) Modchu_AS.getFloat(Modchu_AS.entityYOffset, entity);			//Modchu_Debug.mDebug("doRenderSettingY YOffset="+(Modchu_AS.getFloat(Modchu_AS.entityYOffset, entity)));			//d1 -= (double)entityplayer.yOffset;		} 		//if (entityplayer.isSneaking()) d1 -= 0.125D;		//if (PFLM_ConfigData.isModelSize) d1 += 0.45D;		if (Modchu_AS.getBoolean(Modchu_AS.entityIsRiding, entity)) modelData.setCapsValue(modelData.caps_isRiding, true);		else modelData.setCapsValue(modelData.caps_isRiding, modelData.getCapsValueBoolean(modelData.caps_isSitting));		//Modchu_Debug.mDebug("entityplayer.isRiding()="+modelData.getCapsValueBoolean(modelData.caps_isRiding));		if (modelData.getCapsValueBoolean(modelData.caps_isRiding)) {			d1 += oldRender ? 0.25D : 0.30D;			if (oldRender					&& isAether) d1 -= 0.1D;			if (PFLM_ConfigData.isModelSize					&& PFLM_ConfigData.changeMode != PFLM_GuiMaster.modeOnline) d1 -= 0.43D;		}		if (Modchu_AS.getBoolean(Modchu_AS.entityIsSneaking, entity)) {			if (modelData.getCapsValueBoolean(modelData.caps_isRiding)) {				d1 -= 0.1D;			}		}		if (modelData.getCapsValueBoolean(modelData.caps_isSitting)) {			if (!oldRender) d1 -= 0.55D;			if (!oldRender					&& version < 160) d1 += 0.3D;			if (oldRender) d1 += isAether ? 0.1D : -0.1D;			d1 += ModchuModel_ModelCapsHelper.getCapsValueDouble(modelData.modelMain.model, modelData.caps_sittingyOffset);		}		//Modchu_Debug.dDebug("doRenderSettingY return d1="+d1);		return d1;	}	private void doRenderSetting(Object entity, PFLM_ModelData modelData) {		//modelData.modelMain.setEntityCaps(modelData);		float[] f9 = new float[2];		float f10 = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseGetSwingProgress, entity, 1.0F);		switch (ModchuModel_ModelCapsHelper.getCapsValueInt(modelData, modelData.caps_dominantArm)) {		case 0:			f9[0] = f10;			f9[1] = 0.0F;			break;		case 1:			f9[0] = 0.0F;			f9[1] = f10;			break;		}		modelData.modelMain.setCapsValue(modelData.caps_onGround, f9[0], f9[1]);		if (modelData.getCapsValueBoolean(modelData.caps_isPlayer)) {			if (PFLM_ConfigData.mushroomConfusion) PFLM_Main.mushroomConfusion(entity, modelData);		}		if (modelData.getCapsValueBoolean(modelData.caps_changeModelFlag)) {			if (PFLM_Main.isOlddays) modelData.modelMain.setCapsValue(modelData.caps_oldwalking, (Boolean) Modchu_Reflect.getFieldObject("ModelBiped", "oldwalking", modelData.modelMain.model));			modelData.setCapsValue(modelData.caps_partsSetInit, false);			modelData.setCapsValue(modelData.caps_partsSetFlag, 1);			modelData.modelMain.setCapsValue(modelData.caps_changeModel, modelData);			PFLM_Main.changeModel(entity);			modelData.setCapsValue(modelData.caps_changeModelFlag, false);		}		PFLM_ModelDataMaster.instance.setHandedness(entity, modelData.getCapsValueInt(modelData.caps_dominantArm));		modelData.modelMain.setCapsValue(modelData.caps_isSneak, Modchu_AS.getBoolean(Modchu_AS.entityIsSneaking, entity));		modelData.modelMain.setCapsValue(modelData.caps_isRiding, Modchu_AS.getBoolean(Modchu_AS.entityIsRiding, entity));		modelData.setCapsValue(modelData.caps_isPlayer, Modchu_AS.getString(Modchu_AS.userName, entity) == Modchu_AS.getString(Modchu_AS.userName, Modchu_AS.get(Modchu_AS.minecraftThePlayer)));	}	@Override	public void renderEquippedItems(Object entity, float f) {		super.renderEquippedItems(entity, f);		renderSpecials(entity, f);	}	@Override	public void renderSpecials(Object entity, float f) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) ;else return;		//modelData.modelMain.setEntityCaps(modelData);		Modchu_AS.set(Modchu_AS.setRender, modelData.modelMain.model, parentRender);		if (!ModchuModel_Main.useInvisibilityItem				| (ModchuModel_Main.useInvisibilityItem				&& !Modchu_AS.getBoolean(Modchu_AS.entityIsInvisible, entity))) Modchu_AS.set(Modchu_AS.renderItems, modelData.modelMain, entity, parentRender);		if (Modchu_AS.getString(Modchu_AS.userName, entity).equals("deadmau5")) {			int version = Modchu_Main.getMinecraftVersion();			Class EntityLivingBase = Modchu_Reflect.loadClass("EntityLivingBase");			Class AbstractClientPlayer = Modchu_Reflect.loadClass("AbstractClientPlayer");			if (version > 159					&& Modchu_AS.getBoolean(Modchu_AS.threadDownloadImageDataIsTextureUploaded, Modchu_AS.get(Modchu_AS.abstractClientPlayerGetTextureSkin, entity))					//&& ((AbstractClientPlayer) entityplayer).func_110309_l().func_110557_a())					| (version < 160							&& (Boolean) Modchu_Reflect.invokeMethod("Render", "func_76984_a", "loadDownloadableImageTexture", new Class[]{ String.class, String.class }, parentRender, new Object[]{ (String) Modchu_Reflect.getFieldObject("Entity", "field_20047_bv", "skinUrl", entity), (String) null }))) {				if (version > 159) Modchu_Reflect.invokeMethod(AbstractClientPlayer, "func_110306_p", "getLocationSkin", parentRender);				// (((AbstractClientPlayer) entityplayer).func_110306_p());				float prevRenderYawOffset = Modchu_AS.getFloat(Modchu_AS.entityLivingBasePrevRenderYawOffset, entity);				float renderYawOffset = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseRenderYawOffset, entity);				float prevRotationYaw = Modchu_AS.getFloat(Modchu_AS.entityPrevRotationYaw, entity);				float rotationYaw = Modchu_AS.getFloat(Modchu_AS.entityRotationYaw, entity);				float prevRotationPitch = Modchu_AS.getFloat(Modchu_AS.entityPrevRotationPitch, entity);				float rotationPitch = Modchu_AS.getFloat(Modchu_AS.entityRotationPitch, entity);				for (int i = 0; i < 2; i++) {					float f2 = (prevRotationYaw + (rotationYaw - prevRotationYaw) * f) - (prevRenderYawOffset + (renderYawOffset - prevRenderYawOffset) * f);					float f3 = prevRotationPitch + (rotationPitch - prevRotationPitch) * f;					GL11.glPushMatrix();					GL11.glRotatef(f2, 0.0F, 1.0F, 0.0F);					GL11.glRotatef(f3, 1.0F, 0.0F, 0.0F);					GL11.glTranslatef(0.375F * (float) (i * 2 - 1), 0.0F, 0.0F);					GL11.glTranslatef(0.0F, -0.375F, 0.0F);					GL11.glRotatef(-f3, 1.0F, 0.0F, 0.0F);					GL11.glRotatef(-f2, 0.0F, 1.0F, 0.0F);					float f8 = 1.333333F;					GL11.glScalef(f8, f8, f8);					((MultiModelBaseBiped) modelData.modelMain.model).renderEars(0.0625F);					GL11.glPopMatrix();				}			}			boolean renderCloakFlag = false;						if (getRenderManager() != null) {				if (version > 159) {					if (Modchu_AS.getBoolean(Modchu_AS.threadDownloadImageDataIsTextureUploaded, Modchu_AS.get(Modchu_AS.abstractClientPlayerGetTextureCape, entity))) {						renderCloakFlag = true;					}				}				else if (version < 160						&& version > 129) {					String cloakUrl = Modchu_AS.getString(Modchu_AS.entityCloakUrl, entity);					if (cloakUrl != null						&& Modchu_AS.getBoolean(Modchu_AS.renderLoadDownloadableImageTexture, parentRender, cloakUrl, (String) null)) {						renderCloakFlag = true;					}				} else {					renderCloakFlag = true;				}				if (version > 129) {					if (Modchu_AS.getBoolean(Modchu_AS.entityIsInvisible, entity)						| Modchu_AS.getBoolean(Modchu_AS.entityPlayerGetHideCape, entity)) {						renderCloakFlag = false;					}				}			}			if (renderCloakFlag) {				GL11.glPushMatrix();				GL11.glTranslatef(0.0F, 0.0F, 0.125F);				double field_71091_bM = Modchu_AS.getDouble(Modchu_AS.entityPlayerField_71091_bM, entity);				double field_71096_bN = Modchu_AS.getDouble(Modchu_AS.entityPlayerField_71096_bN, entity);				double field_71097_bO = Modchu_AS.getDouble(Modchu_AS.entityPlayerField_71097_bO, entity);				double field_71094_bP = Modchu_AS.getDouble(Modchu_AS.entityPlayerField_71094_bP, entity);				double field_71095_bQ = Modchu_AS.getDouble(Modchu_AS.entityPlayerField_71095_bQ, entity);				double field_71085_bR = Modchu_AS.getDouble(Modchu_AS.entityPlayerField_71085_bR, entity);				double prevPosX = Modchu_AS.getDouble(Modchu_AS.entityPrevPosX, entity);				double prevPosY = Modchu_AS.getDouble(Modchu_AS.entityPrevPosY, entity);				double prevPosZ = Modchu_AS.getDouble(Modchu_AS.entityPrevPosZ, entity);				double posX = Modchu_AS.getDouble(Modchu_AS.entityPosX, entity);				double posY = Modchu_AS.getDouble(Modchu_AS.entityPosY, entity);				double posZ = Modchu_AS.getDouble(Modchu_AS.entityPosZ, entity);				double d = (field_71091_bM + (field_71094_bP - field_71091_bM) * (double) f) - (prevPosX + (posX - prevPosX) * (double) f);				double d1 = (field_71096_bN + (field_71095_bQ - field_71096_bN) * (double) f) - (prevPosY + (posY - prevPosY) * (double) f);				double d2 = (field_71097_bO + (field_71085_bR - field_71097_bO) * (double) f) - (prevPosZ + (posZ - prevPosZ) * (double) f);				float prevRenderYawOffset = (Float) Modchu_Reflect.getFieldObject(EntityLivingBase, "field_70760_ar", "prevRenderYawOffset", entity);				float renderYawOffset = (Float) Modchu_Reflect.getFieldObject(EntityLivingBase, "field_70761_aq", "renderYawOffset", entity);				float f11 = prevRenderYawOffset + (renderYawOffset - prevRenderYawOffset) * f;				double d3 = Modchu_AS.getFloat(Modchu_AS.mathHelperSin, (f11 * 3.141593F) / 180F);				double d4 = -Modchu_AS.getFloat(Modchu_AS.mathHelperCos, (f11 * 3.141593F) / 180F);				float f13 = (float) d1 * 10F;				if (f13 < -6F) {					f13 = -6F;				}				if (f13 > 32F) {					f13 = 32F;				}				float f14 = (float) (d * d3 + d2 * d4) * 100F;				float f15 = (float) (d * d4 - d2 * d3) * 100F;				if (f14 < 0.0F) {					f14 = 0.0F;				}				float prevCameraYaw = Modchu_AS.getFloat(Modchu_AS.entityPlayerPrevCameraYaw, entity);				float cameraYaw = Modchu_AS.getFloat(Modchu_AS.entityPlayerCameraYaw, entity);				float f16 = prevCameraYaw + (cameraYaw - prevCameraYaw) * f;				float prevDistanceWalkedModified = Modchu_AS.getFloat(Modchu_AS.entityPrevDistanceWalkedModified, entity);				float distanceWalkedModified = Modchu_AS.getFloat(Modchu_AS.entityDistanceWalkedModified, entity);				f13 += Modchu_AS.getFloat(Modchu_AS.mathHelperSin, (prevDistanceWalkedModified + (distanceWalkedModified - prevDistanceWalkedModified) * f) * 6F) * 32F * f16;				if (Modchu_AS.getBoolean(Modchu_AS.entityIsSneaking, entity)) {					f13 += 25F;				}				GL11.glRotatef(6F + f14 / 2.0F + f13, 1.0F, 0.0F, 0.0F);				GL11.glRotatef(f15 / 2.0F, 0.0F, 0.0F, 1.0F);				GL11.glRotatef(-f15 / 2.0F, 0.0F, 1.0F, 0.0F);				GL11.glRotatef(180F, 0.0F, 1.0F, 0.0F);				((MultiModelBaseBiped) modelData.modelMain.model).renderCloak(0.0625F);				GL11.glPopMatrix();			}		}		if (PFLM_Main.isAether) {			renderSpecialsAether(entity, f);		}/*		RenderHelper.disableStandardItemLighting();		GL11.glDisable(GL12.GL_RESCALE_NORMAL);		OpenGlHelper.setActiveTexture(OpenGlHelper.lightmapTexUnit);		GL11.glDisable(GL11.GL_TEXTURE_2D);		OpenGlHelper.setActiveTexture(OpenGlHelper.defaultTexUnit);*/	}	public void renderSpecialsAether(Object entityplayer, float f) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entityplayer);		if (modelData != null) ;else return;		float f1 = 1.62F - (Float) modelData.getCapsValue(modelData.caps_YOffset);		Modchu_Reflect.invokeMethod("modchu.pflmf.PFLMF_Aether", "renderSpecials", new Class[]{ Modchu_Reflect.loadClass("AbstractClientPlayer"), float.class, float.class }, new Object[]{ entityplayer, f, f1 });	}	public void renderFirstPersonArm(Object entityplayer) {		renderFirstPersonArm(entityplayer, 2);	}	@Override	public void renderFirstPersonArm(Object entityplayer, int i) {		//olddays導入時に2以外のint付きで呼ばれる。		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entityplayer);		if (modelData != null) ;else return;		if (!modelData.getCapsValueBoolean(modelData.caps_isPlayer)) {			modelData.modelMain.setCapsValue(modelData.caps_firstPerson, false);			return;		}		doRenderSetting(entityplayer, modelData);		modelData.modelMain.setCapsValue(modelData.caps_firstPerson, true);		if (i >= 2) {			if (modelData.modelMain != null) {				((MultiModelBaseBiped) modelData.modelMain.model).setRotationAnglesfirstPerson(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0625F, modelData);/*				if (modelData.modelFATT != null) {					if (modelData.modelFATT.modelInner != null) ((MultiModelBaseBiped) modelData.modelFATT.modelInner).setRotationAnglesfirstPerson(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0625F, modelData);					if (modelData.modelFATT.modelOuter != null) ((MultiModelBaseBiped) modelData.modelFATT.modelOuter).setRotationAnglesfirstPerson(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0625F, modelData);				}*/			}		}		if (modelData.modelMain.model != null				&& modelData.getCapsValue(modelData.caps_ResourceLocation) != null) {			bindTexture(modelData, modelData.getCapsValue(modelData.caps_ResourceLocation));			//Modchu_Debug.Debug("modelData.modelMain.model != null ? ="+(modelData.modelMain.model != null));			modelData.modelMain.model.renderFirstPersonHand(modelData);			//renderFirstPersonArmorRender(modelData, entityplayer, 0.0D, 0.0D, 0.0D, 0.0F, 0.0625F);		} else if (modelData.modelMain.model != null				&& PFLM_Main.BipedClass.isInstance(modelData.modelMain.model)) {			modelData.modelMain.model.renderFirstPersonHand(modelData);		}		modelData.modelMain.setCapsValue(modelData.caps_firstPerson, false);	}	@Override	public boolean isActivatedForPlayer(Object entityplayer) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entityplayer);		if (modelData != null) ;else return false;		return modelData.getCapsValueBoolean(modelData.caps_isActivated);	}	@Override	public double renderLivingLabel(Object entity, String par2Str, double d, double d1, double d2, int i) {//-@-125		if (PFLM_Main.isSmartMoving) Modchu_Reflect.invokeMethod("PFLM_RenderPlayerSmart", "renderName", new Class[]{ Modchu_Reflect.loadClass("EntityPlayer"), double.class, double.class, double.class }, pflm_RenderPlayerSmart, new Object[]{ entity, d, d1, d2 });//@-@125		if (PFLM_ConfigData.isRenderName) {			PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);			if (modelData == null) return d1;			double d3 = 0.0D;			double d4 = 0.0D;			double d5 = 0.0D;			double height = (double) modelData.modelMain.model.getHeight(modelData);			if (Modchu_AS.getBoolean(Modchu_AS.entityIsSneaking, entity)) d3 = 0.4D;			float f1 = modelData.getCapsValueFloat(modelData.caps_modelScale);			if (f1 > 0.0F) {				d5 = (double) (0.9375F - f1);				d4 = -height * d5;				if (f1 > 0.9375F) d4 -= 0.4D * d5;			}			return (d1 - 1.8D) + height + d3 + d4;		}		return d1;	}	@Override	public void renderModel(Object entity, float par2, float par3, float par4, float par5, float par6, float par7) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);		int version = Modchu_Main.getMinecraftVersion();		if (!ModchuModel_Main.useInvisibilityBody				| (ModchuModel_Main.useInvisibilityBody						&& !Modchu_AS.getBoolean(Modchu_AS.entityIsInvisible, entity))) {			int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);			Object resourceLocation = skinMode == PFLM_ModelDataMaster.instance.skinMode_Player ?					PFLM_ModelDataMaster.instance.getPlayerData(Modchu_AS.get(Modchu_AS.minecraftThePlayer)).getCapsValue(modelData.caps_ResourceLocation, 0) :						modelData.getCapsValue(modelData.caps_ResourceLocation, 0);			if (version < 160) {				String skinUrl = PFLM_ModelDataMaster.instance.getSkinUrl(modelData, entity);				String texture = (String) (skinMode == PFLM_ModelDataMaster.instance.skinMode_PlayerOnline						| skinMode == PFLM_ModelDataMaster.instance.skinMode_online ? null : resourceLocation);				Modchu_AS.set(Modchu_AS.renderLoadDownloadableImageTexture, parentRender, skinUrl, texture);				//Modchu_Debug.mlDebug("renderModel skinUrl="+skinUrl+" texture="+texture);			} else {				bindTexture(modelData, resourceLocation);			}			modelData.modelMain.setArmorRendering(true);		} else {			modelData.modelMain.setArmorRendering(false);		}		modelData.modelMain.model.render(modelData, par2, par3, par4, par5, par6, par7, (Boolean) Modchu_Reflect.getFieldObject(Modchu_ModelBaseNihilReplacePoint.class, "isRendering", modelData.modelMain));		//Modchu_Debug.mDebug("renderModel modelData.modelMain.isRendering="+modelData.modelMain.isRendering);	}	@Override	public void renderLivingAt(Object entity, double par2, double par4, double par6) {		renderPlayerSleep(entity, par2, par4, par6);		super.renderLivingAt(entity, par2, par4, par6);	}	@Override	public void renderPlayerSleep(Object entity, double var2, double var4, double var6) {		if (PFLM_Main.isSmartMoving) renderPlayerAt(entity, var2, var4, var6);	}	@Override	public void rotateCorpse(Object entity, float f, float f1, float f2) {		rotatePlayer(entity, f, f1, f2);		super.rotateCorpse(entity, f, f1, f2);	}	@Override	public void rotatePlayer(Object entity, float var2, float var3, float var4) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);		if (PFLM_Main.isSmartMoving				&& modelData != null) {//-@-125			Modchu_Reflect.invokeMethod("PFLM_RenderPlayerSmart", "rotatePlayer", new Class[]{ Modchu_Reflect.loadClass("EntityPlayer"), float.class, float.class, float.class }, pflm_RenderPlayerSmart, new Object[]{ entity, var2, var3, var4 });//@-@125/*//125delete			Modchu_Reflect.invokeMethod(PFLM_RenderPlayerSmart, "rotatePlayer", new Class[]{ EntityPlayer.class, float.class, float.class, float.class, PFLM_ModelData.class }, pflm_RenderPlayerSmart, new Object[]{ var1, var2, var3, var4, modelData });*///125delete			//Modchu_Reflect.invokeMethod(PFLM_RenderRenderSmart, "rotatePlayer", new Class[]{ EntityPlayer.class, float.class, float.class, float.class }, pflm_RenderRenderSmart, new Object[]{ var1, var2, var3, var4 });		}		if (modelData.getCapsValueBoolean(modelData.caps_isSleeping)) {			switch (modelData.getCapsValueInt(modelData.caps_rotate)) {			case 0:				GL11.glRotatef(270.0F, 0.0F, 1.0F, 0.0F);				break;			case 1:				GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);				break;			case 2:				GL11.glRotatef(90.0F, 0.0F, 1.0F, 0.0F);				break;			case 3:				GL11.glRotatef(0.0F, 0.0F, 1.0F, 0.0F);				break;			}			GL11.glRotatef(getDeathMaxRotation(entity), 0.0F, 0.0F, 1.0F);			GL11.glRotatef(270.0F, 0.0F, 1.0F, 0.0F);		}	}	public float getDeathMaxRotation(Object entity) {		return 90.0F;	}	@Override	public int getColorMultiplier(Object entity, float par2, float par3) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);		setRenderCount(modelData.modelMain, 16);		return super.getColorMultiplier(entity, par2, par3);	}	@Override	public int inheritRenderPass(Object entity, int par2, float par3) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(entity);		setRenderCount(modelData.modelFATT, 16);		return super.inheritRenderPass(entity, par2, par3);	}//smartMoving関連↓	@Override	public void renderPlayerAt(Object var1, double var2, double var4, double var6) {		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(var1);		if (PFLM_Main.isSmartMoving				&& modelData != null) Modchu_Reflect.invokeMethod("PFLM_RenderPlayerSmart", "renderPlayerAt", new Class[]{ Modchu_Reflect.loadClass("EntityPlayer"), double.class, double.class, double.class }, pflm_RenderPlayerSmart, new Object[]{ var1, var2, var4, var6 });	}	@Override	public void renderGuiIngame(Object var0) {		if (PFLM_Main.isSmartMoving) Modchu_Reflect.invokeMethod("PFLM_RenderPlayerSmart", "renderGuiIngame", new Class[]{ Modchu_Reflect.loadClass("Minecraft") }, pflm_RenderPlayerSmart, new Object[]{ var0 });	}//smartMoving関連↑}