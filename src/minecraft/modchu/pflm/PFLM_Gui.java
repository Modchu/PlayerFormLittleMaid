package modchu.pflm;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.lang.reflect.Field;import java.util.ArrayList;import java.util.List;import java.util.concurrent.ConcurrentHashMap;import javax.imageio.ImageIO;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.model.ModchuModel_Main;import modchu.model.ModchuModel_ModelRenderer;import net.minecraft.client.gui.GuiButton;import net.minecraft.client.gui.GuiScreen;import net.minecraft.client.renderer.OpenGlHelper;import net.minecraft.client.renderer.RenderHelper;import net.minecraft.client.renderer.entity.RenderManager;import net.minecraft.entity.Entity;import net.minecraft.entity.EntityLiving;import net.minecraft.entity.player.EntityPlayer;import net.minecraft.world.World;import org.lwjgl.input.Mouse;import org.lwjgl.opengl.GL11;import org.lwjgl.opengl.GL12;public class PFLM_Gui extends PFLM_GuiModelSelectBase {	private static BufferedImage bufferedimage;	private static BufferedImage bufferedimage1;	private static String modelArmorName = null;	private static String tagSetFileName = null;	private static double tempYOffset;	private static boolean imageWriteComplete = false;	private static boolean imageWriteFail = false;	private static boolean bufferedimageMode = false;	private static boolean TempYOffsetInit = false;	private static int scrollY = 0;	private static int armorType = 0;	private static int showPartsListSize = 0;	protected static boolean closePlayerToSpawn = false;	protected static boolean modelScaleButton = false;	protected static boolean result = false;	public static ConcurrentHashMap<String, Boolean> parts;	public static ConcurrentHashMap<String, Boolean> defaultParts;	public static ConcurrentHashMap<Integer, String> guiPartsNemeMap;	public static boolean colorReverse = false;	public static boolean partsButton = false;	public static boolean partsInitFlag = false;	public static boolean partsSaveFlag = false;	public static boolean partsSetDefault = false;	public static float modelScale = 0.0F;	public static int partsSetFlag = 0;	public static int setModel = 0;	public static int setArmor = 0;	public static int setColor = 0;	public static boolean noSaveFlag = false;	public static final int modeOffline = 0;	public static final int modeOnline = 1;	public static final int modeRandom = 2;	private static final int maxChangeMode = 3;	private EntityPlayer thePlayer;	protected static boolean drawMuitiEntitySetFlag;	protected static EntityLiving drawMuitiEntity;	public PFLM_Gui(World world) {		this(null, world);	}	public PFLM_Gui(PFLM_GuiBase par1GuiScreen, World world) {		super(par1GuiScreen, world);		thePlayer = Modchu_Main.getThePlayer();		parts = new ConcurrentHashMap();		drawMuitiModelDataSetting();		modelDataSetting();	}	@Override	protected void initDrawEntity() {		super.initDrawEntity();		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		modelData.setCapsValue(modelData.caps_freeVariable, "showArmor", true);		if (drawMuitiEntity != null) ;else drawMuitiEntity = (EntityLiving) Modchu_Reflect.newInstance("PFLM_EntityPlayerDummy", new Class[]{ World.class }, new Object[]{ popWorld });		PFLM_ModelData drawMuitiModelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawMuitiEntity);		drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_freeVariable, "showMainModel", true);		drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_freeVariable, "showArmor", true);		drawMuitiModelData.setRender(PFLM_Main.pflm_RenderPlayerDummy);		drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_freeVariable, "initDrawEntityFlag", true);	}	@Override	public void initGui() {		buttonOnline = PFLM_Main.changeMode == modeOnline;		buttonRandom = PFLM_Main.changeMode == modeRandom;		buttonScale = modelScaleButton;		buttonParts = partsButton;		buttonPlayer = false;		buttonShowArmor = PFLM_Main.changeMode != modeRandom;		super.initGui();		if (!displayButton) return;		int x = width / 2 + 55;		int y = height / 2 - 85;		showPartsListSize = 0;		buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 57, x + 75, y + 70, 75, 15, "KeyControls" }));		if (!Modchu_Main.isRelease) buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 59, x + 75, y + 40, 75, 15, "CustomModel" }));		if (PFLM_Main.changeMode != modeRandom) {			if (PFLM_Main.guiMultiPngSaveButton && !partsButton && !modelScaleButton) {				buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 12, x + 75, y + 100, 80, 20, "MultiPngSave" }));				bufferedimageMode = false;				if (PFLM_Main.bipedCheck() | PFLM_Main.changeMode == modeOnline) {					buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 15, 50, y + 55, 15, 15, "<" }));					buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 14, 65, y + 55, 15, 15, ">" }));					buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 17, 50, y + 72, 15, 15, "-" }));					buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 16, 65, y + 72, 15, 15, "+" }));					buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 19, 50, y + 89, 15, 15, "<" }));					buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 18, 65, y + 89, 15, 15, ">" }));					PFLM_ModelData drawMuitiModelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawMuitiEntity);					buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 21, 70, y + 107, 30, 15, "" + drawMuitiModelData.getCapsValueBoolean(drawMuitiModelData.caps_freeVariable, "showArmor") }));					if (bufferedimage == null) {						PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);						bufferedimage = PFLM_ModelDataMaster.instance.getOnlineSkin(modelData, thePlayer);						if (bufferedimage != null && PFLM_Main.changeMode == modeOnline) {							Object[] s = PFLM_ModelDataMaster.instance.checkimage(bufferedimage);							modelArmorName = (String) s[2];							boolean returnflag = (Boolean) s[5];							if (!returnflag) {								setTextureName((String) s[4]);								setTextureArmorName((String) s[2]);								setColor((Integer) s[3]);								int s2 = PFLM_Main.textureList.indexOf(getTextureName());								setModel = s2 > -1 ? s2 : 0;								s2 = PFLM_Main.textureList.indexOf(getTextureArmorName());								setArmor = s2 > -1 ? s2 : 0;							}							setcheck();							drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_textureName, PFLM_Main.textureList.get(setModel));							drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_textureArmorName, PFLM_Main.textureList.get(setArmor));						}						PFLM_Main.removeDataMap();					} else {						bufferedimageMode = PFLM_Main.changeMode == modeOnline ? true : false;					}					setcheck();				}			}		}		if (PFLM_Main.useScaleChange && modelScaleButton) {		} else {			if (!partsButton) {				if (PFLM_Main.isMulti) {					buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 30, x + 75, y - 5, 75, 15, "othersPlayer" }));				}			}		}		if (PFLM_Main.changeMode != modeRandom) {			if (partsButton) {				buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 10, x + 75, y + 10, 75, 15, "Close" }));				partsButtonAdd();			} else {				if (!modelScaleButton) buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 11, x + 75, y + 10, 75, 15, "Customize" }));			}		}	}	public void setTempYOffset(double d) {		tempYOffset = d;	}	public void partsButtonAdd() {		int j = 0;		String s;		int x;		int y;		//Modchu_Debug.mDebug("PartsButtonAdd "+buttonList.size());		buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 99, width / 2 - 200, 12 - scrollY, 70, 15, "Default" }));		if (PFLM_Main.guiShowArmorSupport) {			buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 97, width / 2 - 130, 12 - scrollY, 15, 15, "-" }));			buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 98, width / 2 - 115, 12 - scrollY, 15, 15, "+" }));		}		String s2 = null;		boolean b = true;		guiPartsNemeMap = new ConcurrentHashMap();		defaultParts = new ConcurrentHashMap();		Object model = PFLM_Main.getModel(armorType);		ConcurrentHashMap<Integer, String> showPartsNemeMap = PFLM_Config.getConfigShowPartsNemeMap(getTextureName(), armorType);		ConcurrentHashMap<String, String> showPartsReneme = PFLM_Config.getConfigShowPartsRenemeMap(model, getTextureName(), armorType);		ConcurrentHashMap<Integer, String> showPartsHideMap = PFLM_Config.getConfigShowPartsHideMap(model, getTextureName(), armorType);		//if (showPartsNemeMap != null) Modchu_Debug.mDebug("showPartsNemeMap.size()="+showPartsNemeMap.size());		//else Modchu_Debug.mDebug("showPartsNemeMap.size()=null !!");		//if (showPartsReneme != null) Modchu_Debug.mDebug("showPartsReneme.size()="+showPartsReneme.size());		//else Modchu_Debug.mDebug("showPartsReneme.size()=null !!");		//if (showPartsHideMap != null) Modchu_Debug.mDebug("showPartsHideMap.size()="+showPartsHideMap.size());		//else Modchu_Debug.mDebug("showPartsHideMap.size()=null !!");		List<String> list = new ArrayList();		ModchuModel_ModelRenderer modelRenderer = null;		Field f = null;		int i1 = 0;		for (int i = 0; i < showPartsNemeMap.size(); i++) {			s2 = showPartsNemeMap.get(i);			if (s2 != null) ;			else break;			if (list.contains(s2)) continue;			list.add(s2);			if (!partsSetDefault && parts != null && !parts.isEmpty() && parts.containsKey(s2)) {				b = parts.get(s2);			} else {				if (partsSetDefault) b = PFLM_Config.getDefaultShowPartsMapBoolean(getTextureName(), s2, armorType);				else b = true;			}			s = b ? "ON" : "OFF";			j = i1 % 2 == 0 ? 0 : 1;			x = width / 2 - 200 + (j * 70);			y = j == 0 ? 28 + (15 * i1 / 2) - scrollY : 36 + (15 * i1 / 2 - 15) - scrollY;			if (showPartsHideMap != null && showPartsHideMap.containsValue(s2)) {				//Modchu_Debug.mDebug("showPartsHideMap s2="+s2);			} else {				guiPartsNemeMap.put(i1, s2);				defaultParts.put(s2, true);				if (showPartsReneme != null && s2 != null && showPartsReneme.containsKey(s2)) {					s2 = showPartsReneme.get(s2);				}				buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 10000 + i1, x, y, 70, 15, s2 + ":" + s }));				i1++;			}		}		showPartsListSize = i1 / 2;		if (showPartsListSize < 0) showPartsListSize = 0;	}	private void partsInit() {		//Modchu_Debug.mDebug("PFLM_Gui partsInit() getTextureName()="+getTextureName());		parts = new ConcurrentHashMap();		String s2 = null;		boolean b;		Field f = null;		List<String> list = new ArrayList();		ModchuModel_ModelRenderer modelRenderer = null;		Object model = PFLM_Main.getModel(armorType);		ConcurrentHashMap<Integer, String> showPartsNemeMap = PFLM_Config.getConfigShowPartsNemeMap(getTextureName(), armorType);		ConcurrentHashMap<String, Boolean> showPartsList = PFLM_Config.getConfigShowPartsMap(getTextureName(), getColor(), armorType);		ConcurrentHashMap<String, Field> modelRendererMap = PFLM_Config.getConfigModelRendererMap(model, getTextureName(), armorType);		ConcurrentHashMap<String, Boolean> defaultShowPartsMap = PFLM_Config.getDefaultShowPartsMap(getTextureName(), armorType);		//if (showPartsList != null) Modchu_Debug.mDebug("showPartsList.size()="+showPartsList.size());		//else Modchu_Debug.mDebug("showPartsList.size()=null !!");		//Modchu_Debug.mDebug("showPartsNemeMap.size()="+showPartsNemeMap.size());		for (int i = 1; i < showPartsNemeMap.size(); i++) {			s2 = showPartsNemeMap.get(i - 1);			if (s2 != null) ;			else break;			if (list.contains(s2)) continue;			list.add(s2);			if (showPartsList != null && !showPartsList.isEmpty() && showPartsList.containsKey(s2)) {				b = showPartsList.get(s2);			} else {				b = true;				if (modelRendererMap != null && !modelRendererMap.isEmpty()) ;				else break;				if (modelRendererMap.containsKey(s2)) f = modelRendererMap.get(s2);				else f = null;				if (f != null) {					//Modchu_Debug.mDebug("PFLM_Gui partsButtonAdd() modelRendererMap f != null");					try {						Object o = f.get(model);						modelRenderer = o != null ? (ModchuModel_ModelRenderer) o : null;						if (modelRenderer != null) {							//Modchu_Debug.mmlDebug("PFLM_Gui partsInit() modelRendererMap f.getName()="+f.getName()+" modelRenderer.showModel="+modelRenderer.showModel);							if (defaultShowPartsMap != null && defaultShowPartsMap.containsKey(s2)) b = defaultShowPartsMap.get(s2);							else b = modelRenderer.showModel;							//Modchu_Debug.mmlDebug("PFLM_Gui partsInit() modelRendererMap f.getName()="+f.getName()+" b="+b);						}					} catch (Exception e) {					}				}			}			parts.put(s2, b);		}	}	public void updateScreen() {		super.updateScreen();		PFLM_ModelData drawMuitiModelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawMuitiEntity);		if (!drawMuitiModelData.getCapsValueBoolean(drawMuitiModelData.caps_freeVariable, "initDrawEntityFlag")) initDrawEntity();		if (partsSetFlag == 2) {			partsSetFlag = 3;			//if (!partsSetDefault) PFLM_Config.loadShowModelList(PFLM_Main.showModelList);			//Modchu_Debug.mDebug("updateScreen()");			if (!partsInitFlag) {				partsInitFlag = true;				partsInit();				partsSetFlag = 1;			}			initGui();		}	}	@Override	protected void actionPerformed(GuiButton guibutton) {		if (!guibutton.enabled) {			return;		}		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);		PFLM_ModelData drawEntityModelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		PFLM_ModelData drawMuitiModelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawMuitiEntity);		//isModelSize Default		if (guibutton.id == 3) {			setScale(PFLM_Main.getModelScale());			modelDataSetting();			return;		}		//isModelSize UP		if (guibutton.id == 4) {			if (Modchu_Main.isShiftKeyDown()) {				setScale(getScale() <= 9.5 ? getScale() + 0.5F : 10.0F);			} else {				if (Modchu_Main.isCtrlKeyDown()) {					setScale(getScale() <= 9.99 ? getScale() + 0.01F : 10.0F);				} else {					setScale(getScale() <= 9.9 ? getScale() + 0.1F : 10.0F);				}			}			modelDataSetting();			return;		}		//isModelSize Down		if (guibutton.id == 5) {			if (Modchu_Main.isShiftKeyDown()) {				setScale(getScale() > 0.5 ? getScale() - 0.5F : 0.01F);			} else if (Modchu_Main.isCtrlKeyDown()) {				setScale(getScale() > 0.01 ? getScale() - 0.01F : 0.01F);			} else {				setScale(getScale() > 0.1 ? getScale() - 0.1F : 0.01F);			}			modelDataSetting();			return;		}		//ScaleChange Close		if (guibutton.id == 6) {			modelScaleButton = false;			initGui();			return;		}		//ScaleChange Open		if (guibutton.id == 7) {			modelScaleButton = true;			initGui();			return;		}		//Customize Close		if (guibutton.id == 10) {			partsButton = false;			initGui();			return;		}		//CustomizeOpen		if (guibutton.id == 11) {			partsButton = true;			initGui();			return;		}		//MultiPngSave		if (guibutton.id == 12) {			imageMultiTagSetSave(getColor());			//for(int i = 0 ; i < 16 ; i++) {			//imageMultiTagSetSave(i);			//}			return;		}		//SkinModeChange		if (guibutton.id == 13) {			PFLM_Main.changeMode++;			if (PFLM_Main.changeMode >= maxChangeMode) PFLM_Main.changeMode = 0;			if (!PFLM_Main.changeModeButton && PFLM_Main.changeMode == modeOnline) {				PFLM_Main.changeMode++;				if (PFLM_Main.changeMode >= maxChangeMode) PFLM_Main.changeMode = 0;			}			switch (PFLM_Main.changeMode) {			case modeOnline:				setModel--;				guibutton.id = 14;			case modeOffline:			case modeRandom:				PFLM_Main.removeDataMap();				break;			}			bufferedimage = null;			partsSetFlag = 1;			noSaveFlag = true;			//if (PFLM_Main.changeMode != modeOnline) {				initGui();			//}			modelDataSetting();			return;		}		//guiMultiPngSaveButton setModel+		if (guibutton.id == 14) {			setModel++;			boolean b = false;			while (b == false && setModel < PFLM_Main.textureList.size()) {				drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_textureName, PFLM_Main.textureList.get(setModel));				Object ltb = ModchuModel_Main.checkTexturePackege((String) drawMuitiModelData.getCapsValue(drawMuitiModelData.caps_textureName), drawMuitiModelData.getCapsValueInt(drawMuitiModelData.caps_maidColor));				if (ltb != null) {					b = true;				} else {					setModel++;				}			}		}		//guiMultiPngSaveButton setModel-		if (guibutton.id == 15) {			setModel--;			boolean b = false;			while (b == false && setModel > -1) {				drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_textureName, PFLM_Main.textureList.get(setModel));				Object ltb = ModchuModel_Main.checkTexturePackege((String) drawMuitiModelData.getCapsValue(drawMuitiModelData.caps_textureName), drawMuitiModelData.getCapsValueInt(drawMuitiModelData.caps_maidColor));				if (ltb != null) {					b = true;				} else {					setModel--;				}			}		}		if (guibutton.id == 14 | guibutton.id == 15) {			imageWriteComplete = false;			imageWriteFail = false;			drawMuitiEntitySetFlag = true;			drawMuitiModelDataSetting();			setTextureArmorPackege(1, guibutton.id == 15);			initGui();			return;		}		if (guibutton.id == 16 | guibutton.id == 17) {			//guiMultiPngSaveButton setColor+			int color = 0;			if (guibutton.id == 16) {				color = drawMuitiModelData.getCapsValueInt(drawMuitiModelData.caps_maidColor) + 1;				colorReverse = false;			}			//guiMultiPngSaveButton setColor-			if (guibutton.id == 17) {				color = drawMuitiModelData.getCapsValueInt(drawMuitiModelData.caps_maidColor) - 1;				colorReverse = true;			}			if (color > 15) color = 0;			if (color < 0) color = 15;			imageWriteComplete = false;			imageWriteFail = false;			//drawMuitiEntitySetFlag = true;			Modchu_Debug.mDebug("guiMultiPngSaveButton color="+color);			drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_maidColor, colorCheck((String) drawMuitiModelData.getCapsValue(drawMuitiModelData.caps_textureName), color, colorReverse));			setColor = drawMuitiModelData.getCapsValueInt(drawMuitiModelData.caps_maidColor);			Modchu_Debug.mDebug("guiMultiPngSaveButton 2 setColor="+setColor);			drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_changeColor, drawMuitiModelData);			drawMuitiModelDataSetting();			initGui();			return;		}		//guiMultiPngSaveButton setArmor+		if (guibutton.id == 18) {			setArmor++;			setcheck();			boolean b = false;			while (b == false && setArmor < PFLM_Main.textureList.size()) {				drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_textureArmorName, PFLM_Main.textureList.get(setArmor));				Object ltb = ModchuModel_Main.checkTextureArmorPackege((String) drawMuitiModelData.getCapsValue(drawMuitiModelData.caps_textureArmorName));				if (ltb != null) {					b = true;				} else {					setArmor++;				}			}		}		//guiMultiPngSaveButton setArmor-		if (guibutton.id == 19) {			setArmor--;			setcheck();			boolean b = false;			while (b == false && setArmor < PFLM_Main.textureList.size()) {				drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_textureArmorName, PFLM_Main.textureList.get(setArmor));				Object ltb = ModchuModel_Main.checkTextureArmorPackege((String) drawMuitiModelData.getCapsValue(drawMuitiModelData.caps_textureArmorName));				if (ltb != null) {					b = true;				} else {					setArmor--;				}			}		}		if (guibutton.id == 18 | guibutton.id == 19) {			setcheck();			drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_textureArmorName, PFLM_Main.textureList.get(setArmor));			imageWriteComplete = false;			imageWriteFail = false;			drawMuitiEntitySetFlag = true;			drawMuitiModelDataSetting();			initGui();			return;		}		//ShowArmor		if(guibutton.id == 20)		{			Modchu_Debug.mDebug("actionPerformed showArmor="+(drawEntityModelData.getCapsValue(drawEntityModelData.caps_freeVariable, "showArmor")));			drawEntityModelData.setCapsValue(drawEntityModelData.caps_freeVariable, "showArmor", !drawEntityModelData.getCapsValueBoolean(drawEntityModelData.caps_freeVariable, "showArmor"));			modelDataSetting();			initGui();			return;		}		//guiMultiPngSaveButton ShowArmor		if(guibutton.id == 21)		{			drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_freeVariable, "showArmor", !drawMuitiModelData.getCapsValueBoolean(drawMuitiModelData.caps_freeVariable, "showArmor"));			drawEntitySetFlag = true;			initDrawStringListFlag = true;			initGui();			return;		}		//OthersPlayer		if (guibutton.id == 30) {			Modchu_Reflect.invokeMethod("Minecraft", "func_71373_a", "displayGuiScreen", new Class[]{ GuiScreen.class }, Modchu_Main.getMinecraft(), new Object[]{ new PFLM_GuiOthersPlayer(this, popWorld) });		}		//ModelChange		if (guibutton.id == 50 | guibutton.id == 51) {			String[] s0 = PFLM_Main.setTexturePackege(getTextureName(), getTextureArmorName(), getColor(), guibutton.id == 50 ? 1 : 0, false);			if (s0 != null && s0[0] != null && !s0[0].isEmpty()) {				setTextureName(s0[0]);				if (s0[1] != null && !s0[1].isEmpty()) setTextureArmorName(s0[1]);			}			modelData.setCapsValue(modelData.caps_textureName, getTextureName());			modelData.setCapsValue(modelData.caps_textureArmorName, getTextureArmorName());			modelChange();			return;		}		//ColorChange		if (guibutton.id == 52) {			setColor(getColor() - 1);			colorReverse = true;		}		if (guibutton.id == 53) {			setColor(getColor() + 1);			colorReverse = false;		}		if (guibutton.id == 52 | guibutton.id == 53) {			setColor(colorCheck(getTextureName(), getColor(), colorReverse));			int color = getColor();			PFLM_Main.setMaidColor(color);			modelData.setCapsValue(modelData.caps_maidColor, color);			PFLM_ModelDataMaster.instance.allModelTextureReset(thePlayer, modelData);			partsSetFlag = 1;			partsInitFlag = false;			partsSaveFlag = false;			partsSetDefault = false;			imageWriteComplete = false;			imageWriteFail = false;			noSaveFlag = true;			PFLM_Main.changeColor(thePlayer);			modelDataSetting();			PFLM_Main.changeColor(drawEntity);			return;		}		//ArmorChange		if (guibutton.id == 54 | guibutton.id == 55) {			//armorNamber += guibutton.id == 55 ? 1 : -1;			//if (armorNamber >= PFLM_Main.maxTexturesArmorNamber) armorNamber = 0;			//if (armorNamber < 0) armorNamber = PFLM_Main.maxTexturesArmorNamber - 1;			String[] s0 = PFLM_Main.setTexturePackege(getTextureName(), getTextureArmorName(), getColor(), guibutton.id == 54 ? 1 : 0, true);			setTextureArmorName(s0[1]);			//Modchu_Debug.mDebug("armorNamber="+armorNamber);			//Object ltb = Modchu_Main.getTextureBox(getTexturesArmorNamber(armorNamber));			//if (ltb != null) setTextureArmorName(Modchu_Main.getTextureBoxFileName(ltb));			//modelData.setCapsValue(data.caps_maidColor, getColor());			modelData.setCapsValue(modelData.caps_textureArmorName, getTextureArmorName());			//Modchu_Debug.mDebug("ArmorChange getTextureArmorName()="+getTextureArmorName());			if (PFLM_Main.isModelSize) {				closePlayerToSpawn = true;			}			partsSetFlag = 1;			partsInitFlag = false;			imageWriteComplete = false;			imageWriteFail = false;			noSaveFlag = true;			modelDataSetting();			return;		}		//ModelListSelect		if (guibutton.id == 56) {			Modchu_Reflect.invokeMethod("Minecraft", "func_71373_a", "displayGuiScreen", new Class[]{ GuiScreen.class }, Modchu_Main.getMinecraft(), new Object[]{ new PFLM_GuiModelSelect(this, popWorld, false, getColor()) });			//mc.displayGuiScreen(new PFLM_GuiModelSelect(this, popWorld, 0));			return;		}		//KeyControls		if (guibutton.id == 57) {			Modchu_Reflect.invokeMethod("Minecraft", "func_71373_a", "displayGuiScreen", new Class[]{ GuiScreen.class }, Modchu_Main.getMinecraft(), new Object[]{ new PFLM_GuiKeyControls(this, popWorld) });			//mc.displayGuiScreen(new PFLM_GuiKeyControls(this, popWorld));			return;		}		//Handedness		if (guibutton.id == 58) {			if (Modchu_Main.isShiftKeyDown()) {				PFLM_Main.handednessMode--;			} else {				PFLM_Main.handednessMode++;			}			if (PFLM_Main.handednessMode < -1) PFLM_Main.handednessMode = 1;			if (PFLM_Main.handednessMode > 1) PFLM_Main.handednessMode = -1;			PFLM_ModelDataMaster.instance.setHandedness(thePlayer, PFLM_Main.handednessMode);			initDrawStringListFlag = true;			return;		}		//CustomModel		if (guibutton.id == 59) {			Modchu_Reflect.invokeMethod("Minecraft", "func_71373_a", "displayGuiScreen", new Class[]{ GuiScreen.class }, Modchu_Main.getMinecraft(), new Object[]{ new PFLM_GuiCustomModel(this, popWorld) });			//mc.displayGuiScreen(new PFLM_GuiCustomModel(this, popWorld));			return;		}		//Customize ArmorType		if (guibutton.id == 97) {			armorType--;			if (armorType == 1) armorType = 0;		}		if (guibutton.id == 98) {			armorType++;			if (armorType == 1) armorType = 2;		}		if (guibutton.id == 97 | guibutton.id == 98) {			if (armorType < 0) armorType = 3;			if (armorType > 3) armorType = 0;			partsSetFlag = 1;			partsInitFlag = false;			return;		}		//Customize Default		if (guibutton.id == 99) {			parts = new ConcurrentHashMap();			PFLM_Config.setConfigShowPartsMap(getTextureName(), getColor(), armorType, parts);			partsSetDefault = true;			modelChange();			return;		}		//PartsButton		if (guibutton.id >= 10000 && guibutton.id <= 19999) {			partsSetDefault = false;			int i = guibutton.id - 10000;			String s = null;			if (!guiPartsNemeMap.isEmpty() && guiPartsNemeMap.containsKey(i)) {				s = guiPartsNemeMap.get(i);			}			if (s != null) {				if (parts != null) {					boolean b = false;					if (!parts.isEmpty() && parts.containsKey(s)) b = !parts.get(s);					parts.put(s, b);				} else {					parts = new ConcurrentHashMap();					parts.put(s, false);				}			}			PFLM_Config.setConfigShowPartsMap(getTextureName(), getColor(), armorType, parts);			partsSaveFlag = true;			partsSetFlag = 1;			return;		}		//Save		if (guibutton.id == 200) {			PFLM_Config.clearCfgData();			if (partsSaveFlag) PFLM_Config.setConfigShowPartsMap(getTextureName(), getColor(), armorType, parts);			PFLM_Main.saveParamater();			PFLM_Config.loadConfig(PFLM_Main.showModelList, PFLM_Main.cfgfile);			PFLM_Config.loadShowModelList(PFLM_Main.showModelList);			PFLM_Main.clearDataMap();			noSaveFlag = false;			Modchu_Reflect.invokeMethod("Minecraft", "func_71373_a", "displayGuiScreen", new Class[]{ GuiScreen.class }, Modchu_Main.getMinecraft(), new Object[]{ null });			//mc.displayGuiScreen(null);			return;		}	}	@Override	public void handleMouseInput() {		super.handleMouseInput();		if (partsButton) {			int i = Mouse.getEventX() * width / mc.displayWidth;			//int j = height - Mouse.getEventY() * height / mc.displayHeight - 1;			if (i < width / 2 - 60) {				// ホイールの獲得				int k = Mouse.getEventDWheel();				if (k != 0) {					scrollY -= k * 0.25;					scrollY = scrollY < 0 ? 0 : scrollY;					scrollY = scrollY > showPartsListSize * 15 ? showPartsListSize * 15 : scrollY;					initGui();				}			}		}	}	@Override	protected void keyTyped(char c, int i) {		if (i == 200) {			scrollY += 30;			scrollY = scrollY > showPartsListSize * 15 ? showPartsListSize * 15 : scrollY;			initGui();		}		if (i == 208) {			scrollY -= 30;			scrollY = scrollY < 0 ? 0 : scrollY;			initGui();		}		super.keyTyped(c, i);	}	protected void drawGuiContainerBackgroundLayer(float f, int i, int j) {		int xSize = 80;		int ySize = 50;		int guiLeft = width / 2 - xSize + 30;		int guiTop = height / 2 - (ySize / 2) - 20;		drawStringPosX = guiLeft;		drawStringPosY = guiTop + 90;		if (initDrawStringListFlag) {			initDrawStringListFlag = false;			drawStringList.clear();			StringBuilder s = (new StringBuilder()).append("TextureName : ");			StringBuilder s1 = (new StringBuilder()).append("ArmorName : ");			StringBuilder s2 = (new StringBuilder()).append("MaidColor : ");			int x = 0;			//int x = partsButton | !getModelType().startsWith("Biped") ? 0 : 150;			if (PFLM_Main.changeMode != modeRandom) {				PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);				boolean localFlag = modelData.getCapsValueInt(modelData.caps_skinMode) == PFLM_ModelDataMaster.instance.skinMode_local;				if (PFLM_Main.changeMode != modeOnline | localFlag) {					s = s.append(getTextureName());					drawStringList.add(s.toString());					s2 = s2.append(getColor());					drawStringList.add(s2.toString());				}				if ((PFLM_Main.bipedCheck() | PFLM_Main.changeMode == modeOnline) && !localFlag) {				} else {					s1 = s1.append(getTextureArmorName());					drawStringList.add(s1.toString());				}			}			StringBuilder s9 = (new StringBuilder()).append("changeMode : ");			s9 = s9.append(getChangeModeString(PFLM_Main.changeMode));			drawStringList.add(s9.toString());			StringBuilder s10 = (new StringBuilder()).append("Handedness : ");			s10 = s10.append(getHandednessModeString(PFLM_Main.handednessMode));			PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);			if (PFLM_Main.handednessMode == -1) s10 = s10.append(" Result : ").append(getHandednessModeString(modelData.getCapsValueInt(modelData.caps_dominantArm)));			drawStringList.add(s10.toString());			if (PFLM_Main.isModelSize && PFLM_Main.changeMode != modeOnline) {				float f1 = 0.5F;				float f2 = 1.35F;				float f3 = 1.17F;				if (!TempYOffsetInit) {					TempYOffsetInit = true;					if (PFLM_Main.gotchaNullCheck()) setTempYOffset(PFLM_Main.getyOffset());				}				f1 = PFLM_Main.getWidth();				f2 = PFLM_Main.getHeight();				f3 = PFLM_Main.getyOffset();				String s3 = "Size : Width = " + f1 + " Height = " + f2;				s3 = (new StringBuilder()).append(s3).toString();				drawStringList.add(s3.toString());				String s4 = "yOffset : " + f3;				s4 = (new StringBuilder()).append(s4).toString();				drawStringList.add(s4.toString());			}			if (PFLM_Main.changeMode != modeRandom) {				//Modchu_Debug.mDebug("PFLM_Main.changeMode="+PFLM_Main.changeMode);				PFLM_ModelData drawEntityModelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);				StringBuilder s8 = (new StringBuilder()).append("showArmor : ");				s8 = s8.append(drawEntityModelData.getCapsValueBoolean(drawEntityModelData.caps_freeVariable, "showArmor"));				drawStringList.add(s8.toString());			}		}		if (PFLM_Main.newRelease && !partsButton && !modelScaleButton) {			drawString("PlayerFormLittleMaid", 10, 10, 0xffffff);			drawString((new StringBuilder()).append("newVersion v").append(PFLM_Main.newVersion).append(" Release!").toString(), 10, 20, 0xffffff);		}		if (Modchu_Main.newRelease && !partsButton && !modelScaleButton) {			drawString("ModchuLib", 10, 30, 0xffffff);			drawString((new StringBuilder()).append("newVersion v").append(Modchu_Main.newVersion).append(" Release!").toString(), 10, 40, 0xffffff);		}		if (PFLM_Main.changeMode != modeRandom) {			String s5;			if (imageWriteComplete) {				s5 = (new StringBuilder()).append(PFLM_Main.textureSavedir).append(tagSetFileName).append(" Successfully written file.").toString();				drawString(s5, 10, 10, 0xffffff);			}			if (imageWriteFail) {				s5 = (new StringBuilder()).append(PFLM_Main.textureSavedir).append(tagSetFileName).append(" Failed to write file.").toString();				drawString(s5, 10, 10, 0xffffff);			}		}		if (PFLM_Main.changeMode != modeRandom && PFLM_Main.changeMode != modeOnline) {			drawString("Model", width / 2 + 60, height / 2 - 56, 0xffffff);			drawString("Color", width / 2 + 60, height / 2 - 41, 0xffffff);			drawString("Armor", width / 2 + 60, height / 2 - 27, 0xffffff);		}		if (partsButton) {			String s8 = "Parts showModel set";			s8 = (new StringBuilder()).append(s8).toString();			drawString(s8, width / 2 - 180, -scrollY, 0xffffff);			if (PFLM_Main.guiShowArmorSupport) {				s8 = (new StringBuilder()).append("Type : ").append(getArmorTypeString(armorType)).toString();				drawString(s8, width / 2 - 100, 15 - scrollY, 0xffffff);			}		}		if (PFLM_Main.useScaleChange && modelScaleButton) {			String s6 = "modelScale : " + getScale();			s6 = (new StringBuilder()).append(s6).toString();			fontRenderer.drawString(s6, guiLeft - 140, guiTop + 30, 0xffffff);			String s7 = "modelScaleChange";			s7 = (new StringBuilder()).append(s7).toString();			fontRenderer.drawString(s7, guiLeft - 140, guiTop - 5, 0xffffff);		}		if (PFLM_Main.changeMode != modeRandom) {			//Modchu_Debug.mDebug("PFLM_Main.changeMode="+PFLM_Main.changeMode);			int var4 = guiLeft;			int var5 = guiTop;			drawMobModel2(i, j, var4 + 51, var5 + 75, 0, -25, 50F, 0.0F, true);			if (PFLM_Main.changeMode == modeOnline | PFLM_Main.bipedCheck() && PFLM_Main.guiMultiPngSaveButton && !partsButton && !modelScaleButton) {				PFLM_ModelData drawMuitiModelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawMuitiEntity);				if (drawMuitiEntitySetFlag) {					Modchu_Debug.mDebug("drawMuitiEntitySetFlag");					setcheck();					//setTextureValue();					PFLM_Main.pflm_RenderPlayerDummy.allModelInit(drawMuitiEntity, true);					drawMuitiEntitySetFlag = false;				}				GL11.glPushMatrix();				GL11.glDisable(GL11.GL_LIGHTING);				drawString("MultiTagSet", 15, height / 2 - 60, 0xffffff);				drawString("Model", 15, height / 2 - 25, 0xffffff);				drawString("Color", 15, height / 2 - 9, 0xffffff);				drawString("Armor", 15, height / 2 + 8, 0xffffff);				drawString("ShowArmor", 15, height / 2 + 25, 0xffffff);				drawString("MultiTextureName : ", 10, guiTop + 90, 0xffffff);				drawString((String) drawMuitiModelData.getCapsValue(drawMuitiModelData.caps_textureName), 10, guiTop + 100, 0xffffff);				drawString((new StringBuilder()).append("MultiColor : ").append(drawMuitiModelData.getCapsValueInt(drawMuitiModelData.caps_maidColor)).toString(), 10, guiTop + 110, 0xffffff);				drawString("MultiArmorName : ", 10, guiTop + 120, 0xffffff);				drawString((String) drawMuitiModelData.getCapsValue(drawMuitiModelData.caps_textureArmorName), 10, guiTop + 130, 0xffffff);				//drawMuitiEntity.setPosition(thePlayer.posX , thePlayer.posY, thePlayer.posZ);				drawMobModel2(i, j, 120, height / 2 + 20, -90, -50, 30F, 0.0F, false, drawMuitiEntity);				GL11.glPopMatrix();			}		}		super.drawGuiContainerBackgroundLayer(f, i, j);	}	public void modelChange() {		if (PFLM_Main.isModelSize) {			closePlayerToSpawn = true;		}		PFLM_Main.pflm_RenderPlayerDummy.allModelInit(thePlayer, true);		modelDataSetting();		partsSetFlag = 1;		partsInitFlag = false;		partsSaveFlag = false;		partsSetDefault = false;		imageWriteComplete = false;		imageWriteFail = false;		noSaveFlag = true;		drawMuitiEntitySetFlag = true;		//Modchu_Debug.mDebug("modelChange()");	}	private void modelDataSetting() {		PFLM_ModelData drawEntityModelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		drawEntityModelData.setCapsValue(drawEntityModelData.caps_textureName, getTextureName());		drawEntityModelData.setCapsValue(drawEntityModelData.caps_textureArmorName, getTextureArmorName());		drawEntityModelData.setCapsValue(drawEntityModelData.caps_maidColor, getColor());		PFLM_ModelData thePlayerModelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);		switch(PFLM_Main.changeMode) {		case modeOffline:			drawEntityModelData.setCapsValue(drawEntityModelData.caps_skinMode, PFLM_ModelDataMaster.skinMode_offline);			break;		case modeOnline:			//drawEntityModelData.modelMain = thePlayerModelData.modelMain;			//drawEntityModelData.modelFATT = thePlayerModelData.modelFATT;			drawEntityModelData.setCapsValue(drawEntityModelData.caps_skinMode, PFLM_ModelDataMaster.skinMode_online);			drawEntityModelData.setCapsValue(drawEntityModelData.caps_textureName, thePlayerModelData.getCapsValue(thePlayerModelData.caps_textureName));			drawEntityModelData.setCapsValue(drawEntityModelData.caps_textureArmorName, thePlayerModelData.getCapsValue(thePlayerModelData.caps_textureArmorName));			drawEntityModelData.setCapsValue(drawEntityModelData.caps_maidColor, thePlayerModelData.getCapsValueInt(thePlayerModelData.caps_maidColor));			break;		}		drawEntityModelData.setCapsValue(drawEntityModelData.caps_modelScale, getScale());		boolean isSitting = thePlayerModelData.getCapsValueBoolean(thePlayerModelData.caps_isSitting);		Modchu_Debug.mDebug("modelDataSetting isSitting="+isSitting);		drawEntityModelData.setCapsValue(drawEntityModelData.caps_isSitting, isSitting);		drawEntityModelData.setCapsValue(drawEntityModelData.caps_isRiding, isSitting);		drawEntityModelData.setCapsValue(drawEntityModelData.caps_isSneak, thePlayerModelData.getCapsValue(thePlayerModelData.caps_isSneak));		drawEntityModelData.setCapsValue(drawEntityModelData.caps_isSleeping, thePlayerModelData.getCapsValue(thePlayerModelData.caps_isSleeping));		PFLM_Main.pflm_RenderPlayerDummy.allModelInit(drawEntity, true);		if (PFLM_Main.changeMode == modeOnline) {			drawEntityModelData.setCapsValue(drawEntityModelData.caps_ResourceLocation, 0, thePlayerModelData.getCapsValue(thePlayerModelData.caps_ResourceLocation));		}		initDrawStringListFlag = true;	}	private void drawMuitiModelDataSetting() {		setcheck();		PFLM_ModelData drawMuitiModelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawMuitiEntity);		drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_textureName, PFLM_Main.textureList.get(setModel));		drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_textureArmorName, PFLM_Main.textureList.get(setArmor));		drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_maidColor, setColor);		PFLM_Main.pflm_RenderPlayerDummy.allModelInit(drawMuitiEntity, true);	}	public void setTextureArmorPackege(int i, boolean b) {		PFLM_ModelData drawMuitiModelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawMuitiEntity);		setArmorNumber(setModel);		drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_textureArmorName, drawMuitiModelData.getCapsValue(drawMuitiModelData.caps_textureName));		super.setTextureArmorPackege(i);		String s = (String) drawMuitiModelData.getCapsValue(drawMuitiModelData.caps_textureArmorName);		Modchu_Debug.mDebug("setTextureArmorPackege s=" + s);		Modchu_Debug.mDebug("setTextureArmorPackege specificationArmorCheckBoolean=" + PFLM_Main.specificationArmorCheckBoolean((String) drawMuitiModelData.getCapsValue(drawMuitiModelData.caps_textureName)));		if (s != null && !s.isEmpty() && s.equalsIgnoreCase("erasearmor")) {			s = b | PFLM_Main.specificationArmorCheckBoolean((String) drawMuitiModelData.getCapsValue(drawMuitiModelData.caps_textureName)) ? "x32_QB" : "default";			drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_textureArmorName, s);		}		if (ModchuModel_Main.checkTextureArmorPackege(s) != null) ;		else drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_textureArmorName, drawMuitiModelData.getCapsValue(drawMuitiModelData.caps_textureName));	}	@Override	public void setArmorTextureValue() {		if (getTextureArmorName() == null) setTextureArmorName(getTextureName());		if (ModchuModel_Main.checkTextureArmorPackege(getTextureArmorName()) == null) {			setTextureArmorName(PFLM_Main.getArmorName(getTextureName(), 1));		}	}/*	private int getTexturesArmorNamber(int i) {		if (i >= PFLM_Main.maxTexturesArmorNamber				| i < 0) return -1;		return PFLM_Main.texturesArmorNamber[i];	}*/	private static void setArmorNumber(int i) {		setArmor = i;	}	@Override	public void onGuiClosed() {		super.onGuiClosed();		if (closePlayerToSpawn && PFLM_Main.isModelSize) {			setPositionCorrection();		}		TempYOffsetInit = false;		drawMuitiEntitySetFlag = true;	}	@Override	public void memoryRelease() {/*		bufferedimage = null;		bufferedimage1 = null;		modelArmorName = null;		tagSetFileName = null;		parts = null;		defaultParts = null;		guiPartsNemeMap = null;*/	}	public static void setPositionCorrection() {		PFLM_Main.setSize(0.6F, 1.8F);		PFLM_Main.resetHeight();		double d = tempYOffset - PFLM_Main.getyOffset() - 0.5D;		PFLM_Main.setPositionCorrection(0.0D, -d, 0.0D);	}	public void imageMultiTagSetSave(int c) {		BufferedImage image = null;		if (bufferedimageMode) {			if (bufferedimage != null) {				image = bufferedimage;				image = fullColorConversion(image);				result = true;			} else {				image = null;			}		} else {			try {				if (bufferedimage1 == null | PFLM_Main.changeMode == modeOffline) {					image = readTextureImage(ModchuModel_Main.textureManagerGetTexture(getTextureName(), c));				} else {					image = bufferedimage1;					result = true;				}			} catch (IOException e1) {				Modchu_Debug.mDebug("imageMultiTagSetSave Failed to read image.");				e1.printStackTrace();			}		}		if (image != null && result) {			PFLM_ModelData drawMuitiModelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawMuitiEntity);			String s1 = (String) drawMuitiModelData.getCapsValue(drawMuitiModelData.caps_textureName);			String s0 = Modchu_Main.lastIndexProcessing(s1, "_");			boolean rightBottomSet = false;			if (s0.startsWith("Elsa")) rightBottomSet = true;			if (PFLM_Main.bipedCheck() | PFLM_Main.changeMode == modeOnline) {				result = false;			} else {				result = true;			}			String s2 = (String) drawMuitiModelData.getCapsValue(drawMuitiModelData.caps_textureArmorName);			int t = PFLM_Main.textureList.indexOf(s1);			Modchu_Debug.mDebug("imageMultiTagSetSave t=" + t);			int t2 = PFLM_Main.textureList.indexOf(s2);			t = t < 0 ? 0 : t;			t2 = t2 < 0 ? 0 : t2;			//PFLM用か判断用ドット			int setX = 63;			int setY = 0;			if (rightBottomSet) setY = 31;			int rgb = colorRGB(255, 0, 0);			image.setRGB(setX, setY, rgb);			//ローカルテクスチャを使用するかどうか判断用ドット			rgb = result ? colorRGB(255, 255, 0) : colorRGB(255, 0, 255);			setY = 1;			if (rightBottomSet) setY = 30;			image.setRGB(setX, setY, rgb);			//r = color , g = ArmorName , b = textureName			int r1 = result ? 255 - c : 255 - drawMuitiModelData.getCapsValueInt(drawMuitiModelData.caps_maidColor);			int g1 = 255 - t2;			int b1 = 255 - t;			rgb = colorRGB(r1, g1, b1);			setX = 62;			setY = 0;			if (rightBottomSet) setY = 31;			image.setRGB(setX, setY, rgb);			Modchu_Debug.mDebug("imageMultiTagSetSave r1=" + r1 + " g1=" + g1 + " b1=" + b1);			//handedness r = 255 right , r = 0 left , else Random			PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(thePlayer);			int handedness = modelData.getCapsValueInt(modelData.caps_dominantArm);			r1 = handedness == 0 ? 255 : handedness == 1 ? 0 : 128;			//g = modelScale			g1 = 255 - ((int) (getScale() / (0.9375F / 24F)));			if (g1 > 255) g1 = 255;			if (g1 < 0) g1 = 0;			b1 = 255;			rgb = colorRGB(r1, g1, b1);			setX = 62;			setY = 1;			if (rightBottomSet) setY = 30;			image.setRGB(setX, setY, rgb);			Object resourceLocation = ModchuModel_Main.textureManagerGetTexture(s1, c);			String s = "output.png";/*			if (resourceLocation == null				| bufferedimageMode) {					s = "steve.png";			} else {				s = resourceLocation.func_110624_b();			}			if (s == null				| s.equals("minecraft")) s = "steve.png";			if (s.lastIndexOf(".png") == -1) s = s + ".png";*/			tagSetFileName = s;			s = (new StringBuilder()).append(PFLM_Main.textureSavedir).append(s).toString();			createDir(s);			try {				result = ImageIO.write(image, "png", new File(Modchu_Main.getMinecraftDir() + s));				image.flush();				imageWriteComplete = true;				imageWriteFail = false;			} catch (Exception e) {				e.printStackTrace();			}		} else {			Modchu_Debug.mDebug("imageMultiTagSetSave null !!");			imageWriteComplete = false;			imageWriteFail = true;			tagSetFileName = tagSetFileName == null && bufferedimageMode ? "image == null error." : null;			tagSetFileName = tagSetFileName == null && !result ? " image size error." : tagSetFileName;		}	}	private BufferedImage readTextureImage(Object o) throws IOException {		//Modchu_Debug.mDebug("readTextureImage assets/minecraft/" + resourceLocation.func_110624_b());		//Modchu_Debug.mDebug("readTextureImage assets/minecraft/" + resourceLocation.func_110623_a());		BufferedImage image = null;		InputStream var2 = null;		if (Modchu_Main.getMinecraftVersion() > 159) {			try {				Object var3 = Modchu_Reflect.invokeMethod("ResourceManager", "func_110536_a", "getResource", new Class[]{ Modchu_Reflect.loadClass("ResourceLocation") }, Modchu_Reflect.invokeMethod("Minecraft", "func_110442_L", "getResourceManager", Modchu_Main.getMinecraft()), new Object[]{ o });				//Modchu_Debug.mDebug("var3="+var3);				var2 = (InputStream) Modchu_Reflect.invokeMethod("Resource", "func_110527_b", "getInputStream", var3);				//Modchu_Debug.mDebug("var2="+var2);				image = ImageIO.read(var2);			} finally {				if (var2 != null) var2.close();			}		} else {			image = ImageIO.read((File) Modchu_Reflect.invokeMethod(Class.class, "getResource", new Class[]{ String.class }, Modchu_Reflect.loadClass("Minecraft"), new Object[]{ o }));		}		return fullColorConversion(image);	}	private BufferedImage fullColorConversion(BufferedImage image) {		BufferedImage write = null;		try {			//フルカラー変換処理			result = (image.getWidth() != 64) | (image.getHeight() != 32) ? false : true;			if (!result) return null;			int w = 64;			int h = 32;			write = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);			for (int y = 0; y < h; y++) {				for (int x = 0; x < w; x++) {					int c = image.getRGB(x, y);					write.setRGB(x, y, c);				}			}		} catch (Exception e) {			Modchu_Debug.lDebug("" + getClass().getName(), "fullColorConversion", 2, e);		}		return write;	}	public static void createDir(String s) {		String s1 = "";		String as[] = s.split("/");		for (int i = 0; i < as.length - 1; i++) {			s1 = (new StringBuilder()).append(s1).append(as[i]).toString();			boolean flag = (new File((new StringBuilder()).append(Modchu_Main.getMinecraftDir()).append(s1).toString())).mkdir();			s1 = (new StringBuilder()).append(s1).append("/").toString();		}	}	public static void setcheck() {		setModel = setModel >= PFLM_Main.textureList.size() ? 0 : setModel;		setModel = setModel < 0 ? PFLM_Main.textureList.size() - 1 : setModel;		setModel = setModel < 0 ? 0 : setModel;		PFLM_ModelData drawMuitiModelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawMuitiEntity);		if (drawMuitiModelData.getCapsValueInt(drawMuitiModelData.caps_maidColor) > 15) {			drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_maidColor, 0);		}		if (drawMuitiModelData.getCapsValueInt(drawMuitiModelData.caps_maidColor) < 0) {			drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_maidColor, 15);		}		setArmor = setArmor >= PFLM_Main.textureList.size() ? 0 : setArmor;		setArmor = setArmor < 0 ? PFLM_Main.textureList.size() - 1 : setArmor;		setArmor = setArmor < 0 ? 0 : setArmor;		drawMuitiModelData.setCapsValue(drawMuitiModelData.caps_skinMode, PFLM_ModelDataMaster.skinMode_offline);	}	public static int colorA(int c) {		return c >>> 24;	}	public static int colorR(int c) {		return c >> 16 & 0xff;	}	public static int colorG(int c) {		return c >> 8 & 0xff;	}	public static int colorB(int c) {		return c & 0xff;	}	public static int colorRGB(int r, int g, int b) {		return 0xff000000 | r << 16 | g << 8 | b;	}	public static int colorARGB(int a, int r, int g, int b) {		return a << 24 | r << 16 | g << 8 | b;	}	@Override	public String getTextureName() {		return PFLM_Main.textureName;	}	@Override	public void setTextureName(String s) {		PFLM_Main.textureName = s;	}	@Override	public String getTextureArmorName() {		return PFLM_Main.textureArmorName;	}	@Override	public void setTextureArmorName(String s) {		PFLM_Main.textureArmorName = s;	}	@Override	public int getColor() {		return PFLM_Main.maidColor;	}	@Override	public void setColor(int i) {		PFLM_Main.maidColor = i & 0xf;	}	@Override	public float getScale() {		return modelScale;	}	@Override	public void setScale(float f) {		modelScale = f;	}	public static String getChangeModeString(int i) {		String s = null;		switch (i) {		case modeOffline:			s = "modeOffline";			break;		case modeOnline:			s = "modeOnline";			break;		case modeRandom:			s = "modeRandom";			break;		}		return s;	}	public static String getHandednessModeString(int i) {		String s = null;		switch (i) {		case -1:			s = "RandomMode";			break;		case 0:			s = "R";			break;		case 1:			s = "L";			break;		}		return s;	}	public static String getArmorTypeString(int i) {		String s = null;		switch (i) {		case 0:			s = "mainInner";			break;		case 2:			s = "armorInner";			break;		case 3:			s = "armorOuter";			break;		}		return s;	}/*	public static ConcurrentHashMap<String, Boolean> getShowPartsMap() {		return !partsInitFlag ? PFLM_Config.getConfigShowPartsMap(getTextureName(), getColor(), armorType)				: partsSetDefault ? PFLM_Gui.defaultParts : PFLM_Gui.parts;	}*/}