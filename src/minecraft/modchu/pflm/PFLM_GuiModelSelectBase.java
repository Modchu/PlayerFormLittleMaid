package modchu.pflm;import java.util.LinkedList;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.model.ModchuModel_Main;import modchu.model.replacepoint.ModchuModel_TextureManagerReplacePoint;import net.minecraft.client.Minecraft;import net.minecraft.client.gui.GuiButton;import net.minecraft.client.gui.GuiScreen;import net.minecraft.client.renderer.OpenGlHelper;import net.minecraft.client.renderer.RenderHelper;import net.minecraft.client.renderer.entity.RenderManager;import net.minecraft.entity.EntityLiving;import net.minecraft.world.World;import org.lwjgl.input.Mouse;import org.lwjgl.opengl.GL11;import org.lwjgl.opengl.GL12;public abstract class PFLM_GuiModelSelectBase extends PFLM_GuiBase {	protected boolean drawEntitySetFlag = true;	protected LinkedList<String> drawStringList = new LinkedList();	protected boolean initDrawStringListFlag = false;	protected boolean buttonOnline = false;	protected boolean buttonRandom = false;	protected boolean buttonScale = false;	protected boolean buttonParts = false;	protected boolean buttonPlayer = false;	protected boolean buttonReturn = false;	protected boolean buttonShowArmor = false;	protected boolean displayButton = true;	protected int drawStringPosX = 0;	protected int drawStringPosY = 0;	protected int drawStringColor = 0xffffff;	private int comeraRotationX;	private int comeraRotationY;	private int comeraRotationZ;	private int prevMouseX = -999;	private int prevMouseY = -999;	private float cameraZoom = 1.0F;	private long tempLastMouseEventTime;	private int tempLastMouseClick;	private float comeraPosX;	private float comeraPosY;	private float comeraPosZ;	private boolean clickMove;	public PFLM_GuiModelSelectBase(PFLM_GuiBase par1GuiScreen, World world) {		super(par1GuiScreen, world);		drawEntitySetFlag = true;	}	@Override	public void initGui() {		buttonList.clear();		if (!displayButton) return;		int x = width / 2 + 55;		int y = height / 2 - 85;		buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 200, x, y + 100, 75, 20, "Save" }));		buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 13, x, y + 85, 75, 15, "ChangeMode" }));		if (!buttonPlayer) buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 58, x + 75, y + 55, 75, 15, "Handedness" }));		if (buttonReturn) buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 201, x + 75, y + 100, 75, 20, "Return" }));		if (!buttonRandom && !buttonPlayer) {			if (!buttonOnline) {				buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 56, x - 10, y + 10, 85, 15, "ModelListSelect" }));				buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 50, x + 40, y + 25, 15, 15, "<" }));				buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 51, x + 55, y + 25, 15, 15, ">" }));				buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 52, x + 40, y + 40, 15, 15, "-" }));				buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 53, x + 55, y + 40, 15, 15, "+" }));				buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 54, x + 40, y + 55, 15, 15, "<" }));				buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 55, x + 55, y + 55, 15, 15, ">" }));			}		}		if (PFLM_Main.useScaleChange && !buttonPlayer && buttonScale) {			buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 3, width / 2 - 170, height / 2 - 40, 50, 20, "Default" }));			buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 4, width / 2 - 120, height / 2 - 40, 30, 20, "UP" }));			buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 5, width / 2 - 200, height / 2 - 40, 30, 20, "Down" }));			buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 6, x + 75, y + 25, 75, 15, "Close" }));		} else {			if (!buttonParts && !buttonPlayer) {				if (PFLM_Main.useScaleChange) buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 7, x + 75, y + 25, 75, 15, "ScaleChange" }));			}		}		if (buttonShowArmor) buttonList.add(Modchu_Reflect.newInstance("PFLM_GuiSmallButton", new Class[]{ GuiScreen.class, int.class, int.class, int.class, int.class, int.class, String.class }, new Object[]{ this, 20, x, y + 70, 75, 15, "showArmor" }));		if (getScale() == 0.0F) {			setScale(PFLM_Main.getModelScale());		}		guiMode = true;	}	protected void drawGuiContainerBackgroundLayer(float f, int i, int j) {		if (drawStringList != null				&& !drawStringList.isEmpty()				&& displayButton) ;else return;		String s;		for (int i1 = 0; i1 < drawStringList.size(); i1++) {			s = drawStringList.get(i1);			drawString(s, drawStringPosX, drawStringPosY + (10 * i1), drawStringColor);		}	}	public void drawString(String s, int i, int j, int k) {		if (!displayButton) return;		fontRenderer.drawString(s, i, j, k);	}	public void setTextureArmorPackege() {		setTextureArmorPackege(2);	}	public void setTextureArmorPackege(int i) {		//modelData.setCapsValue(modelData.caps_textureArmorName, modelData.getCapsValue(modelData.caps_textureName));		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		String s = PFLM_Main.getArmorName((String) modelData.getCapsValue(modelData.caps_textureArmorName), i);		modelData.setCapsValue(modelData.caps_textureArmorName, s);		Object ltb = ModchuModel_Main.checkTextureArmorPackege(s);		if (ltb != null) ;		else {			modelData.setCapsValue(modelData.caps_textureArmorName, "default");		}		if (modelData.getCapsValue(modelData.caps_textureArmorName) != null) ;		else modelData.setCapsValue(modelData.caps_textureArmorName, modelData.getCapsValue(modelData.caps_textureName));	}	public void setTextureValue() {		String textureName = getTextureName();		String defaultModelName = ModchuModel_TextureManagerReplacePoint.defaultModelName;		if (textureName != null && !textureName.isEmpty()) ;		else {			if (textureName != null && textureName.isEmpty() | textureName.startsWith("default_" + defaultModelName)) textureName = "default";		}		PFLM_ModelData modelData = (PFLM_ModelData) PFLM_ModelDataMaster.instance.getPlayerData(drawEntity);		modelData.setCapsValue(modelData.caps_textureName, textureName);		modelData.setCapsValue(modelData.caps_textureArmorName, getTextureArmorName());		modelData.setCapsValue(modelData.caps_maidColor, getColor());		setTextureArmorPackege();		setScale(getScale());	}	public void setArmorTextureValue() {	}	public void drawMobModel2(int i, int j, int x, int y, int x2, int y2, float f, float f1, boolean move) {		drawMobModel2(i, j, x, y, x2, y2, f, f1, 30F, -30F, -30F, 0F, move, drawEntity);	}	public void drawMobModel2(int i, int j, int x, int y, int x2, int y2, float f, float f1, boolean move, EntityLiving entity) {		drawMobModel2(i, j, x, y, x2, y2, f, f1, 30F, -30F, -30F, 0F, move, entity);	}	public void drawMobModel2(int i, int j, int x, int y, int x2, int y2, float f, float f1, float f2, float f3, float f4, float f5, boolean move) {		drawMobModel2(i, j, x, y, x2, y2, f, f1, f2, f3, f4, f5, move, drawEntity);	}	public void drawMobModel2(int i, int j, int x, int y, int x2, int y2, float f, float f1, float f2, float f3, float f4, float f5, boolean move, EntityLiving entity) {		//Modchu_Debug.dDebug("drawMobModel2 x=" + i + " y=" + j, 1);		GL11.glEnable(32826 /*GL_RESCALE_NORMAL_EXT*/);		GL11.glEnable(2903 /*GL_COLOR_MATERIAL*/);		GL11.glPushMatrix();		if (entity.height > 2F) {			f = f * 2F / entity.height;		}		GL11.glTranslatef(x, y, 50F + f1);		GL11.glScalef(-f, f, f);		if ((Modchu_Main.isRelease() && Modchu_Main.isForge) | PFLM_Main.oldRender) GL11.glRotatef(180F, 180.0F, 0.0F, 1.0F);		else GL11.glRotatef(180F, 0.0F, 0.0F, 1.0F);		if (!PFLM_Main.oldRender) GL11.glRotatef(180F, 0.0F, 1.0F, 0.0F);		RenderHelper.enableStandardItemLighting();		if (move) {			float ff1 = (float) (width / 2 + x2) - i;			float ff2 = (float) (height / 2 + y2) - j;			GL11.glRotatef(135F, 0.0F, 1.0F, 0.0F);			GL11.glRotatef(-135F, 0.0F, 1.0F, 0.0F);			//GL11.glRotatef(-(float)Math.atan(f6 / 40F) * 20F, 1.0F, 0.0F, 0.0F);			GL11.glTranslatef(comeraPosX, comeraPosY, comeraPosZ);			GL11.glRotatef(comeraRotationX, 1.0F, 0.0F, 0.0F);			GL11.glRotatef(comeraRotationY, 0.0F, 1.0F, 0.0F);			GL11.glRotatef(comeraRotationZ, 0.0F, 0.0F, 1.0F);			GL11.glRotatef((float) Math.atan(ff1 / 40F) * f5, 0.0F, 1.0F, 0.0F);			GL11.glScalef(cameraZoom, cameraZoom, cameraZoom);			entity.rotationYaw = (float) Math.atan(ff1 / 40F) * f2;			entity.rotationPitch = (float) Math.atan(ff2 / 40F) * f3;			//entity.renderYawOffset = (float)Math.atan(ff1 / 40F) * f4;			entity.prevRotationYawHead = entity.rotationYawHead;			entity.rotationYawHead = entity.rotationYaw;			//entity.rotationYawHead = 0F;			//entity.prevRotationYawHead = 0F;			entity.renderYawOffset = 0F;			//Modchu_Debug.dDebug("drawMobModel2 ff1=" + ff1 + " f2=" + f2+" entity.rotationYaw="+entity.rotationYaw, 2);			//Modchu_Debug.dDebug("drawMobModel2 ff2=" + ff1 + " f3=" + f3, 3);		} else {			entity.rotationYaw = 0F;			entity.rotationPitch = 0F;			entity.renderYawOffset = 0F;			entity.rotationYawHead = 0F;		}		GL11.glTranslatef(0.0F, entity.yOffset, 0.0F);		//RenderManager.instance.playerViewY = 180F;		RenderHelper.disableStandardItemLighting();		GL11.glDisable(GL12.GL_RESCALE_NORMAL);		OpenGlHelper.setActiveTexture(OpenGlHelper.lightmapTexUnit);		GL11.glDisable(GL11.GL_TEXTURE_2D);		OpenGlHelper.setActiveTexture(OpenGlHelper.defaultTexUnit);		RenderManager.instance.renderEntityWithPosYaw(entity, 0.0D, 0.0D, 0.0D, 0.0F, 1.0F);		//GL13.glMultiTexCoord2f(33985 /*GL_TEXTURE1_ARB*/, 240.0F, 240.0F);		GL11.glPopMatrix();		RenderHelper.enableStandardItemLighting();		//RenderHelper.disableStandardItemLighting();		GL11.glDisable(32826 /*GL_RESCALE_NORMAL_EXT*/);		GL11.glDisable(GL12.GL_RESCALE_NORMAL);		OpenGlHelper.setActiveTexture(OpenGlHelper.lightmapTexUnit);		GL11.glDisable(GL11.GL_TEXTURE_2D);		OpenGlHelper.setActiveTexture(OpenGlHelper.defaultTexUnit);		GL11.glDisable(GL11.GL_LIGHTING);	}	@Override	protected void mouseClickMove(int mouseX, int mouseY, int clickButton, long time) {		//Modchu_Debug.dDebug("mouseClickMove x=" + mouseX + " y=" + mouseY + " clickButton=" + clickButton + " time=" + time);		//Modchu_Debug.dDebug("mouseClickMove anyButtonClick=" + PFLM_GuiSmallButtonMaster.anyButtonClick + " allButtonOutOfRangeClick="+PFLM_GuiSmallButtonMaster.allButtonOutOfRangeClick, 1);		if (prevMouseX != -999				&& prevMouseY != -999				&& time > 200				&& ((!PFLM_GuiSmallButtonMaster.anyButtonClick				&& PFLM_GuiSmallButtonMaster.allButtonOutOfRangeClick)				| !displayButton)) {			int x = prevMouseX - mouseX;			int y = prevMouseY - mouseY;			switch (clickButton) {			case 0:				float f1 = 0.02F;				if (x != 0) comeraPosX += ((Modchu_Main.isRelease() && Modchu_Main.isForge) | PFLM_Main.oldRender ? -x : x) * f1;				if (y != 0) {					float f2 = y * f1;					if (Modchu_Main.isCtrlKeyDown()) comeraPosZ += f2;					else comeraPosY += f2;				}				float f3 = width / 2;				if (comeraPosX < -f3) comeraPosX = -f3;				if (comeraPosY < -f3) comeraPosY = -f3;				if (comeraPosZ < -f3) comeraPosZ = -f3;				if (comeraPosX > f3) comeraPosX = f3;				if (comeraPosY > f3) comeraPosY = f3;				if (comeraPosZ > f3) comeraPosZ = f3;				break;			case 1:				if (x != 0) comeraRotationY += x;				if (y != 0) comeraRotationX += y;				break;			case 2:				if (x != 0) comeraRotationZ += x;				break;			}		}		prevMouseX = mouseX;		prevMouseY = mouseY;		tempLastMouseEventTime = -1;		clickMove = true;	}	@Override	protected void mouseMovedOrUp(int mouseX, int mouseY, int clickButton) {		super.mouseMovedOrUp(mouseX, mouseY, clickButton);		//Modchu_Debug.dDebug("mouseMovedOrUp x="+mouseX+" y="+mouseY+" clickButton="+clickButton);		prevMouseX = -999;		prevMouseY = -999;	}	@Override	public void handleMouseInput() {		super.handleMouseInput();		int k = Mouse.getEventButton();		int i = Mouse.getEventX() * width / mc.displayWidth;		//Modchu_Debug.dDebug("handleMouseInput k="+k+" cameraZoom="+cameraZoom, 3);		if (i >= width / 2 - 60) {			// ホイールの獲得			int wheel = Mouse.getEventDWheel();			if (wheel != 0) {				float f = cameraZoom * (Modchu_Main.isCtrlKeyDown() ? 0.25F : 0.05F);				cameraZoom += wheel > 0 ? f : -f;				if (cameraZoom < 0.05F) cameraZoom = 0.05F;				if (cameraZoom > 50.0F) cameraZoom = 50.0F;			}		}		long systemTime = Minecraft.getSystemTime();		if (Mouse.isButtonDown(0)				| Mouse.isButtonDown(1)				| Mouse.isButtonDown(2)) ;else {			if (tempLastMouseEventTime == -1) {				if (clickMove) {					clickMove = false;					tempLastMouseEventTime = -2;				} else {					tempLastMouseEventTime = systemTime;				}			}			return;		}		//Modchu_Debug.mDebug("doubleClick systemTime="+systemTime+" tempLastMouseEvent="+tempLastMouseEvent);		if (tempLastMouseEventTime < 0				| systemTime - tempLastMouseEventTime > 500L				| systemTime - tempLastMouseEventTime < 25L) {			tempLastMouseEventTime = -1;			return;		}		//Modchu_Debug.mDebug("doubleClick Time="+(systemTime - tempLastMouseEventTime));		tempLastMouseEventTime = systemTime;		boolean doubleClick = k == tempLastMouseClick;		tempLastMouseClick = k;		if (doubleClick) {			//Modchu_Debug.mDebug("doubleClick ok.");			tempLastMouseEventTime = -1;			switch (tempLastMouseClick) {			case 0:				comeraPosX = 0.0F;				comeraPosY = 0.0F;				comeraPosZ = 0.0F;				break;			case 1:				comeraRotationX = 0;				comeraRotationY = 0;				comeraRotationZ = 0;				break;			case 2:				cameraZoom = 1.0F;				break;			}		}	}	@Override	protected void keyTyped(char c, int i) {		//Modchu_Debug.dDebug("keyTyped i="+i);		if (i == 59) {			displayButton = !displayButton;			initGui();		}		super.keyTyped(c, i);	}	public void selected(String textureName, String textureArmorName, int color, boolean armorMode) {		if (!armorMode) {			setTextureName(textureName);			setColor(color);		}		setTextureArmorName(textureArmorName);		initDrawEntity();	}	@Override	public void memoryRelease() {	}	public int colorCheck(String textureName, int i, boolean colorReverse) {		Object texture = ModchuModel_Main.textureManagerGetTexture(textureName, i);		if (texture == null) {			int n = 0;			for (; n < 16 && texture == null; n = n + 1) {				i = colorReverse ? i - 1 : i + 1;				i = i & 0xf;				texture = ModchuModel_Main.textureManagerGetTexture(textureName, i);			}		}		return i;	}	public abstract String getTextureName();	public abstract void setTextureName(String s);	public abstract String getTextureArmorName();	public abstract void setTextureArmorName(String s);	public abstract int getColor();	public abstract void setColor(int i);	public abstract float getScale();	public abstract void setScale(float f);	public abstract void modelChange();}